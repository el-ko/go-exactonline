// Copyright {{.ServiceEntity.Year}} The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package {{.ServiceEntity.Package}}

// {{.EndpointServiceName}} is responsible for communicating with
// the {{.Name}} endpoint of the {{.ServiceEntity.Name}} service.
type {{.EndpointServiceName}} service

// {{.Name}}: {{.Description}}
// Service: {{.Service}}
// Entity: {{.Name}}
// URL: {{.URL}}
// HasWebhook: {{.HasWebhook}}
// IsInBeta: {{.IsInBeta}}
// Methods: {{range .Methods}}{{.}} {{end}}
// Endpoint docs: https://start.exactonline.nl/docs/{{.Docs}}
type {{.Name}} struct {
{{- range .Properties -}}
	{{if .Name}}
	// {{.Name}}:
	{{- range $i, $e := .Description -}}
	{{if $i}} //{{end}} {{ $e }}
	{{- end}}
	{{.Name}} *{{.Type}} `json:"{{.OriginalName}},omitempty"`
	{{end -}}
{{end}} 
}

func (s *{{.Name}}) GetIdentifier() {{.PrimaryProperty.Type}} {
	return *s.{{.PrimaryProperty.Name}}
}

{{ if (.HasMethod "GET")}}
// List the {{.Name}} entities{{ if .NeedsDivision }} in the provided divison{{end}}.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *{{.EndpointServiceName}}) List(ctx context.Context, division int, all bool) ([]*{{.Name}}, error) {
	var entities []*{{.Name}}
	u, err := s.client.ResolvePathWithDivision("{{.URL}}?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
{{end}}

