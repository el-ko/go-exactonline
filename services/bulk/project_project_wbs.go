// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package bulk

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ProjectProjectWBSEndpoint is responsible for communicating with
// the ProjectProjectWBS endpoint of the Bulk service.
type ProjectProjectWBSEndpoint service

// ProjectProjectWBS:
// Service: Bulk
// Entity: ProjectProjectWBS
// URL: /api/v1/{division}/bulk/Project/ProjectWBS
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=BulkProjectProjectWBS
type ProjectProjectWBS struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AdditionalInvoicing: Edm.Byte
	AdditionalInvoicing *byte `json:"AdditionalInvoicing,omitempty"`

	// BaselineDate: Edm.DateTime
	BaselineDate *types.Date `json:"BaselineDate,omitempty"`

	// BlockEntry: Edm.Boolean
	BlockEntry *bool `json:"BlockEntry,omitempty"`

	// BlockRebilling: Edm.Boolean
	BlockRebilling *bool `json:"BlockRebilling,omitempty"`

	// BudgetOverrunHours: Edm.Byte
	BudgetOverrunHours *byte `json:"BudgetOverrunHours,omitempty"`

	// Completed: Edm.Byte
	Completed *byte `json:"Completed,omitempty"`

	// Cost: Edm.Double
	Cost *float64 `json:"Cost,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// DefaultItem: Edm.Guid
	DefaultItem *types.GUID `json:"DefaultItem,omitempty"`

	// DefaultItemIsMandatory: Edm.Byte
	DefaultItemIsMandatory *byte `json:"DefaultItemIsMandatory,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// Hours: Edm.Double
	Hours *float64 `json:"Hours,omitempty"`

	// InvoiceMethod: Edm.Int16
	InvoiceMethod *int `json:"InvoiceMethod,omitempty"`

	// IsBaseline: Edm.Byte
	IsBaseline *byte `json:"IsBaseline,omitempty"`

	// Milestone: Edm.Byte
	Milestone *byte `json:"Milestone,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Parent: Edm.Guid
	Parent *types.GUID `json:"Parent,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectTerm: Edm.Guid
	ProjectTerm *types.GUID `json:"ProjectTerm,omitempty"`

	// PurchaseMarkupPercentage: Edm.Double
	PurchaseMarkupPercentage *float64 `json:"PurchaseMarkupPercentage,omitempty"`

	// PurchasePrice: Edm.Double
	PurchasePrice *float64 `json:"PurchasePrice,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// Revenue: Edm.Double
	Revenue *float64 `json:"Revenue,omitempty"`

	// SequenceNumber: Edm.Int32
	SequenceNumber *int `json:"SequenceNumber,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// Supplier: Edm.Guid
	Supplier *types.GUID `json:"Supplier,omitempty"`

	// TimeQuantityToAlert: Edm.Double
	TimeQuantityToAlert *float64 `json:"TimeQuantityToAlert,omitempty"`

	// Type: Edm.Int16
	Type *int `json:"Type,omitempty"`
}

func (e *ProjectProjectWBS) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ProjectProjectWBSEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Project/ProjectWBS", method)
}

// List the ProjectProjectWBS entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectProjectWBSEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ProjectProjectWBS, error) {
	var entities []*ProjectProjectWBS
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/bulk/Project/ProjectWBS", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ProjectProjectWBS entitiy in the provided division.
func (s *ProjectProjectWBSEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ProjectProjectWBS, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/bulk/Project/ProjectWBS", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ProjectProjectWBS{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
