// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package openingbalance

import (
	"context"

	"github.com/mcnijman/go-exactonline/types"
)

// PreviousYearProcessedEndpoint is responsible for communicating with
// the PreviousYearProcessed endpoint of the OpeningBalance service.
type PreviousYearProcessedEndpoint service

// PreviousYearProcessed:
// Service: OpeningBalance
// Entity: PreviousYearProcessed
// URL: /api/v1/{division}/openingbalance/PreviousYear/Processed
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=OpeningBalancePreviousYearProcessed
type PreviousYearProcessed struct {
	// Division: Division code.
	Division *int `json:"Division,omitempty"`

	// GLAccount: The balance sheet account.
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// ReportingYear: The reporting year of the opening balance.
	ReportingYear *int `json:"ReportingYear,omitempty"`

	// Amount: The opening balance amount of the G/L account.
	Amount *float64 `json:"Amount,omitempty"`

	// BalanceSide: Indicates whether the G/L account is a debit or credit account. D = Debit, C = Credit.
	BalanceSide *string `json:"BalanceSide,omitempty"`

	// GLAccountCode: The code of the G/L account.
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription: The description of the G/L account.
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`
}

func (s *PreviousYearProcessed) GetIdentifier() int {
	return *s.Division
}

// List the PreviousYearProcessed entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PreviousYearProcessedEndpoint) List(ctx context.Context, division int, all bool) ([]*PreviousYearProcessed, error) {
	var entities []*PreviousYearProcessed
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/openingbalance/PreviousYear/Processed?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
