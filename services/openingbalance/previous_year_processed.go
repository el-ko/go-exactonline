// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package openingbalance

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// PreviousYearProcessedEndpoint is responsible for communicating with
// the PreviousYearProcessed endpoint of the OpeningBalance service.
type PreviousYearProcessedEndpoint service

// PreviousYearProcessed:
// Service: OpeningBalance
// Entity: PreviousYearProcessed
// URL: /api/v1/{division}/openingbalance/PreviousYear/Processed
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=OpeningBalancePreviousYearProcessed
type PreviousYearProcessed struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// GLAccount: Edm.Guid
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// ReportingYear: Edm.Int32
	ReportingYear *int `json:"ReportingYear,omitempty"`

	// Amount: Edm.Double
	Amount *float64 `json:"Amount,omitempty"`

	// BalanceSide: Edm.String
	BalanceSide *string `json:"BalanceSide,omitempty"`

	// GLAccountCode: Edm.String
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription: Edm.String
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`
}

func (e *PreviousYearProcessed) GetPrimary() *int {
	return e.Division
}

func (s *PreviousYearProcessedEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "PreviousYear/Processed", method)
}

// List the PreviousYearProcessed entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PreviousYearProcessedEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PreviousYearProcessed, error) {
	var entities []*PreviousYearProcessed
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/openingbalance/PreviousYear/Processed", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PreviousYearProcessed entitiy in the provided division.
func (s *PreviousYearProcessedEndpoint) Get(ctx context.Context, division int, id *int) (*PreviousYearProcessed, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/openingbalance/PreviousYear/Processed", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PreviousYearProcessed{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
