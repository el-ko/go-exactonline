// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchaseentry

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// PurchaseEntriesEndpoint is responsible for communicating with
// the PurchaseEntries endpoint of the PurchaseEntry service.
type PurchaseEntriesEndpoint service

// PurchaseEntries:
// Service: PurchaseEntry
// Entity: PurchaseEntries
// URL: /api/v1/{division}/purchaseentry/PurchaseEntries
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseEntryPurchaseEntries
type PurchaseEntries struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// EntryID: Edm.Guid
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// AmountDC: Edm.Double
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// BatchNumber: Edm.Int32
	BatchNumber *int `json:"BatchNumber,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentNumber: Edm.Int32
	DocumentNumber *int `json:"DocumentNumber,omitempty"`

	// DocumentSubject: Edm.String
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// DueDate: Edm.DateTime
	DueDate *types.Date `json:"DueDate,omitempty"`

	// EntryDate: Edm.DateTime
	EntryDate *types.Date `json:"EntryDate,omitempty"`

	// EntryNumber: Edm.Int32
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// ExternalLinkDescription: Edm.String
	ExternalLinkDescription *string `json:"ExternalLinkDescription,omitempty"`

	// ExternalLinkReference: Edm.String
	ExternalLinkReference *string `json:"ExternalLinkReference,omitempty"`

	// GAccountAmountFC: Edm.Double
	GAccountAmountFC *float64 `json:"GAccountAmountFC,omitempty"`

	// InvoiceNumber: Edm.Int32
	InvoiceNumber *int `json:"InvoiceNumber,omitempty"`

	// Journal: Edm.String
	Journal *string `json:"Journal,omitempty"`

	// JournalDescription: Edm.String
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OrderNumber: Edm.Int32
	OrderNumber *int `json:"OrderNumber,omitempty"`

	// PaymentCondition: Edm.String
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentConditionDescription: Edm.String
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// PaymentConditionPaymentMethod: Edm.String
	PaymentConditionPaymentMethod *string `json:"PaymentConditionPaymentMethod,omitempty"`

	// PaymentReference: Edm.String
	PaymentReference *string `json:"PaymentReference,omitempty"`

	// ProcessNumber: Edm.Int32
	ProcessNumber *int `json:"ProcessNumber,omitempty"`

	// PurchaseEntryLines: PurchaseEntryLines
	PurchaseEntryLines *json.RawMessage `json:"PurchaseEntryLines,omitempty"`

	// Rate: Edm.Double
	Rate *float64 `json:"Rate,omitempty"`

	// ReportingPeriod: Edm.Int16
	ReportingPeriod *int `json:"ReportingPeriod,omitempty"`

	// ReportingYear: Edm.Int16
	ReportingYear *int `json:"ReportingYear,omitempty"`

	// Reversal: Edm.Boolean
	Reversal *bool `json:"Reversal,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// StatusDescription: Edm.String
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// Supplier: Edm.Guid
	Supplier *types.GUID `json:"Supplier,omitempty"`

	// SupplierName: Edm.String
	SupplierName *string `json:"SupplierName,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// TypeDescription: Edm.String
	TypeDescription *string `json:"TypeDescription,omitempty"`

	// VATAmountDC: Edm.Double
	VATAmountDC *float64 `json:"VATAmountDC,omitempty"`

	// VATAmountFC: Edm.Double
	VATAmountFC *float64 `json:"VATAmountFC,omitempty"`

	// YourRef: Edm.String
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *PurchaseEntries) GetPrimary() *types.GUID {
	return e.EntryID
}

func (s *PurchaseEntriesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "purchaseentry/PurchaseEntries", method)
}

// List the PurchaseEntries entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseEntriesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PurchaseEntries, error) {
	var entities []*PurchaseEntries
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntries", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PurchaseEntries entitiy in the provided division.
func (s *PurchaseEntriesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*PurchaseEntries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PurchaseEntries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty PurchaseEntries entity
func (s *PurchaseEntriesEndpoint) New() *PurchaseEntries {
	return &PurchaseEntries{}
}

// Create the PurchaseEntries entity in the provided division.
func (s *PurchaseEntriesEndpoint) Create(ctx context.Context, division int, entity *PurchaseEntries) (*PurchaseEntries, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntries", division) // #nosec
	e := &PurchaseEntries{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the PurchaseEntries entity in the provided division.
func (s *PurchaseEntriesEndpoint) Update(ctx context.Context, division int, entity *PurchaseEntries) (*PurchaseEntries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &PurchaseEntries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the PurchaseEntries entity in the provided division.
func (s *PurchaseEntriesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
