// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchaseentry

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// PurchaseEntryLinesEndpoint is responsible for communicating with
// the PurchaseEntryLines endpoint of the PurchaseEntry service.
type PurchaseEntryLinesEndpoint service

// PurchaseEntryLines:
// Service: PurchaseEntry
// Entity: PurchaseEntryLines
// URL: /api/v1/{division}/purchaseentry/PurchaseEntryLines
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseEntryPurchaseEntryLines
type PurchaseEntryLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AmountDC: Edm.Double
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// Asset: Edm.Guid
	Asset *types.GUID `json:"Asset,omitempty"`

	// AssetDescription: Edm.String
	AssetDescription *string `json:"AssetDescription,omitempty"`

	// CostCenter: Edm.String
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostCenterDescription: Edm.String
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit: Edm.String
	CostUnit *string `json:"CostUnit,omitempty"`

	// CostUnitDescription: Edm.String
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EntryID: Edm.Guid
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// From: Edm.DateTime
	From *types.Date `json:"From,omitempty"`

	// GLAccount: Edm.Guid
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// GLAccountCode: Edm.String
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription: Edm.String
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`

	// IntraStatArea: Edm.String
	IntraStatArea *string `json:"IntraStatArea,omitempty"`

	// IntraStatCountry: Edm.String
	IntraStatCountry *string `json:"IntraStatCountry,omitempty"`

	// IntraStatDeliveryTerm: Edm.String
	IntraStatDeliveryTerm *string `json:"IntraStatDeliveryTerm,omitempty"`

	// IntraStatTransactionA: Edm.String
	IntraStatTransactionA *string `json:"IntraStatTransactionA,omitempty"`

	// IntraStatTransactionB: Edm.String
	IntraStatTransactionB *string `json:"IntraStatTransactionB,omitempty"`

	// IntraStatTransportMethod: Edm.String
	IntraStatTransportMethod *string `json:"IntraStatTransportMethod,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// PrivateUsePercentage: Edm.Double
	PrivateUsePercentage *float64 `json:"PrivateUsePercentage,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// SerialNumber: Edm.String
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// StatisticalNetWeight: Edm.Double
	StatisticalNetWeight *float64 `json:"StatisticalNetWeight,omitempty"`

	// StatisticalNumber: Edm.String
	StatisticalNumber *string `json:"StatisticalNumber,omitempty"`

	// StatisticalQuantity: Edm.Double
	StatisticalQuantity *float64 `json:"StatisticalQuantity,omitempty"`

	// StatisticalValue: Edm.Double
	StatisticalValue *float64 `json:"StatisticalValue,omitempty"`

	// Subscription: Edm.Guid
	Subscription *types.GUID `json:"Subscription,omitempty"`

	// SubscriptionDescription: Edm.String
	SubscriptionDescription *string `json:"SubscriptionDescription,omitempty"`

	// To: Edm.DateTime
	To *types.Date `json:"To,omitempty"`

	// TrackingNumber: Edm.Guid
	TrackingNumber *types.GUID `json:"TrackingNumber,omitempty"`

	// TrackingNumberDescription: Edm.String
	TrackingNumberDescription *string `json:"TrackingNumberDescription,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// VATAmountDC: Edm.Double
	VATAmountDC *float64 `json:"VATAmountDC,omitempty"`

	// VATAmountFC: Edm.Double
	VATAmountFC *float64 `json:"VATAmountFC,omitempty"`

	// VATBaseAmountDC: Edm.Double
	VATBaseAmountDC *float64 `json:"VATBaseAmountDC,omitempty"`

	// VATBaseAmountFC: Edm.Double
	VATBaseAmountFC *float64 `json:"VATBaseAmountFC,omitempty"`

	// VATCode: Edm.String
	VATCode *string `json:"VATCode,omitempty"`

	// VATCodeDescription: Edm.String
	VATCodeDescription *string `json:"VATCodeDescription,omitempty"`

	// VATNonDeductiblePercentage: Edm.Double
	VATNonDeductiblePercentage *float64 `json:"VATNonDeductiblePercentage,omitempty"`

	// VATPercentage: Edm.Double
	VATPercentage *float64 `json:"VATPercentage,omitempty"`

	// WithholdingAmountDC: Edm.Double
	WithholdingAmountDC *float64 `json:"WithholdingAmountDC,omitempty"`

	// WithholdingTax: Edm.String
	WithholdingTax *string `json:"WithholdingTax,omitempty"`
}

func (e *PurchaseEntryLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *PurchaseEntryLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "purchaseentry/PurchaseEntryLines", method)
}

// List the PurchaseEntryLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseEntryLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PurchaseEntryLines, error) {
	var entities []*PurchaseEntryLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntryLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PurchaseEntryLines entitiy in the provided division.
func (s *PurchaseEntryLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*PurchaseEntryLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntryLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PurchaseEntryLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty PurchaseEntryLines entity
func (s *PurchaseEntryLinesEndpoint) New() *PurchaseEntryLines {
	return &PurchaseEntryLines{}
}

// Create the PurchaseEntryLines entity in the provided division.
func (s *PurchaseEntryLinesEndpoint) Create(ctx context.Context, division int, entity *PurchaseEntryLines) (*PurchaseEntryLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntryLines", division) // #nosec
	e := &PurchaseEntryLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the PurchaseEntryLines entity in the provided division.
func (s *PurchaseEntryLinesEndpoint) Update(ctx context.Context, division int, entity *PurchaseEntryLines) (*PurchaseEntryLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntryLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &PurchaseEntryLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the PurchaseEntryLines entity in the provided division.
func (s *PurchaseEntryLinesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseentry/PurchaseEntryLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
