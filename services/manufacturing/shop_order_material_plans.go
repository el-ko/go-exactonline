// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"

	"github.com/mcnijman/go-exactonline/types"
)

// ShopOrderMaterialPlansEndpoint is responsible for communicating with
// the ShopOrderMaterialPlans endpoint of the Manufacturing service.
type ShopOrderMaterialPlansEndpoint service

// ShopOrderMaterialPlans:
// Service: Manufacturing
// Entity: ShopOrderMaterialPlans
// URL: /api/v1/{division}/manufacturing/ShopOrderMaterialPlans
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingShopOrderMaterialPlans
type ShopOrderMaterialPlans struct {
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Backflush: Indicates if this is a backflush step
	Backflush *byte `json:"Backflush,omitempty"`

	// CalculatorType: Calculator type
	CalculatorType *int `json:"CalculatorType,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of the material
	Description *string `json:"Description,omitempty"`

	// DetailDrawing: Detail drawing reference
	DetailDrawing *string `json:"DetailDrawing,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Item: Reference to Items table
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Item Code
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of Item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemPictureUrl: URL of the material item&#39;s picture
	ItemPictureUrl *string `json:"ItemPictureUrl,omitempty"`

	// LineNumber: Line number
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Line notes
	Notes *string `json:"Notes,omitempty"`

	// PlannedAmountFC: Planned amount in the currency of the transaction
	PlannedAmountFC *float64 `json:"PlannedAmountFC,omitempty"`

	// PlannedDate: Date that the material is required.
	PlannedDate *types.Date `json:"PlannedDate,omitempty"`

	// PlannedPriceFC: Planned price of the material
	PlannedPriceFC *float64 `json:"PlannedPriceFC,omitempty"`

	// PlannedQuantity: Intended quantity
	PlannedQuantity *float64 `json:"PlannedQuantity,omitempty"`

	// PlannedQuantityFactor: Intended quantity unit factor
	PlannedQuantityFactor *float64 `json:"PlannedQuantityFactor,omitempty"`

	// ShopOrder: Reference to ShopOrders table
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// Status: Line status
	Status *int `json:"Status,omitempty"`

	// StatusDescription: Description of Status
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// Type: Type
	Type *int `json:"Type,omitempty"`

	// Unit: Unit
	Unit *string `json:"Unit,omitempty"`

	// UnitDescription: Unit description
	UnitDescription *string `json:"UnitDescription,omitempty"`
}

func (s *ShopOrderMaterialPlans) GetIdentifier() types.GUID {
	return *s.ID
}

// List the ShopOrderMaterialPlans entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ShopOrderMaterialPlansEndpoint) List(ctx context.Context, division int, all bool) ([]*ShopOrderMaterialPlans, error) {
	var entities []*ShopOrderMaterialPlans
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderMaterialPlans?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
