// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ShopOrderMaterialPlansEndpoint is responsible for communicating with
// the ShopOrderMaterialPlans endpoint of the Manufacturing service.
type ShopOrderMaterialPlansEndpoint service

// ShopOrderMaterialPlans:
// Service: Manufacturing
// Entity: ShopOrderMaterialPlans
// URL: /api/v1/{division}/manufacturing/ShopOrderMaterialPlans
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingShopOrderMaterialPlans
type ShopOrderMaterialPlans struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Backflush: Edm.Byte
	Backflush *byte `json:"Backflush,omitempty"`

	// CalculatorType: Edm.Int32
	CalculatorType *int `json:"CalculatorType,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// DetailDrawing: Edm.String
	DetailDrawing *string `json:"DetailDrawing,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemPictureUrl: Edm.String
	ItemPictureUrl *string `json:"ItemPictureUrl,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// PlannedAmountFC: Edm.Double
	PlannedAmountFC *float64 `json:"PlannedAmountFC,omitempty"`

	// PlannedDate: Edm.DateTime
	PlannedDate *types.Date `json:"PlannedDate,omitempty"`

	// PlannedPriceFC: Edm.Double
	PlannedPriceFC *float64 `json:"PlannedPriceFC,omitempty"`

	// PlannedQuantity: Edm.Double
	PlannedQuantity *float64 `json:"PlannedQuantity,omitempty"`

	// PlannedQuantityFactor: Edm.Double
	PlannedQuantityFactor *float64 `json:"PlannedQuantityFactor,omitempty"`

	// RoutingStepID: Edm.Guid
	RoutingStepID *types.GUID `json:"RoutingStepID,omitempty"`

	// ShopOrder: Edm.Guid
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// Status: Edm.Int32
	Status *int `json:"Status,omitempty"`

	// StatusDescription: Edm.String
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// Unit: Edm.String
	Unit *string `json:"Unit,omitempty"`

	// UnitDescription: Edm.String
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// WastePercentage: Edm.Double
	WastePercentage *float64 `json:"WastePercentage,omitempty"`
}

func (e *ShopOrderMaterialPlans) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ShopOrderMaterialPlansEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/ShopOrderMaterialPlans", method)
}

// List the ShopOrderMaterialPlans entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ShopOrderMaterialPlansEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ShopOrderMaterialPlans, error) {
	var entities []*ShopOrderMaterialPlans
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderMaterialPlans", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ShopOrderMaterialPlans entitiy in the provided division.
func (s *ShopOrderMaterialPlansEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ShopOrderMaterialPlans, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderMaterialPlans", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ShopOrderMaterialPlans{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty ShopOrderMaterialPlans entity
func (s *ShopOrderMaterialPlansEndpoint) New() *ShopOrderMaterialPlans {
	return &ShopOrderMaterialPlans{}
}

// Create the ShopOrderMaterialPlans entity in the provided division.
func (s *ShopOrderMaterialPlansEndpoint) Create(ctx context.Context, division int, entity *ShopOrderMaterialPlans) (*ShopOrderMaterialPlans, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderMaterialPlans", division) // #nosec
	e := &ShopOrderMaterialPlans{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the ShopOrderMaterialPlans entity in the provided division.
func (s *ShopOrderMaterialPlansEndpoint) Update(ctx context.Context, division int, entity *ShopOrderMaterialPlans) (*ShopOrderMaterialPlans, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderMaterialPlans", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &ShopOrderMaterialPlans{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the ShopOrderMaterialPlans entity in the provided division.
func (s *ShopOrderMaterialPlansEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderMaterialPlans", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
