// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"
	"encoding/json"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ShopOrderMaterialPlanDetailsEndpoint is responsible for communicating with
// the ShopOrderMaterialPlanDetails endpoint of the Manufacturing service.
type ShopOrderMaterialPlanDetailsEndpoint service

// ShopOrderMaterialPlanDetails:
// Service: Manufacturing
// Entity: ShopOrderMaterialPlanDetails
// URL: /api/v1/{division}/manufacturing/ShopOrderMaterialPlanDetails
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingShopOrderMaterialPlanDetails
type ShopOrderMaterialPlanDetails struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Backflush: Edm.Byte
	Backflush *byte `json:"Backflush,omitempty"`

	// Calculator: Exact.Web.Api.Models.Manufacturing.MaterialPlanCalculator
	Calculator *json.RawMessage `json:"Calculator,omitempty"`

	// CalculatorType: Edm.Int32
	CalculatorType *int `json:"CalculatorType,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// DetailDrawing: Edm.String
	DetailDrawing *string `json:"DetailDrawing,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// IsBatch: Edm.Byte
	IsBatch *byte `json:"IsBatch,omitempty"`

	// IsFractionAllowedItem: Edm.Byte
	IsFractionAllowedItem *byte `json:"IsFractionAllowedItem,omitempty"`

	// IsSerial: Edm.Byte
	IsSerial *byte `json:"IsSerial,omitempty"`

	// IssuedQuantity: Edm.Double
	IssuedQuantity *float64 `json:"IssuedQuantity,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemPictureUrl: Edm.String
	ItemPictureUrl *string `json:"ItemPictureUrl,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// PlannedAmountFC: Edm.Double
	PlannedAmountFC *float64 `json:"PlannedAmountFC,omitempty"`

	// PlannedDate: Edm.DateTime
	PlannedDate *types.Date `json:"PlannedDate,omitempty"`

	// PlannedIn: Edm.Double
	PlannedIn *float64 `json:"PlannedIn,omitempty"`

	// PlannedOut: Edm.Double
	PlannedOut *float64 `json:"PlannedOut,omitempty"`

	// PlannedPriceFC: Edm.Double
	PlannedPriceFC *float64 `json:"PlannedPriceFC,omitempty"`

	// PlannedQuantity: Edm.Double
	PlannedQuantity *float64 `json:"PlannedQuantity,omitempty"`

	// PlannedQuantityFactor: Edm.Double
	PlannedQuantityFactor *float64 `json:"PlannedQuantityFactor,omitempty"`

	// RemainingQuantity: Edm.Double
	RemainingQuantity *float64 `json:"RemainingQuantity,omitempty"`

	// RoutingStepID: Edm.Guid
	RoutingStepID *types.GUID `json:"RoutingStepID,omitempty"`

	// ShopOrder: Edm.Guid
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// ShopOrderNumber: Edm.Int32
	ShopOrderNumber *int `json:"ShopOrderNumber,omitempty"`

	// Status: Edm.Int32
	Status *int `json:"Status,omitempty"`

	// StatusDescription: Edm.String
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// Stock: Edm.Double
	Stock *float64 `json:"Stock,omitempty"`

	// StockLocations: ItemWarehouseStorageLocations
	StockLocations *json.RawMessage `json:"StockLocations,omitempty"`

	// SubShopOrder: Edm.Guid
	SubShopOrder *types.GUID `json:"SubShopOrder,omitempty"`

	// SubShopOrderNumber: Edm.Int32
	SubShopOrderNumber *int `json:"SubShopOrderNumber,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// Unit: Edm.String
	Unit *string `json:"Unit,omitempty"`

	// UnitDescription: Edm.String
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WastePercentage: Edm.Double
	WastePercentage *float64 `json:"WastePercentage,omitempty"`
}

func (e *ShopOrderMaterialPlanDetails) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ShopOrderMaterialPlanDetailsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/ShopOrderMaterialPlanDetails", method)
}

// List the ShopOrderMaterialPlanDetails entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ShopOrderMaterialPlanDetailsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ShopOrderMaterialPlanDetails, error) {
	var entities []*ShopOrderMaterialPlanDetails
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderMaterialPlanDetails", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ShopOrderMaterialPlanDetails entitiy in the provided division.
func (s *ShopOrderMaterialPlanDetailsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ShopOrderMaterialPlanDetails, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderMaterialPlanDetails", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ShopOrderMaterialPlanDetails{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
