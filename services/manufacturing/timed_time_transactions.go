// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// TimedTimeTransactionsEndpoint is responsible for communicating with
// the TimedTimeTransactions endpoint of the Manufacturing service.
type TimedTimeTransactionsEndpoint service

// TimedTimeTransactions:
// Service: Manufacturing
// Entity: TimedTimeTransactions
// URL: /api/v1/{division}/manufacturing/TimedTimeTransactions
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingTimedTimeTransactions
type TimedTimeTransactions struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Employee: Edm.Guid
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Edm.String
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EndTime: Edm.DateTime
	EndTime *types.Date `json:"EndTime,omitempty"`

	// IsOperationFinished: Edm.Byte
	IsOperationFinished *byte `json:"IsOperationFinished,omitempty"`

	// LaborHours: Edm.Double
	LaborHours *float64 `json:"LaborHours,omitempty"`

	// MachineHours: Edm.Double
	MachineHours *float64 `json:"MachineHours,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Operation: Edm.Guid
	Operation *types.GUID `json:"Operation,omitempty"`

	// OperationCode: Edm.String
	OperationCode *string `json:"OperationCode,omitempty"`

	// OperationDescription: Edm.String
	OperationDescription *string `json:"OperationDescription,omitempty"`

	// PercentComplete: Edm.Double
	PercentComplete *float64 `json:"PercentComplete,omitempty"`

	// ProducedQuantity: Edm.Double
	ProducedQuantity *float64 `json:"ProducedQuantity,omitempty"`

	// ProductionArea: Edm.Guid
	ProductionArea *types.GUID `json:"ProductionArea,omitempty"`

	// ProductionAreaCode: Edm.String
	ProductionAreaCode *string `json:"ProductionAreaCode,omitempty"`

	// ProductionAreaDescription: Edm.String
	ProductionAreaDescription *string `json:"ProductionAreaDescription,omitempty"`

	// ShopOrder: Edm.Guid
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// ShopOrderDescription: Edm.String
	ShopOrderDescription *string `json:"ShopOrderDescription,omitempty"`

	// ShopOrderNumber: Edm.Int32
	ShopOrderNumber *int `json:"ShopOrderNumber,omitempty"`

	// ShopOrderRoutingStepPlan: Edm.Guid
	ShopOrderRoutingStepPlan *types.GUID `json:"ShopOrderRoutingStepPlan,omitempty"`

	// ShopOrderRoutingStepPlanDescription: Edm.String
	ShopOrderRoutingStepPlanDescription *string `json:"ShopOrderRoutingStepPlanDescription,omitempty"`

	// ShopOrderRoutingStepPlanRemainingRunHours: Edm.Double
	ShopOrderRoutingStepPlanRemainingRunHours *float64 `json:"ShopOrderRoutingStepPlanRemainingRunHours,omitempty"`

	// ShopOrderRoutingStepPlanRemainingSetupHours: Edm.Double
	ShopOrderRoutingStepPlanRemainingSetupHours *float64 `json:"ShopOrderRoutingStepPlanRemainingSetupHours,omitempty"`

	// Source: Edm.Int32
	Source *int `json:"Source,omitempty"`

	// StartTime: Edm.DateTime
	StartTime *types.Date `json:"StartTime,omitempty"`

	// Status: Edm.Int32
	Status *int `json:"Status,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// Workcenter: Edm.Guid
	Workcenter *types.GUID `json:"Workcenter,omitempty"`

	// WorkcenterCode: Edm.String
	WorkcenterCode *string `json:"WorkcenterCode,omitempty"`

	// WorkcenterDescription: Edm.String
	WorkcenterDescription *string `json:"WorkcenterDescription,omitempty"`
}

func (e *TimedTimeTransactions) GetPrimary() *types.GUID {
	return e.ID
}

func (s *TimedTimeTransactionsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/TimedTimeTransactions", method)
}

// List the TimedTimeTransactions entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *TimedTimeTransactionsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*TimedTimeTransactions, error) {
	var entities []*TimedTimeTransactions
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/TimedTimeTransactions", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the TimedTimeTransactions entitiy in the provided division.
func (s *TimedTimeTransactionsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*TimedTimeTransactions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/TimedTimeTransactions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &TimedTimeTransactions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty TimedTimeTransactions entity
func (s *TimedTimeTransactionsEndpoint) New() *TimedTimeTransactions {
	return &TimedTimeTransactions{}
}

// Create the TimedTimeTransactions entity in the provided division.
func (s *TimedTimeTransactionsEndpoint) Create(ctx context.Context, division int, entity *TimedTimeTransactions) (*TimedTimeTransactions, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/TimedTimeTransactions", division) // #nosec
	e := &TimedTimeTransactions{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the TimedTimeTransactions entity in the provided division.
func (s *TimedTimeTransactionsEndpoint) Update(ctx context.Context, division int, entity *TimedTimeTransactions) (*TimedTimeTransactions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/TimedTimeTransactions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &TimedTimeTransactions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the TimedTimeTransactions entity in the provided division.
func (s *TimedTimeTransactionsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/TimedTimeTransactions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
