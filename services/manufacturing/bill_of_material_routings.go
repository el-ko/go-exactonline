// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// BillOfMaterialRoutingsEndpoint is responsible for communicating with
// the BillOfMaterialRoutings endpoint of the Manufacturing service.
type BillOfMaterialRoutingsEndpoint service

// BillOfMaterialRoutings:
// Service: Manufacturing
// Entity: BillOfMaterialRoutings
// URL: /api/v1/{division}/manufacturing/BillOfMaterialRoutings
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingBillOfMaterialRoutings
type BillOfMaterialRoutings struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AttendedPercentage: Edm.Double
	AttendedPercentage *float64 `json:"AttendedPercentage,omitempty"`

	// Backflush: Edm.Byte
	Backflush *byte `json:"Backflush,omitempty"`

	// CostPerItem: Edm.Double
	CostPerItem *float64 `json:"CostPerItem,omitempty"`

	// CreatedBy: Edm.Guid
	CreatedBy *types.GUID `json:"CreatedBy,omitempty"`

	// CreatedDate: Edm.DateTime
	CreatedDate *types.Date `json:"CreatedDate,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EfficiencyPercentage: Edm.Double
	EfficiencyPercentage *float64 `json:"EfficiencyPercentage,omitempty"`

	// FactorType: Edm.Int16
	FactorType *int `json:"FactorType,omitempty"`

	// GeneralBurden: Edm.Double
	GeneralBurden *float64 `json:"GeneralBurden,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemVersion: Edm.Guid
	ItemVersion *types.GUID `json:"ItemVersion,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// MachineBurden: Edm.Double
	MachineBurden *float64 `json:"MachineBurden,omitempty"`

	// ModifiedBy: Edm.Guid
	ModifiedBy *types.GUID `json:"ModifiedBy,omitempty"`

	// ModifiedDate: Edm.DateTime
	ModifiedDate *types.Date `json:"ModifiedDate,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Operation: Edm.Guid
	Operation *types.GUID `json:"Operation,omitempty"`

	// OperationDescription: Edm.String
	OperationDescription *string `json:"OperationDescription,omitempty"`

	// OperationResource: Edm.Guid
	OperationResource *types.GUID `json:"OperationResource,omitempty"`

	// PurchaseUnit: Edm.String
	PurchaseUnit *string `json:"PurchaseUnit,omitempty"`

	// PurchaseUnitFactor: Edm.Double
	PurchaseUnitFactor *float64 `json:"PurchaseUnitFactor,omitempty"`

	// PurchaseUnitPriceFC: Edm.Double
	PurchaseUnitPriceFC *float64 `json:"PurchaseUnitPriceFC,omitempty"`

	// PurchaseUnitQuantity: Edm.Double
	PurchaseUnitQuantity *float64 `json:"PurchaseUnitQuantity,omitempty"`

	// RateFC: Edm.Double
	RateFC *float64 `json:"RateFC,omitempty"`

	// ResourceDescription: Edm.String
	ResourceDescription *string `json:"ResourceDescription,omitempty"`

	// RoutingStepType: Edm.Int16
	RoutingStepType *int `json:"RoutingStepType,omitempty"`

	// Run: Edm.Double
	Run *float64 `json:"Run,omitempty"`

	// RunLabor: Edm.Double
	RunLabor *float64 `json:"RunLabor,omitempty"`

	// RunLaborBurden: Edm.Double
	RunLaborBurden *float64 `json:"RunLaborBurden,omitempty"`

	// RunMethod: Edm.Int16
	RunMethod *int `json:"RunMethod,omitempty"`

	// Setup: Edm.Double
	Setup *float64 `json:"Setup,omitempty"`

	// SetupLabor: Edm.Double
	SetupLabor *float64 `json:"SetupLabor,omitempty"`

	// SetupLaborBurden: Edm.Double
	SetupLaborBurden *float64 `json:"SetupLaborBurden,omitempty"`

	// SetupUnit: Edm.String
	SetupUnit *string `json:"SetupUnit,omitempty"`

	// SubcontractedLeadDays: Edm.Int32
	SubcontractedLeadDays *int `json:"SubcontractedLeadDays,omitempty"`

	// TotalCostDC: Edm.Double
	TotalCostDC *float64 `json:"TotalCostDC,omitempty"`

	// Workcenter: Edm.Guid
	Workcenter *types.GUID `json:"Workcenter,omitempty"`
}

func (e *BillOfMaterialRoutings) GetPrimary() *types.GUID {
	return e.ID
}

func (s *BillOfMaterialRoutingsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/BillOfMaterialRoutings", method)
}

// List the BillOfMaterialRoutings entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *BillOfMaterialRoutingsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*BillOfMaterialRoutings, error) {
	var entities []*BillOfMaterialRoutings
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialRoutings", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the BillOfMaterialRoutings entitiy in the provided division.
func (s *BillOfMaterialRoutingsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*BillOfMaterialRoutings, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialRoutings", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &BillOfMaterialRoutings{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty BillOfMaterialRoutings entity
func (s *BillOfMaterialRoutingsEndpoint) New() *BillOfMaterialRoutings {
	return &BillOfMaterialRoutings{}
}

// Create the BillOfMaterialRoutings entity in the provided division.
func (s *BillOfMaterialRoutingsEndpoint) Create(ctx context.Context, division int, entity *BillOfMaterialRoutings) (*BillOfMaterialRoutings, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialRoutings", division) // #nosec
	e := &BillOfMaterialRoutings{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the BillOfMaterialRoutings entity in the provided division.
func (s *BillOfMaterialRoutingsEndpoint) Update(ctx context.Context, division int, entity *BillOfMaterialRoutings) (*BillOfMaterialRoutings, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialRoutings", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &BillOfMaterialRoutings{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the BillOfMaterialRoutings entity in the provided division.
func (s *BillOfMaterialRoutingsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialRoutings", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
