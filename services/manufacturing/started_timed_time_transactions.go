// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// StartedTimedTimeTransactionsEndpoint is responsible for communicating with
// the StartedTimedTimeTransactions endpoint of the Manufacturing service.
type StartedTimedTimeTransactionsEndpoint service

// StartedTimedTimeTransactions:
// Service: Manufacturing
// Entity: StartedTimedTimeTransactions
// URL: /api/v1/{division}/read/manufacturing/StartedTimedTimeTransactions
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadManufacturingStartedTimedTimeTransactions
type StartedTimedTimeTransactions struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomerCode: Edm.String
	CustomerCode *string `json:"CustomerCode,omitempty"`

	// CustomerCount: Edm.Int32
	CustomerCount *int `json:"CustomerCount,omitempty"`

	// CustomerName: Edm.String
	CustomerName *string `json:"CustomerName,omitempty"`

	// DataType: Edm.Int16
	DataType *int `json:"DataType,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Employee: Edm.Guid
	Employee *types.GUID `json:"Employee,omitempty"`

	// EndTime: Edm.DateTime
	EndTime *types.Date `json:"EndTime,omitempty"`

	// IsFractionAllowedItem: Edm.Boolean
	IsFractionAllowedItem *bool `json:"IsFractionAllowedItem,omitempty"`

	// IsOperationFinished: Edm.Byte
	IsOperationFinished *byte `json:"IsOperationFinished,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemPictureUrl: Edm.String
	ItemPictureUrl *string `json:"ItemPictureUrl,omitempty"`

	// ItemUnit: Edm.String
	ItemUnit *string `json:"ItemUnit,omitempty"`

	// LaborHours: Edm.Double
	LaborHours *float64 `json:"LaborHours,omitempty"`

	// MachineHours: Edm.Double
	MachineHours *float64 `json:"MachineHours,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Operation: Edm.Guid
	Operation *types.GUID `json:"Operation,omitempty"`

	// OperationCode: Edm.String
	OperationCode *string `json:"OperationCode,omitempty"`

	// PercentComplete: Edm.Double
	PercentComplete *float64 `json:"PercentComplete,omitempty"`

	// ProducedQuantity: Edm.Double
	ProducedQuantity *float64 `json:"ProducedQuantity,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Edm.String
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// SalesOrderCount: Edm.Int32
	SalesOrderCount *int `json:"SalesOrderCount,omitempty"`

	// SalesOrderLineNumber: Edm.Int32
	SalesOrderLineNumber *int `json:"SalesOrderLineNumber,omitempty"`

	// SalesOrderNumber: Edm.Int32
	SalesOrderNumber *int `json:"SalesOrderNumber,omitempty"`

	// ShopOrder: Edm.Guid
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// ShopOrderDescription: Edm.String
	ShopOrderDescription *string `json:"ShopOrderDescription,omitempty"`

	// ShopOrderNumber: Edm.Int32
	ShopOrderNumber *int `json:"ShopOrderNumber,omitempty"`

	// ShopOrderPlannedQuantity: Edm.Double
	ShopOrderPlannedQuantity *float64 `json:"ShopOrderPlannedQuantity,omitempty"`

	// ShopOrderRoutingStepPlan: Edm.Guid
	ShopOrderRoutingStepPlan *types.GUID `json:"ShopOrderRoutingStepPlan,omitempty"`

	// ShopOrderRoutingStepPlanAttendedPercentage: Edm.Double
	ShopOrderRoutingStepPlanAttendedPercentage *float64 `json:"ShopOrderRoutingStepPlanAttendedPercentage,omitempty"`

	// ShopOrderRoutingStepPlanDescription: Edm.String
	ShopOrderRoutingStepPlanDescription *string `json:"ShopOrderRoutingStepPlanDescription,omitempty"`

	// Source: Edm.Int16
	Source *int `json:"Source,omitempty"`

	// StartTime: Edm.DateTime
	StartTime *types.Date `json:"StartTime,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// Type: Edm.Int16
	Type *int `json:"Type,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// Workcenter: Edm.Guid
	Workcenter *types.GUID `json:"Workcenter,omitempty"`

	// WorkcenterCode: Edm.String
	WorkcenterCode *string `json:"WorkcenterCode,omitempty"`

	// WorkcenterDescription: Edm.String
	WorkcenterDescription *string `json:"WorkcenterDescription,omitempty"`
}

func (e *StartedTimedTimeTransactions) GetPrimary() *types.GUID {
	return e.ID
}

func (s *StartedTimedTimeTransactionsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/StartedTimedTimeTransactions", method)
}

// List the StartedTimedTimeTransactions entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *StartedTimedTimeTransactionsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*StartedTimedTimeTransactions, error) {
	var entities []*StartedTimedTimeTransactions
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/manufacturing/StartedTimedTimeTransactions", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the StartedTimedTimeTransactions entitiy in the provided division.
func (s *StartedTimedTimeTransactionsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*StartedTimedTimeTransactions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/manufacturing/StartedTimedTimeTransactions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &StartedTimedTimeTransactions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
