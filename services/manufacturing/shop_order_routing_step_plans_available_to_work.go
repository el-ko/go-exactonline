// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ShopOrderRoutingStepPlansAvailableToWorkEndpoint is responsible for communicating with
// the ShopOrderRoutingStepPlansAvailableToWork endpoint of the Manufacturing service.
type ShopOrderRoutingStepPlansAvailableToWorkEndpoint service

// ShopOrderRoutingStepPlansAvailableToWork:
// Service: Manufacturing
// Entity: ShopOrderRoutingStepPlansAvailableToWork
// URL: /api/v1/{division}/read/manufacturing/ShopOrderRoutingStepPlansAvailableToWork
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadManufacturingShopOrderRoutingStepPlansAvailableToWork
type ShopOrderRoutingStepPlansAvailableToWork struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// RoutingStep: Edm.Guid
	RoutingStep *types.GUID `json:"RoutingStep,omitempty"`

	// CustomerCode: Edm.String
	CustomerCode *string `json:"CustomerCode,omitempty"`

	// CustomerCount: Edm.Int32
	CustomerCount *int `json:"CustomerCount,omitempty"`

	// CustomerName: Edm.String
	CustomerName *string `json:"CustomerName,omitempty"`

	// DataType: Edm.Int16
	DataType *int `json:"DataType,omitempty"`

	// DateAscendingOrder: Edm.Int32
	DateAscendingOrder *int `json:"DateAscendingOrder,omitempty"`

	// DateDescendingOrder: Edm.Int32
	DateDescendingOrder *int `json:"DateDescendingOrder,omitempty"`

	// ExtraDescription: Edm.String
	ExtraDescription *string `json:"ExtraDescription,omitempty"`

	// IsFractionAllowedItem: Edm.Boolean
	IsFractionAllowedItem *bool `json:"IsFractionAllowedItem,omitempty"`

	// IsReleased: Edm.Boolean
	IsReleased *bool `json:"IsReleased,omitempty"`

	// IsRunOperationFinished: Edm.Boolean
	IsRunOperationFinished *bool `json:"IsRunOperationFinished,omitempty"`

	// IsSetupOperationFinished: Edm.Boolean
	IsSetupOperationFinished *bool `json:"IsSetupOperationFinished,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemCodeAscendingOrder: Edm.Int32
	ItemCodeAscendingOrder *int `json:"ItemCodeAscendingOrder,omitempty"`

	// ItemCodeDescendingOrder: Edm.Int32
	ItemCodeDescendingOrder *int `json:"ItemCodeDescendingOrder,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemVersion: Edm.Guid
	ItemVersion *types.GUID `json:"ItemVersion,omitempty"`

	// ItemVersionNotes: Edm.String
	ItemVersionNotes *string `json:"ItemVersionNotes,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Mode: Edm.Int32
	Mode *int `json:"Mode,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Operation: Edm.Guid
	Operation *types.GUID `json:"Operation,omitempty"`

	// OperationCode: Edm.String
	OperationCode *string `json:"OperationCode,omitempty"`

	// PictureThumbnailPath: Edm.String
	PictureThumbnailPath *string `json:"PictureThumbnailPath,omitempty"`

	// PlannedDate: Edm.DateTime
	PlannedDate *types.Date `json:"PlannedDate,omitempty"`

	// PlannedQuantity: Edm.Double
	PlannedQuantity *float64 `json:"PlannedQuantity,omitempty"`

	// PlannedSetupHours: Edm.Double
	PlannedSetupHours *float64 `json:"PlannedSetupHours,omitempty"`

	// Priority: Edm.Int32
	Priority *int `json:"Priority,omitempty"`

	// PriorityDescendingOrder: Edm.Int32
	PriorityDescendingOrder *int `json:"PriorityDescendingOrder,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Edm.String
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// QuantityCompleted: Edm.Double
	QuantityCompleted *float64 `json:"QuantityCompleted,omitempty"`

	// RoutingStepDescription: Edm.String
	RoutingStepDescription *string `json:"RoutingStepDescription,omitempty"`

	// RoutingStepRealizationNotes: Edm.String
	RoutingStepRealizationNotes *string `json:"RoutingStepRealizationNotes,omitempty"`

	// RoutingStepStatus: Edm.Int32
	RoutingStepStatus *int `json:"RoutingStepStatus,omitempty"`

	// RoutingStepStatusDescription: Edm.String
	RoutingStepStatusDescription *string `json:"RoutingStepStatusDescription,omitempty"`

	// RunStartTime: Edm.DateTime
	RunStartTime *types.Date `json:"RunStartTime,omitempty"`

	// RunStatus: Edm.Int32
	RunStatus *int `json:"RunStatus,omitempty"`

	// RunTimedTimeTransaction: Edm.Guid
	RunTimedTimeTransaction *types.GUID `json:"RunTimedTimeTransaction,omitempty"`

	// SalesOrderCount: Edm.Int32
	SalesOrderCount *int `json:"SalesOrderCount,omitempty"`

	// SalesOrderLineNumber: Edm.Int32
	SalesOrderLineNumber *int `json:"SalesOrderLineNumber,omitempty"`

	// SalesOrderNumber: Edm.Int32
	SalesOrderNumber *int `json:"SalesOrderNumber,omitempty"`

	// SetupPercentComplete: Edm.Double
	SetupPercentComplete *float64 `json:"SetupPercentComplete,omitempty"`

	// SetupStartTime: Edm.DateTime
	SetupStartTime *types.Date `json:"SetupStartTime,omitempty"`

	// SetupStatus: Edm.Int32
	SetupStatus *int `json:"SetupStatus,omitempty"`

	// SetupTimedTimeTransaction: Edm.Guid
	SetupTimedTimeTransaction *types.GUID `json:"SetupTimedTimeTransaction,omitempty"`

	// ShopOrder: Edm.Guid
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// ShopOrderDescription: Edm.String
	ShopOrderDescription *string `json:"ShopOrderDescription,omitempty"`

	// ShopOrderNumber: Edm.Int32
	ShopOrderNumber *int `json:"ShopOrderNumber,omitempty"`

	// ShopOrderNumberAscendingOrder: Edm.Int32
	ShopOrderNumberAscendingOrder *int `json:"ShopOrderNumberAscendingOrder,omitempty"`

	// ShopOrderNumberDescendingOrder: Edm.Int32
	ShopOrderNumberDescendingOrder *int `json:"ShopOrderNumberDescendingOrder,omitempty"`

	// ShopOrderStatus: Edm.Int32
	ShopOrderStatus *int `json:"ShopOrderStatus,omitempty"`

	// Unit: Edm.String
	Unit *string `json:"Unit,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// Workcenter: Edm.Guid
	Workcenter *types.GUID `json:"Workcenter,omitempty"`

	// WorkcenterCode: Edm.String
	WorkcenterCode *string `json:"WorkcenterCode,omitempty"`
}

func (e *ShopOrderRoutingStepPlansAvailableToWork) GetPrimary() *types.GUID {
	return e.RoutingStep
}

func (s *ShopOrderRoutingStepPlansAvailableToWorkEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/ShopOrderRoutingStepPlansAvailableToWork", method)
}

// List the ShopOrderRoutingStepPlansAvailableToWork entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ShopOrderRoutingStepPlansAvailableToWorkEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ShopOrderRoutingStepPlansAvailableToWork, error) {
	var entities []*ShopOrderRoutingStepPlansAvailableToWork
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/manufacturing/ShopOrderRoutingStepPlansAvailableToWork", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ShopOrderRoutingStepPlansAvailableToWork entitiy in the provided division.
func (s *ShopOrderRoutingStepPlansAvailableToWorkEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ShopOrderRoutingStepPlansAvailableToWork, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/manufacturing/ShopOrderRoutingStepPlansAvailableToWork", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ShopOrderRoutingStepPlansAvailableToWork{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
