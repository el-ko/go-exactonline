// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ShopOrderReceiptsEndpoint is responsible for communicating with
// the ShopOrderReceipts endpoint of the Manufacturing service.
type ShopOrderReceiptsEndpoint service

// ShopOrderReceipts:
// Service: Manufacturing
// Entity: ShopOrderReceipts
// URL: /api/v1/{division}/manufacturing/ShopOrderReceipts
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingShopOrderReceipts
type ShopOrderReceipts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// StockTransactionId: Edm.Guid
	StockTransactionId *types.GUID `json:"StockTransactionId,omitempty"`

	// CreatedBy: Edm.Guid
	CreatedBy *types.GUID `json:"CreatedBy,omitempty"`

	// CreatedByFullName: Edm.String
	CreatedByFullName *string `json:"CreatedByFullName,omitempty"`

	// CreatedDate: Edm.DateTime
	CreatedDate *types.Date `json:"CreatedDate,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// DraftStockTransactionID: Edm.Guid
	DraftStockTransactionID *types.GUID `json:"DraftStockTransactionID,omitempty"`

	// HasReversibleQuantity: Edm.Boolean
	HasReversibleQuantity *bool `json:"HasReversibleQuantity,omitempty"`

	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// IsBatch: Edm.Byte
	IsBatch *byte `json:"IsBatch,omitempty"`

	// IsFractionAllowedItem: Edm.Byte
	IsFractionAllowedItem *byte `json:"IsFractionAllowedItem,omitempty"`

	// IsIssueToParent: Edm.Boolean
	IsIssueToParent *bool `json:"IsIssueToParent,omitempty"`

	// IsSerial: Edm.Byte
	IsSerial *byte `json:"IsSerial,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemPictureUrl: Edm.String
	ItemPictureUrl *string `json:"ItemPictureUrl,omitempty"`

	// ParentShopOrder: Edm.Guid
	ParentShopOrder *types.GUID `json:"ParentShopOrder,omitempty"`

	// ParentShopOrderNumber: Edm.Int32
	ParentShopOrderNumber *int `json:"ParentShopOrderNumber,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// ReceiptNumber: Edm.Int32
	ReceiptNumber *int `json:"ReceiptNumber,omitempty"`

	// RelatedStockTransaction: Edm.Guid
	RelatedStockTransaction *types.GUID `json:"RelatedStockTransaction,omitempty"`

	// ShopOrder: Edm.Guid
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// ShopOrderNumber: Edm.Int32
	ShopOrderNumber *int `json:"ShopOrderNumber,omitempty"`

	// StorageLocation: Edm.Guid
	StorageLocation *types.GUID `json:"StorageLocation,omitempty"`

	// StorageLocationCode: Edm.String
	StorageLocationCode *string `json:"StorageLocationCode,omitempty"`

	// StorageLocationDescription: Edm.String
	StorageLocationDescription *string `json:"StorageLocationDescription,omitempty"`

	// TransactionDate: Edm.DateTime
	TransactionDate *types.Date `json:"TransactionDate,omitempty"`

	// Unit: Edm.String
	Unit *string `json:"Unit,omitempty"`

	// UnitDescription: Edm.String
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Edm.String
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Edm.String
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *ShopOrderReceipts) GetPrimary() *types.GUID {
	return e.StockTransactionId
}

func (s *ShopOrderReceiptsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/ShopOrderReceipts", method)
}

// List the ShopOrderReceipts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ShopOrderReceiptsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ShopOrderReceipts, error) {
	var entities []*ShopOrderReceipts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderReceipts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ShopOrderReceipts entitiy in the provided division.
func (s *ShopOrderReceiptsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ShopOrderReceipts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderReceipts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ShopOrderReceipts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty ShopOrderReceipts entity
func (s *ShopOrderReceiptsEndpoint) New() *ShopOrderReceipts {
	return &ShopOrderReceipts{}
}

// Create the ShopOrderReceipts entity in the provided division.
func (s *ShopOrderReceiptsEndpoint) Create(ctx context.Context, division int, entity *ShopOrderReceipts) (*ShopOrderReceipts, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderReceipts", division) // #nosec
	e := &ShopOrderReceipts{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}
