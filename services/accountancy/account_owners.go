// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package accountancy

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// AccountOwnersEndpoint is responsible for communicating with
// the AccountOwners endpoint of the Accountancy service.
type AccountOwnersEndpoint service

// AccountOwners:
// Service: Accountancy
// Entity: AccountOwners
// URL: /api/v1/{division}/accountancy/AccountOwners
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=AccountancyAccountOwners
type AccountOwners struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode: Edm.String
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OwnerAccount: Edm.Guid
	OwnerAccount *types.GUID `json:"OwnerAccount,omitempty"`

	// OwnerAccountCode: Edm.String
	OwnerAccountCode *string `json:"OwnerAccountCode,omitempty"`

	// OwnerAccountName: Edm.String
	OwnerAccountName *string `json:"OwnerAccountName,omitempty"`

	// Shares: Edm.Double
	Shares *float64 `json:"Shares,omitempty"`
}

func (e *AccountOwners) GetPrimary() *types.GUID {
	return e.ID
}

func (s *AccountOwnersEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "accountancy/AccountOwners", method)
}

// List the AccountOwners entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *AccountOwnersEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*AccountOwners, error) {
	var entities []*AccountOwners
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/AccountOwners", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the AccountOwners entitiy in the provided division.
func (s *AccountOwnersEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*AccountOwners, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/AccountOwners", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &AccountOwners{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty AccountOwners entity
func (s *AccountOwnersEndpoint) New() *AccountOwners {
	return &AccountOwners{}
}

// Create the AccountOwners entity in the provided division.
func (s *AccountOwnersEndpoint) Create(ctx context.Context, division int, entity *AccountOwners) (*AccountOwners, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/AccountOwners", division) // #nosec
	e := &AccountOwners{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the AccountOwners entity in the provided division.
func (s *AccountOwnersEndpoint) Update(ctx context.Context, division int, entity *AccountOwners) (*AccountOwners, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/AccountOwners", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &AccountOwners{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the AccountOwners entity in the provided division.
func (s *AccountOwnersEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/AccountOwners", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
