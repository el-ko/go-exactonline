// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package accountancy

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// SolutionLinksEndpoint is responsible for communicating with
// the SolutionLinks endpoint of the Accountancy service.
type SolutionLinksEndpoint service

// SolutionLinks:
// Service: Accountancy
// Entity: SolutionLinks
// URL: /api/v1/{division}/accountancy/SolutionLinks
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=AccountancySolutionLinks
type SolutionLinks struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// ExternalSolutionCode: Edm.Int32
	ExternalSolutionCode *int `json:"ExternalSolutionCode,omitempty"`

	// ExternalSolutionName: Edm.String
	ExternalSolutionName *string `json:"ExternalSolutionName,omitempty"`

	// ExternalSolutionUrl: Edm.String
	ExternalSolutionUrl *string `json:"ExternalSolutionUrl,omitempty"`

	// InternalSolutionDivision: Edm.Int32
	InternalSolutionDivision *int `json:"InternalSolutionDivision,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// Name: Edm.String
	Name *string `json:"Name,omitempty"`

	// OtherExternalSolutionName: Edm.String
	OtherExternalSolutionName *string `json:"OtherExternalSolutionName,omitempty"`

	// SolutionType: Edm.Int32
	SolutionType *int `json:"SolutionType,omitempty"`

	// Status: Edm.Int32
	Status *int `json:"Status,omitempty"`
}

func (e *SolutionLinks) GetPrimary() *types.GUID {
	return e.ID
}

func (s *SolutionLinksEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "accountancy/SolutionLinks", method)
}

// List the SolutionLinks entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SolutionLinksEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SolutionLinks, error) {
	var entities []*SolutionLinks
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/SolutionLinks", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SolutionLinks entitiy in the provided division.
func (s *SolutionLinksEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*SolutionLinks, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/SolutionLinks", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SolutionLinks{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty SolutionLinks entity
func (s *SolutionLinksEndpoint) New() *SolutionLinks {
	return &SolutionLinks{}
}

// Create the SolutionLinks entity in the provided division.
func (s *SolutionLinksEndpoint) Create(ctx context.Context, division int, entity *SolutionLinks) (*SolutionLinks, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/SolutionLinks", division) // #nosec
	e := &SolutionLinks{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the SolutionLinks entity in the provided division.
func (s *SolutionLinksEndpoint) Update(ctx context.Context, division int, entity *SolutionLinks) (*SolutionLinks, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/SolutionLinks", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &SolutionLinks{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the SolutionLinks entity in the provided division.
func (s *SolutionLinksEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/SolutionLinks", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
