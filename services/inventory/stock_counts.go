// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// StockCountsEndpoint is responsible for communicating with
// the StockCounts endpoint of the Inventory service.
type StockCountsEndpoint service

// StockCounts:
// Service: Inventory
// Entity: StockCounts
// URL: /api/v1/{division}/inventory/StockCounts
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryStockCounts
type StockCounts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// StockCountID: Edm.Guid
	StockCountID *types.GUID `json:"StockCountID,omitempty"`

	// CountedBy: Edm.Guid
	CountedBy *types.GUID `json:"CountedBy,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EntryNumber: Edm.Int32
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OffsetGLInventory: Edm.Guid
	OffsetGLInventory *types.GUID `json:"OffsetGLInventory,omitempty"`

	// OffsetGLInventoryCode: Edm.String
	OffsetGLInventoryCode *string `json:"OffsetGLInventoryCode,omitempty"`

	// OffsetGLInventoryDescription: Edm.String
	OffsetGLInventoryDescription *string `json:"OffsetGLInventoryDescription,omitempty"`

	// Source: Edm.Int16
	Source *int `json:"Source,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// StockCountDate: Edm.DateTime
	StockCountDate *types.Date `json:"StockCountDate,omitempty"`

	// StockCountLines: StockCountLines
	StockCountLines *json.RawMessage `json:"StockCountLines,omitempty"`

	// StockCountNumber: Edm.Int32
	StockCountNumber *int `json:"StockCountNumber,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Edm.String
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Edm.String
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *StockCounts) GetPrimary() *types.GUID {
	return e.StockCountID
}

func (s *StockCountsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "inventory/StockCounts", method)
}

// List the StockCounts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *StockCountsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*StockCounts, error) {
	var entities []*StockCounts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCounts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the StockCounts entitiy in the provided division.
func (s *StockCountsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*StockCounts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &StockCounts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty StockCounts entity
func (s *StockCountsEndpoint) New() *StockCounts {
	return &StockCounts{}
}

// Create the StockCounts entity in the provided division.
func (s *StockCountsEndpoint) Create(ctx context.Context, division int, entity *StockCounts) (*StockCounts, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCounts", division) // #nosec
	e := &StockCounts{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the StockCounts entity in the provided division.
func (s *StockCountsEndpoint) Update(ctx context.Context, division int, entity *StockCounts) (*StockCounts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &StockCounts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the StockCounts entity in the provided division.
func (s *StockCountsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
