// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// AssemblyBillOfMaterialMaterialsEndpoint is responsible for communicating with
// the AssemblyBillOfMaterialMaterials endpoint of the Inventory service.
type AssemblyBillOfMaterialMaterialsEndpoint service

// AssemblyBillOfMaterialMaterials:
// Service: Inventory
// Entity: AssemblyBillOfMaterialMaterials
// URL: /api/v1/{division}/inventory/AssemblyBillOfMaterialMaterials
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryAssemblyBillOfMaterialMaterials
type AssemblyBillOfMaterialMaterials struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AssembledItem: Edm.Guid
	AssembledItem *types.GUID `json:"AssembledItem,omitempty"`

	// AssembledItemCode: Edm.String
	AssembledItemCode *string `json:"AssembledItemCode,omitempty"`

	// AssembledItemDescription: Edm.String
	AssembledItemDescription *string `json:"AssembledItemDescription,omitempty"`

	// AssembledLeadDays: Edm.Int32
	AssembledLeadDays *int `json:"AssembledLeadDays,omitempty"`

	// BatchQuantity: Edm.Double
	BatchQuantity *float64 `json:"BatchQuantity,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// PartItem: Edm.Guid
	PartItem *types.GUID `json:"PartItem,omitempty"`

	// PartItemCode: Edm.String
	PartItemCode *string `json:"PartItemCode,omitempty"`

	// PartItemDescription: Edm.String
	PartItemDescription *string `json:"PartItemDescription,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// QuantityBatch: Edm.Double
	QuantityBatch *float64 `json:"QuantityBatch,omitempty"`

	// UpdateCostPrice: Edm.Boolean
	UpdateCostPrice *bool `json:"UpdateCostPrice,omitempty"`

	// UseExplosion: Edm.Byte
	UseExplosion *byte `json:"UseExplosion,omitempty"`
}

func (e *AssemblyBillOfMaterialMaterials) GetPrimary() *types.GUID {
	return e.ID
}

func (s *AssemblyBillOfMaterialMaterialsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "inventory/AssemblyBillOfMaterialMaterials", method)
}

// List the AssemblyBillOfMaterialMaterials entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *AssemblyBillOfMaterialMaterialsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*AssemblyBillOfMaterialMaterials, error) {
	var entities []*AssemblyBillOfMaterialMaterials
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/AssemblyBillOfMaterialMaterials", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the AssemblyBillOfMaterialMaterials entitiy in the provided division.
func (s *AssemblyBillOfMaterialMaterialsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*AssemblyBillOfMaterialMaterials, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/AssemblyBillOfMaterialMaterials", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &AssemblyBillOfMaterialMaterials{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty AssemblyBillOfMaterialMaterials entity
func (s *AssemblyBillOfMaterialMaterialsEndpoint) New() *AssemblyBillOfMaterialMaterials {
	return &AssemblyBillOfMaterialMaterials{}
}

// Create the AssemblyBillOfMaterialMaterials entity in the provided division.
func (s *AssemblyBillOfMaterialMaterialsEndpoint) Create(ctx context.Context, division int, entity *AssemblyBillOfMaterialMaterials) (*AssemblyBillOfMaterialMaterials, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/AssemblyBillOfMaterialMaterials", division) // #nosec
	e := &AssemblyBillOfMaterialMaterials{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the AssemblyBillOfMaterialMaterials entity in the provided division.
func (s *AssemblyBillOfMaterialMaterialsEndpoint) Update(ctx context.Context, division int, entity *AssemblyBillOfMaterialMaterials) (*AssemblyBillOfMaterialMaterials, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/AssemblyBillOfMaterialMaterials", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &AssemblyBillOfMaterialMaterials{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the AssemblyBillOfMaterialMaterials entity in the provided division.
func (s *AssemblyBillOfMaterialMaterialsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/AssemblyBillOfMaterialMaterials", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
