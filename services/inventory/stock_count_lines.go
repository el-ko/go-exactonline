// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// StockCountLinesEndpoint is responsible for communicating with
// the StockCountLines endpoint of the Inventory service.
type StockCountLinesEndpoint service

// StockCountLines:
// Service: Inventory
// Entity: StockCountLines
// URL: /api/v1/{division}/inventory/StockCountLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryStockCountLines
type StockCountLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// BatchNumbers: BatchNumbers
	BatchNumbers *json.RawMessage `json:"BatchNumbers,omitempty"`

	// CostPrice: Edm.Double
	CostPrice *float64 `json:"CostPrice,omitempty"`

	// CountedBy: Edm.Guid
	CountedBy *types.GUID `json:"CountedBy,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemBarcode: Edm.String
	ItemBarcode *string `json:"ItemBarcode,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemCostPrice: Edm.Double
	ItemCostPrice *float64 `json:"ItemCostPrice,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemDivisable: Edm.Boolean
	ItemDivisable *bool `json:"ItemDivisable,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// QuantityDifference: Edm.Double
	QuantityDifference *float64 `json:"QuantityDifference,omitempty"`

	// QuantityInStock: Edm.Double
	QuantityInStock *float64 `json:"QuantityInStock,omitempty"`

	// QuantityNew: Edm.Double
	QuantityNew *float64 `json:"QuantityNew,omitempty"`

	// ReasonCode: Edm.String
	ReasonCode *string `json:"ReasonCode,omitempty"`

	// ReasonCodeDescription: Edm.String
	ReasonCodeDescription *string `json:"ReasonCodeDescription,omitempty"`

	// ReasonCodeID: Edm.Guid
	ReasonCodeID *types.GUID `json:"ReasonCodeID,omitempty"`

	// SerialNumbers: SerialNumbers
	SerialNumbers *json.RawMessage `json:"SerialNumbers,omitempty"`

	// Source: Edm.Int16
	Source *int `json:"Source,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// StockCountID: Edm.Guid
	StockCountID *types.GUID `json:"StockCountID,omitempty"`

	// StockKeepingUnit: Edm.String
	StockKeepingUnit *string `json:"StockKeepingUnit,omitempty"`

	// StorageLocation: Edm.Guid
	StorageLocation *types.GUID `json:"StorageLocation,omitempty"`

	// StorageLocationCode: Edm.String
	StorageLocationCode *string `json:"StorageLocationCode,omitempty"`

	// StorageLocationDescription: Edm.String
	StorageLocationDescription *string `json:"StorageLocationDescription,omitempty"`

	// StorageLocationSequenceNumber: Edm.Int32
	StorageLocationSequenceNumber *int `json:"StorageLocationSequenceNumber,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`
}

func (e *StockCountLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *StockCountLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "inventory/StockCountLines", method)
}

// List the StockCountLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *StockCountLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*StockCountLines, error) {
	var entities []*StockCountLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCountLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the StockCountLines entitiy in the provided division.
func (s *StockCountLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*StockCountLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCountLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &StockCountLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty StockCountLines entity
func (s *StockCountLinesEndpoint) New() *StockCountLines {
	return &StockCountLines{}
}

// Create the StockCountLines entity in the provided division.
func (s *StockCountLinesEndpoint) Create(ctx context.Context, division int, entity *StockCountLines) (*StockCountLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCountLines", division) // #nosec
	e := &StockCountLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the StockCountLines entity in the provided division.
func (s *StockCountLinesEndpoint) Update(ctx context.Context, division int, entity *StockCountLines) (*StockCountLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCountLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &StockCountLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the StockCountLines entity in the provided division.
func (s *StockCountLinesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCountLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
