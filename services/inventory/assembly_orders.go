// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"
	"encoding/json"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// AssemblyOrdersEndpoint is responsible for communicating with
// the AssemblyOrders endpoint of the Inventory service.
type AssemblyOrdersEndpoint service

// AssemblyOrders:
// Service: Inventory
// Entity: AssemblyOrders
// URL: /api/v1/{division}/inventory/AssemblyOrders
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryAssemblyOrders
type AssemblyOrders struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AssemblyDate: Edm.DateTime
	AssemblyDate *types.Date `json:"AssemblyDate,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// FinishedAssemblyDate: Edm.DateTime
	FinishedAssemblyDate *types.Date `json:"FinishedAssemblyDate,omitempty"`

	// FinishedQuantity: Edm.Double
	FinishedQuantity *float64 `json:"FinishedQuantity,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// OrderDate: Edm.DateTime
	OrderDate *types.Date `json:"OrderDate,omitempty"`

	// OrderNumber: Edm.Int32
	OrderNumber *int `json:"OrderNumber,omitempty"`

	// OrderStatus: Edm.Int16
	OrderStatus *int `json:"OrderStatus,omitempty"`

	// PartItems: PartItems
	PartItems *json.RawMessage `json:"PartItems,omitempty"`

	// PlannedQuantity: Edm.Double
	PlannedQuantity *float64 `json:"PlannedQuantity,omitempty"`

	// StorageLocation: Edm.Guid
	StorageLocation *types.GUID `json:"StorageLocation,omitempty"`

	// StorageLocationCode: Edm.String
	StorageLocationCode *string `json:"StorageLocationCode,omitempty"`

	// StorageLocationDescription: Edm.String
	StorageLocationDescription *string `json:"StorageLocationDescription,omitempty"`

	// StorageLocationSequenceNumber: Edm.Int32
	StorageLocationSequenceNumber *int `json:"StorageLocationSequenceNumber,omitempty"`

	// Type: Edm.Int16
	Type *int `json:"Type,omitempty"`

	// Unit: Edm.Guid
	Unit *types.GUID `json:"Unit,omitempty"`

	// UnitCode: Edm.String
	UnitCode *string `json:"UnitCode,omitempty"`

	// UnitDescription: Edm.String
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Edm.String
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Edm.String
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *AssemblyOrders) GetPrimary() *types.GUID {
	return e.ID
}

func (s *AssemblyOrdersEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "inventory/AssemblyOrders", method)
}

// List the AssemblyOrders entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *AssemblyOrdersEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*AssemblyOrders, error) {
	var entities []*AssemblyOrders
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/AssemblyOrders", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the AssemblyOrders entitiy in the provided division.
func (s *AssemblyOrdersEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*AssemblyOrders, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/AssemblyOrders", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &AssemblyOrders{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
