// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"

	"github.com/mcnijman/go-exactonline/types"
)

// ItemWarehouseStorageLocationsEndpoint is responsible for communicating with
// the ItemWarehouseStorageLocations endpoint of the Inventory service.
type ItemWarehouseStorageLocationsEndpoint service

// ItemWarehouseStorageLocations:
// Service: Inventory
// Entity: ItemWarehouseStorageLocations
// URL: /api/v1/{division}/inventory/ItemWarehouseStorageLocations
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryItemWarehouseStorageLocations
type ItemWarehouseStorageLocations struct {
	// ID: Uniquely identifies the item, warehouse, storage location combination
	ID *types.GUID `json:"ID,omitempty"`

	// IsFractionAllowedItem: Does the item allow partial quantities (1.75 meters)
	IsFractionAllowedItem *byte `json:"IsFractionAllowedItem,omitempty"`

	// Item: Item
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Code of the item of this stock quantity
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of the item of this stock quantity
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemUnit: Unit of the item
	ItemUnit *string `json:"ItemUnit,omitempty"`

	// ItemUnitDescription: Unit description of the item
	ItemUnitDescription *string `json:"ItemUnitDescription,omitempty"`

	// Stock: Number of items in stock
	Stock *float64 `json:"Stock,omitempty"`

	// StorageLocation: Storage location of this stock
	StorageLocation *types.GUID `json:"StorageLocation,omitempty"`

	// StorageLocationCode: Code of the storage location of this stock quantity
	StorageLocationCode *string `json:"StorageLocationCode,omitempty"`

	// StorageLocationDescription: Description of the storage location of this stock quantity
	StorageLocationDescription *string `json:"StorageLocationDescription,omitempty"`

	// Warehouse: ID of Warehouse
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Code of the warehouse of this stock quantity
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Description of the warehouse of this stock quantity
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (s *ItemWarehouseStorageLocations) GetIdentifier() types.GUID {
	return *s.ID
}

// List the ItemWarehouseStorageLocations entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ItemWarehouseStorageLocationsEndpoint) List(ctx context.Context, division int, all bool) ([]*ItemWarehouseStorageLocations, error) {
	var entities []*ItemWarehouseStorageLocations
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/ItemWarehouseStorageLocations?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
