// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"

	"github.com/mcnijman/go-exactonline/types"
)

// WarehousesEndpoint is responsible for communicating with
// the Warehouses endpoint of the Inventory service.
type WarehousesEndpoint service

// Warehouses:
// Service: Inventory
// Entity: Warehouses
// URL: /api/v1/{division}/inventory/Warehouses
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryWarehouses
type Warehouses struct {
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Code: Code of the warehouse
	Code *string `json:"Code,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// DefaultStorageLocation: The default storage location of this warehouse. Warehouses can have a default storage location in packages Manufacturing Premium or Wholesale Premium
	DefaultStorageLocation *types.GUID `json:"DefaultStorageLocation,omitempty"`

	// DefaultStorageLocationCode: Default storage location&#39;s code
	DefaultStorageLocationCode *string `json:"DefaultStorageLocationCode,omitempty"`

	// DefaultStorageLocationDescription: Default storage location&#39;s description
	DefaultStorageLocationDescription *string `json:"DefaultStorageLocationDescription,omitempty"`

	// Description: The description of the warehouse
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// EMail: Email address
	EMail *string `json:"EMail,omitempty"`

	// Main: Indicates if this is the main warehouse. There&#39;s always exactly one main warehouse per administration
	Main *byte `json:"Main,omitempty"`

	// ManagerUser: User reponsible for the warehouse
	ManagerUser *types.GUID `json:"ManagerUser,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// UseStorageLocations: Indicates if this warehouse is using storage locations. The storage locations will not be removed when when this is deactivated
	UseStorageLocations *byte `json:"UseStorageLocations,omitempty"`
}

// List the Warehouses entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *WarehousesEndpoint) List(ctx context.Context, division int, all bool) ([]*Warehouses, error) {
	var entities []*Warehouses
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/Warehouses?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
