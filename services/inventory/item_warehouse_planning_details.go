// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"

	"github.com/mcnijman/go-exactonline/types"
)

// ItemWarehousePlanningDetailsEndpoint is responsible for communicating with
// the ItemWarehousePlanningDetails endpoint of the Inventory service.
type ItemWarehousePlanningDetailsEndpoint service

// ItemWarehousePlanningDetails:
// Service: Inventory
// Entity: ItemWarehousePlanningDetails
// URL: /api/v1/{division}/inventory/ItemWarehousePlanningDetails
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryItemWarehousePlanningDetails
type ItemWarehousePlanningDetails struct {
	// Item: ID of item
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Code of item
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// PlannedDate: Date which quantity in stock is planned to change
	PlannedDate *types.Date `json:"PlannedDate,omitempty"`

	// PlannedQuantity: Amount by which quantity in stock is planned to change
	PlannedQuantity *float64 `json:"PlannedQuantity,omitempty"`

	// PlanningSourceDescription: Human readable description of the PlanningSource (translated to user&#39;s language) - Examples: Purchase Order, Sales Order, Shop Order, etc.
	PlanningSourceDescription *string `json:"PlanningSourceDescription,omitempty"`

	// PlanningSourceID: ID of the PlanningSource
	PlanningSourceID *types.GUID `json:"PlanningSourceID,omitempty"`

	// PlanningSourceLineNumber: Line number of the PlanningSource if the PlanningSourceType supports line numbers
	PlanningSourceLineNumber *int `json:"PlanningSourceLineNumber,omitempty"`

	// PlanningSourceNumber: Human readable number of the PlanningSource - Examples: Shop order number &#39;201600001&#39; or Sales order number &#39;2016020001&#39;
	PlanningSourceNumber *int `json:"PlanningSourceNumber,omitempty"`

	// PlanningSourceUrl: REST API URL of this specific PlanningSource and PlanningSourceID (Assembly orders and warehouse transfers not supported over REST)
	PlanningSourceUrl *string `json:"PlanningSourceUrl,omitempty"`

	// PlanningType: Type of the PlanningSource - 120=GoodsDelivery, 124=WarehouseTransferDelivery, 130=GoodsReceipt, 134=WarehouseTransferReceipt, 140=ShopOrderStockReceipt, 147=ShopOrderByProductReceipt, 150=ShopOrderRequirement, 160=AssemblyOrderReceipt, 165=AssemblyOrderIssue
	PlanningType *int `json:"PlanningType,omitempty"`

	// PlanningTypeDescription: Human readable description of the PlanningSourceType (translated to user&#39;s language) - Examples: &#39;Shop order stock receipt&#39; or &#39;Goods delivery&#39;
	PlanningTypeDescription *string `json:"PlanningTypeDescription,omitempty"`

	// Warehouse: ID of warehouse
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Code of warehouse
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Description of warehouse
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (s *ItemWarehousePlanningDetails) GetIdentifier() types.GUID {
	return *s.Item
}

// List the ItemWarehousePlanningDetails entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ItemWarehousePlanningDetailsEndpoint) List(ctx context.Context, division int, all bool) ([]*ItemWarehousePlanningDetails, error) {
	var entities []*ItemWarehousePlanningDetails
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/ItemWarehousePlanningDetails?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
