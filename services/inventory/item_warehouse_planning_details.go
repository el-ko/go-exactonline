// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ItemWarehousePlanningDetailsEndpoint is responsible for communicating with
// the ItemWarehousePlanningDetails endpoint of the Inventory service.
type ItemWarehousePlanningDetailsEndpoint service

// ItemWarehousePlanningDetails:
// Service: Inventory
// Entity: ItemWarehousePlanningDetails
// URL: /api/v1/{division}/inventory/ItemWarehousePlanningDetails
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryItemWarehousePlanningDetails
type ItemWarehousePlanningDetails struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// PlannedDate: Edm.DateTime
	PlannedDate *types.Date `json:"PlannedDate,omitempty"`

	// PlannedQuantity: Edm.Double
	PlannedQuantity *float64 `json:"PlannedQuantity,omitempty"`

	// PlanningSourceDescription: Edm.String
	PlanningSourceDescription *string `json:"PlanningSourceDescription,omitempty"`

	// PlanningSourceID: Edm.Guid
	PlanningSourceID *types.GUID `json:"PlanningSourceID,omitempty"`

	// PlanningSourceLineNumber: Edm.Int32
	PlanningSourceLineNumber *int `json:"PlanningSourceLineNumber,omitempty"`

	// PlanningSourceNumber: Edm.Int32
	PlanningSourceNumber *int `json:"PlanningSourceNumber,omitempty"`

	// PlanningSourceUrl: Edm.String
	PlanningSourceUrl *string `json:"PlanningSourceUrl,omitempty"`

	// PlanningType: Edm.Int32
	PlanningType *int `json:"PlanningType,omitempty"`

	// PlanningTypeDescription: Edm.String
	PlanningTypeDescription *string `json:"PlanningTypeDescription,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Edm.String
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Edm.String
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *ItemWarehousePlanningDetails) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ItemWarehousePlanningDetailsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "inventory/ItemWarehousePlanningDetails", method)
}

// List the ItemWarehousePlanningDetails entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ItemWarehousePlanningDetailsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ItemWarehousePlanningDetails, error) {
	var entities []*ItemWarehousePlanningDetails
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/ItemWarehousePlanningDetails", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ItemWarehousePlanningDetails entitiy in the provided division.
func (s *ItemWarehousePlanningDetailsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ItemWarehousePlanningDetails, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/ItemWarehousePlanningDetails", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ItemWarehousePlanningDetails{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
