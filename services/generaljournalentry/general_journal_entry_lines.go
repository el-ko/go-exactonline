// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package generaljournalentry

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// GeneralJournalEntryLinesEndpoint is responsible for communicating with
// the GeneralJournalEntryLines endpoint of the GeneralJournalEntry service.
type GeneralJournalEntryLinesEndpoint service

// GeneralJournalEntryLines:
// Service: GeneralJournalEntry
// Entity: GeneralJournalEntryLines
// URL: /api/v1/{division}/generaljournalentry/GeneralJournalEntryLines
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=GeneralJournalEntryGeneralJournalEntryLines
type GeneralJournalEntryLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode: Edm.String
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// AmountDC: Edm.Double
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// AmountVATDC: Edm.Double
	AmountVATDC *float64 `json:"AmountVATDC,omitempty"`

	// AmountVATFC: Edm.Double
	AmountVATFC *float64 `json:"AmountVATFC,omitempty"`

	// Asset: Edm.Guid
	Asset *types.GUID `json:"Asset,omitempty"`

	// AssetCode: Edm.String
	AssetCode *string `json:"AssetCode,omitempty"`

	// AssetDescription: Edm.String
	AssetDescription *string `json:"AssetDescription,omitempty"`

	// CostCenter: Edm.String
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostCenterDescription: Edm.String
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit: Edm.String
	CostUnit *string `json:"CostUnit,omitempty"`

	// CostUnitDescription: Edm.String
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Date: Edm.DateTime
	Date *types.Date `json:"Date,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentNumber: Edm.Int32
	DocumentNumber *int `json:"DocumentNumber,omitempty"`

	// DocumentSubject: Edm.String
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// EntryID: Edm.Guid
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// EntryNumber: Edm.Int32
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// GLAccount: Edm.Guid
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// GLAccountCode: Edm.String
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription: Edm.String
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// OffsetID: Edm.Guid
	OffsetID *types.GUID `json:"OffsetID,omitempty"`

	// OurRef: Edm.Int32
	OurRef *int `json:"OurRef,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Edm.String
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// VATBaseAmountDC: Edm.Double
	VATBaseAmountDC *float64 `json:"VATBaseAmountDC,omitempty"`

	// VATBaseAmountFC: Edm.Double
	VATBaseAmountFC *float64 `json:"VATBaseAmountFC,omitempty"`

	// VATCode: Edm.String
	VATCode *string `json:"VATCode,omitempty"`

	// VATCodeDescription: Edm.String
	VATCodeDescription *string `json:"VATCodeDescription,omitempty"`

	// VATPercentage: Edm.Double
	VATPercentage *float64 `json:"VATPercentage,omitempty"`

	// VATType: Edm.String
	VATType *string `json:"VATType,omitempty"`
}

func (e *GeneralJournalEntryLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *GeneralJournalEntryLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "generaljournalentry/GeneralJournalEntryLines", method)
}

// List the GeneralJournalEntryLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *GeneralJournalEntryLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*GeneralJournalEntryLines, error) {
	var entities []*GeneralJournalEntryLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/generaljournalentry/GeneralJournalEntryLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the GeneralJournalEntryLines entitiy in the provided division.
func (s *GeneralJournalEntryLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*GeneralJournalEntryLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/generaljournalentry/GeneralJournalEntryLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &GeneralJournalEntryLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty GeneralJournalEntryLines entity
func (s *GeneralJournalEntryLinesEndpoint) New() *GeneralJournalEntryLines {
	return &GeneralJournalEntryLines{}
}

// Create the GeneralJournalEntryLines entity in the provided division.
func (s *GeneralJournalEntryLinesEndpoint) Create(ctx context.Context, division int, entity *GeneralJournalEntryLines) (*GeneralJournalEntryLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/generaljournalentry/GeneralJournalEntryLines", division) // #nosec
	e := &GeneralJournalEntryLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}
