// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package crm

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ContactsEndpoint is responsible for communicating with
// the Contacts endpoint of the CRM service.
type ContactsEndpoint service

// Contacts:
// Service: CRM
// Entity: Contacts
// URL: /api/v1/{division}/crm/Contacts
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CRMContacts
type Contacts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountIsCustomer: Edm.Boolean
	AccountIsCustomer *bool `json:"AccountIsCustomer,omitempty"`

	// AccountIsSupplier: Edm.Boolean
	AccountIsSupplier *bool `json:"AccountIsSupplier,omitempty"`

	// AccountMainContact: Edm.Guid
	AccountMainContact *types.GUID `json:"AccountMainContact,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// AddressLine2: Edm.String
	AddressLine2 *string `json:"AddressLine2,omitempty"`

	// AddressStreet: Edm.String
	AddressStreet *string `json:"AddressStreet,omitempty"`

	// AddressStreetNumber: Edm.String
	AddressStreetNumber *string `json:"AddressStreetNumber,omitempty"`

	// AddressStreetNumberSuffix: Edm.String
	AddressStreetNumberSuffix *string `json:"AddressStreetNumberSuffix,omitempty"`

	// AllowMailing: Edm.Int32
	AllowMailing *int `json:"AllowMailing,omitempty"`

	// BirthDate: Edm.DateTime
	BirthDate *types.Date `json:"BirthDate,omitempty"`

	// BirthName: Edm.String
	BirthName *string `json:"BirthName,omitempty"`

	// BirthNamePrefix: Edm.String
	BirthNamePrefix *string `json:"BirthNamePrefix,omitempty"`

	// BirthPlace: Edm.String
	BirthPlace *string `json:"BirthPlace,omitempty"`

	// BusinessEmail: Edm.String
	BusinessEmail *string `json:"BusinessEmail,omitempty"`

	// BusinessFax: Edm.String
	BusinessFax *string `json:"BusinessFax,omitempty"`

	// BusinessMobile: Edm.String
	BusinessMobile *string `json:"BusinessMobile,omitempty"`

	// BusinessPhone: Edm.String
	BusinessPhone *string `json:"BusinessPhone,omitempty"`

	// BusinessPhoneExtension: Edm.String
	BusinessPhoneExtension *string `json:"BusinessPhoneExtension,omitempty"`

	// City: Edm.String
	City *string `json:"City,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// Country: Edm.String
	Country *string `json:"Country,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Email: Edm.String
	Email *string `json:"Email,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// FirstName: Edm.String
	FirstName *string `json:"FirstName,omitempty"`

	// FullName: Edm.String
	FullName *string `json:"FullName,omitempty"`

	// Gender: Edm.String
	Gender *string `json:"Gender,omitempty"`

	// HID: Edm.Int32
	HID *int `json:"HID,omitempty"`

	// IdentificationDate: Edm.DateTime
	IdentificationDate *types.Date `json:"IdentificationDate,omitempty"`

	// IdentificationDocument: Edm.Guid
	IdentificationDocument *types.GUID `json:"IdentificationDocument,omitempty"`

	// IdentificationUser: Edm.Guid
	IdentificationUser *types.GUID `json:"IdentificationUser,omitempty"`

	// Initials: Edm.String
	Initials *string `json:"Initials,omitempty"`

	// IsAnonymised: Edm.Byte
	IsAnonymised *byte `json:"IsAnonymised,omitempty"`

	// IsMailingExcluded: Edm.Boolean
	IsMailingExcluded *bool `json:"IsMailingExcluded,omitempty"`

	// IsMainContact: Edm.Boolean
	IsMainContact *bool `json:"IsMainContact,omitempty"`

	// JobTitleDescription: Edm.String
	JobTitleDescription *string `json:"JobTitleDescription,omitempty"`

	// Language: Edm.String
	Language *string `json:"Language,omitempty"`

	// LastName: Edm.String
	LastName *string `json:"LastName,omitempty"`

	// LeadPurpose: Edm.Guid
	LeadPurpose *types.GUID `json:"LeadPurpose,omitempty"`

	// LeadSource: Edm.Guid
	LeadSource *types.GUID `json:"LeadSource,omitempty"`

	// MarketingNotes: Edm.String
	MarketingNotes *string `json:"MarketingNotes,omitempty"`

	// MiddleName: Edm.String
	MiddleName *string `json:"MiddleName,omitempty"`

	// Mobile: Edm.String
	Mobile *string `json:"Mobile,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Nationality: Edm.String
	Nationality *string `json:"Nationality,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// PartnerName: Edm.String
	PartnerName *string `json:"PartnerName,omitempty"`

	// PartnerNamePrefix: Edm.String
	PartnerNamePrefix *string `json:"PartnerNamePrefix,omitempty"`

	// Person: Edm.Guid
	Person *types.GUID `json:"Person,omitempty"`

	// Phone: Edm.String
	Phone *string `json:"Phone,omitempty"`

	// PhoneExtension: Edm.String
	PhoneExtension *string `json:"PhoneExtension,omitempty"`

	// Picture: Edm.Binary
	Picture *[]byte `json:"Picture,omitempty"`

	// PictureName: Edm.String
	PictureName *string `json:"PictureName,omitempty"`

	// PictureThumbnailUrl: Edm.String
	PictureThumbnailUrl *string `json:"PictureThumbnailUrl,omitempty"`

	// PictureUrl: Edm.String
	PictureUrl *string `json:"PictureUrl,omitempty"`

	// Postcode: Edm.String
	Postcode *string `json:"Postcode,omitempty"`

	// SocialSecurityNumber: Edm.String
	SocialSecurityNumber *string `json:"SocialSecurityNumber,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// State: Edm.String
	State *string `json:"State,omitempty"`

	// Title: Edm.String
	Title *string `json:"Title,omitempty"`

	// TitleAbbreviation: Edm.String
	TitleAbbreviation *string `json:"TitleAbbreviation,omitempty"`

	// TitleDescription: Edm.String
	TitleDescription *string `json:"TitleDescription,omitempty"`
}

func (e *Contacts) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ContactsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "crm/Contacts", method)
}

// List the Contacts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ContactsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Contacts, error) {
	var entities []*Contacts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/Contacts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Contacts entitiy in the provided division.
func (s *ContactsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Contacts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/Contacts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Contacts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty Contacts entity
func (s *ContactsEndpoint) New() *Contacts {
	return &Contacts{}
}

// Create the Contacts entity in the provided division.
func (s *ContactsEndpoint) Create(ctx context.Context, division int, entity *Contacts) (*Contacts, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/Contacts", division) // #nosec
	e := &Contacts{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the Contacts entity in the provided division.
func (s *ContactsEndpoint) Update(ctx context.Context, division int, entity *Contacts) (*Contacts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/Contacts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &Contacts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the Contacts entity in the provided division.
func (s *ContactsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/Contacts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
