// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package crm

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"net/url"
	"reflect"
	"testing"

	"github.com/mcnijman/go-exactonline/api"
)

func TestNewCRMService(t *testing.T) {
	c := api.NewClient(nil)
	s := NewCRMService(c)

	if !reflect.DeepEqual(c, s.client) {
		t.Error("Clients are supposed to be the same")
	}

	if s.AccountClasses == nil {
		t.Error("Property AccountClasses should not be nil")
	}
	if s.AccountClassificationNames == nil {
		t.Error("Property AccountClassificationNames should not be nil")
	}
	if s.AccountClassifications == nil {
		t.Error("Property AccountClassifications should not be nil")
	}
	if s.Accounts == nil {
		t.Error("Property Accounts should not be nil")
	}
	if s.Addresses == nil {
		t.Error("Property Addresses should not be nil")
	}
	if s.AddressStates == nil {
		t.Error("Property AddressStates should not be nil")
	}
	if s.BankAccounts == nil {
		t.Error("Property BankAccounts should not be nil")
	}
	if s.Contacts == nil {
		t.Error("Property Contacts should not be nil")
	}
	if s.Documents == nil {
		t.Error("Property Documents should not be nil")
	}
	if s.DocumentsAttachments == nil {
		t.Error("Property DocumentsAttachments should not be nil")
	}
	if s.HostingOpportunities == nil {
		t.Error("Property HostingOpportunities should not be nil")
	}
	if s.Opportunities == nil {
		t.Error("Property Opportunities should not be nil")
	}
	if s.OpportunityContacts == nil {
		t.Error("Property OpportunityContacts should not be nil")
	}
	if s.QuotationLines == nil {
		t.Error("Property QuotationLines should not be nil")
	}
	if s.Quotations == nil {
		t.Error("Property Quotations should not be nil")
	}
	if s.ReasonCodes == nil {
		t.Error("Property ReasonCodes should not be nil")
	}
}

// setup sets up a test HTTP server along with a exactonline.Client that is
// configured to talk to that test server. Tests should register handlers on
// mux which provide mock responses for the API method being tested.
func setup() (service *CRMService, mux *http.ServeMux, serverURL string, teardown func()) {
	// mux is the HTTP request multiplexer used with the test server.
	mux = http.NewServeMux()

	// We want to ensure that tests catch mistakes where the endpoint URL is
	// specified as absolute rather than relative. It only makes a difference
	// when there's a non-empty base URL path. So, use that. See issue #752.
	apiHandler := http.NewServeMux()
	apiHandler.Handle("/", mux)

	// server is a test HTTP server used to provide mock API responses.
	server := httptest.NewServer(apiHandler)

	// client is the GitHub client being tested and is
	// configured to use test server.
	client := api.NewClient(nil)
	url, _ := url.Parse(server.URL + "/")
	client.BaseURL = url
	service = NewCRMService(client)

	return service, mux, server.URL, server.Close
}

func testMethod(t *testing.T, r *http.Request, want string) {
	if got := r.Method; got != want {
		t.Errorf("Request method: %v, want %v", got, want)
	}
}

func testHeader(t *testing.T, r *http.Request, header string, want string) {
	if got := r.Header.Get(header); got != want {
		t.Errorf("Header.Get(%q) returned %q, want %q", header, got, want)
	}
}

func testURLParseError(t *testing.T, err error) {
	if err == nil {
		t.Errorf("Expected error to be returned")
	}
	if err, ok := err.(*url.Error); !ok || err.Op != "parse" {
		t.Errorf("Expected URL parse error, got %+v", err)
	}
}

func testBody(t *testing.T, r *http.Request, want string) {
	b, err := ioutil.ReadAll(r.Body)
	if err != nil {
		t.Errorf("Error reading request body: %v", err)
	}
	if got := string(b); got != want {
		t.Errorf("request Body is %s, want %s", got, want)
	}
}

// Helper function to test that a value is marshalled to JSON as expected.
func testJSONMarshal(t *testing.T, v interface{}, want string) {
	j, err := json.Marshal(v)
	if err != nil {
		t.Errorf("Unable to marshal JSON for %v", v)
	}

	w := new(bytes.Buffer)
	err = json.Compact(w, []byte(want))
	if err != nil {
		t.Errorf("String is not valid json: %s", want)
	}

	if w.String() != string(j) {
		t.Errorf("json.Marshal(%q) returned %s, want %s", v, j, w)
	}

	// now go the other direction and make sure things unmarshal as expected
	u := reflect.ValueOf(v).Interface()
	if err := json.Unmarshal([]byte(want), u); err != nil {
		t.Errorf("Unable to unmarshal JSON for %v", want)
	}

	if !reflect.DeepEqual(v, u) {
		t.Errorf("json.Unmarshal(%q) returned %s, want %s", want, u, v)
	}
}
