// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package hrm

import (
	"context"
	"encoding/json"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// DivisionsEndpoint is responsible for communicating with
// the Divisions endpoint of the HRM service.
type DivisionsEndpoint service

// Divisions:
// Service: HRM
// Entity: Divisions
// URL: /api/v1/{division}/hrm/Divisions
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=HRMDivisions
type Divisions struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Code: Edm.Int32
	Code *int `json:"Code,omitempty"`

	// ArchiveDate: Edm.DateTime
	ArchiveDate *types.Date `json:"ArchiveDate,omitempty"`

	// BlockingStatus: Edm.Int32
	BlockingStatus *int `json:"BlockingStatus,omitempty"`

	// Class_01: DivisionClasses
	Class_01 *json.RawMessage `json:"Class_01,omitempty"`

	// Class_02: DivisionClasses
	Class_02 *json.RawMessage `json:"Class_02,omitempty"`

	// Class_03: DivisionClasses
	Class_03 *json.RawMessage `json:"Class_03,omitempty"`

	// Class_04: DivisionClasses
	Class_04 *json.RawMessage `json:"Class_04,omitempty"`

	// Class_05: DivisionClasses
	Class_05 *json.RawMessage `json:"Class_05,omitempty"`

	// Country: Edm.String
	Country *string `json:"Country,omitempty"`

	// CountryDescription: Edm.String
	CountryDescription *string `json:"CountryDescription,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// CurrencyDescription: Edm.String
	CurrencyDescription *string `json:"CurrencyDescription,omitempty"`

	// Customer: Edm.Guid
	Customer *types.GUID `json:"Customer,omitempty"`

	// CustomerCode: Edm.String
	CustomerCode *string `json:"CustomerCode,omitempty"`

	// CustomerName: Edm.String
	CustomerName *string `json:"CustomerName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// HID: Edm.Int64
	HID *int64 `json:"HID,omitempty"`

	// Main: Edm.Boolean
	Main *bool `json:"Main,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OBNumber: Edm.String
	OBNumber *string `json:"OBNumber,omitempty"`

	// SiretNumber: Edm.String
	SiretNumber *string `json:"SiretNumber,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// TaxOfficeNumber: Edm.String
	TaxOfficeNumber *string `json:"TaxOfficeNumber,omitempty"`

	// TaxReferenceNumber: Edm.String
	TaxReferenceNumber *string `json:"TaxReferenceNumber,omitempty"`

	// TemplateCode: Edm.String
	TemplateCode *string `json:"TemplateCode,omitempty"`

	// VATNumber: Edm.String
	VATNumber *string `json:"VATNumber,omitempty"`

	// Website: Edm.String
	Website *string `json:"Website,omitempty"`
}

func (e *Divisions) GetPrimary() *int {
	return e.Code
}

func (s *DivisionsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "hrm/Divisions", method)
}

// List the Divisions entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *DivisionsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Divisions, error) {
	var entities []*Divisions
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/hrm/Divisions", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Divisions entitiy in the provided division.
func (s *DivisionsEndpoint) Get(ctx context.Context, division int, id *int) (*Divisions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/hrm/Divisions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Divisions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
