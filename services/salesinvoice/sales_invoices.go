// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package salesinvoice

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// SalesInvoicesEndpoint is responsible for communicating with
// the SalesInvoices endpoint of the SalesInvoice service.
type SalesInvoicesEndpoint service

// SalesInvoices:
// Service: SalesInvoice
// Entity: SalesInvoices
// URL: /api/v1/{division}/salesinvoice/SalesInvoices
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesInvoiceSalesInvoices
type SalesInvoices struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// InvoiceID: Edm.Guid
	InvoiceID *types.GUID `json:"InvoiceID,omitempty"`

	// AmountDC: Edm.Double
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountDiscount: Edm.Double
	AmountDiscount *float64 `json:"AmountDiscount,omitempty"`

	// AmountDiscountExclVat: Edm.Double
	AmountDiscountExclVat *float64 `json:"AmountDiscountExclVat,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// AmountFCExclVat: Edm.Double
	AmountFCExclVat *float64 `json:"AmountFCExclVat,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// DeliverTo: Edm.Guid
	DeliverTo *types.GUID `json:"DeliverTo,omitempty"`

	// DeliverToAddress: Edm.Guid
	DeliverToAddress *types.GUID `json:"DeliverToAddress,omitempty"`

	// DeliverToContactPerson: Edm.Guid
	DeliverToContactPerson *types.GUID `json:"DeliverToContactPerson,omitempty"`

	// DeliverToContactPersonFullName: Edm.String
	DeliverToContactPersonFullName *string `json:"DeliverToContactPersonFullName,omitempty"`

	// DeliverToName: Edm.String
	DeliverToName *string `json:"DeliverToName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Discount: Edm.Double
	Discount *float64 `json:"Discount,omitempty"`

	// DiscountType: Edm.Int16
	DiscountType *int `json:"DiscountType,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentNumber: Edm.Int32
	DocumentNumber *int `json:"DocumentNumber,omitempty"`

	// DocumentSubject: Edm.String
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// DueDate: Edm.DateTime
	DueDate *types.Date `json:"DueDate,omitempty"`

	// ExtraDutyAmountFC: Edm.Double
	ExtraDutyAmountFC *float64 `json:"ExtraDutyAmountFC,omitempty"`

	// GAccountAmountFC: Edm.Double
	GAccountAmountFC *float64 `json:"GAccountAmountFC,omitempty"`

	// IncotermAddress: Edm.String
	IncotermAddress *string `json:"IncotermAddress,omitempty"`

	// IncotermCode: Edm.String
	IncotermCode *string `json:"IncotermCode,omitempty"`

	// IncotermVersion: Edm.Int16
	IncotermVersion *int `json:"IncotermVersion,omitempty"`

	// InvoiceDate: Edm.DateTime
	InvoiceDate *types.Date `json:"InvoiceDate,omitempty"`

	// InvoiceNumber: Edm.Int32
	InvoiceNumber *int `json:"InvoiceNumber,omitempty"`

	// InvoiceTo: Edm.Guid
	InvoiceTo *types.GUID `json:"InvoiceTo,omitempty"`

	// InvoiceToContactPerson: Edm.Guid
	InvoiceToContactPerson *types.GUID `json:"InvoiceToContactPerson,omitempty"`

	// InvoiceToContactPersonFullName: Edm.String
	InvoiceToContactPersonFullName *string `json:"InvoiceToContactPersonFullName,omitempty"`

	// InvoiceToName: Edm.String
	InvoiceToName *string `json:"InvoiceToName,omitempty"`

	// IsExtraDuty: Edm.Boolean
	IsExtraDuty *bool `json:"IsExtraDuty,omitempty"`

	// Journal: Edm.String
	Journal *string `json:"Journal,omitempty"`

	// JournalDescription: Edm.String
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OrderDate: Edm.DateTime
	OrderDate *types.Date `json:"OrderDate,omitempty"`

	// OrderedBy: Edm.Guid
	OrderedBy *types.GUID `json:"OrderedBy,omitempty"`

	// OrderedByContactPerson: Edm.Guid
	OrderedByContactPerson *types.GUID `json:"OrderedByContactPerson,omitempty"`

	// OrderedByContactPersonFullName: Edm.String
	OrderedByContactPersonFullName *string `json:"OrderedByContactPersonFullName,omitempty"`

	// OrderedByName: Edm.String
	OrderedByName *string `json:"OrderedByName,omitempty"`

	// OrderNumber: Edm.Int32
	OrderNumber *int `json:"OrderNumber,omitempty"`

	// PaymentCondition: Edm.String
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentConditionDescription: Edm.String
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// PaymentReference: Edm.String
	PaymentReference *string `json:"PaymentReference,omitempty"`

	// Remarks: Edm.String
	Remarks *string `json:"Remarks,omitempty"`

	// SalesChannel: Edm.Guid
	SalesChannel *types.GUID `json:"SalesChannel,omitempty"`

	// SalesChannelCode: Edm.String
	SalesChannelCode *string `json:"SalesChannelCode,omitempty"`

	// SalesChannelDescription: Edm.String
	SalesChannelDescription *string `json:"SalesChannelDescription,omitempty"`

	// SalesInvoiceLines: SalesInvoiceLines
	SalesInvoiceLines *json.RawMessage `json:"SalesInvoiceLines,omitempty"`

	// SalesInvoiceOrderChargeLines: SalesInvoiceOrderChargeLines
	SalesInvoiceOrderChargeLines *json.RawMessage `json:"SalesInvoiceOrderChargeLines,omitempty"`

	// Salesperson: Edm.Guid
	Salesperson *types.GUID `json:"Salesperson,omitempty"`

	// SalespersonFullName: Edm.String
	SalespersonFullName *string `json:"SalespersonFullName,omitempty"`

	// SelectionCode: Edm.Guid
	SelectionCode *types.GUID `json:"SelectionCode,omitempty"`

	// SelectionCodeCode: Edm.String
	SelectionCodeCode *string `json:"SelectionCodeCode,omitempty"`

	// SelectionCodeDescription: Edm.String
	SelectionCodeDescription *string `json:"SelectionCodeDescription,omitempty"`

	// ShippingMethod: Edm.Guid
	ShippingMethod *types.GUID `json:"ShippingMethod,omitempty"`

	// ShippingMethodCode: Edm.String
	ShippingMethodCode *string `json:"ShippingMethodCode,omitempty"`

	// ShippingMethodDescription: Edm.String
	ShippingMethodDescription *string `json:"ShippingMethodDescription,omitempty"`

	// StarterSalesInvoiceStatus: Edm.Int16
	StarterSalesInvoiceStatus *int `json:"StarterSalesInvoiceStatus,omitempty"`

	// StarterSalesInvoiceStatusDescription: Edm.String
	StarterSalesInvoiceStatusDescription *string `json:"StarterSalesInvoiceStatusDescription,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// StatusDescription: Edm.String
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// TaxSchedule: Edm.Guid
	TaxSchedule *types.GUID `json:"TaxSchedule,omitempty"`

	// TaxScheduleCode: Edm.String
	TaxScheduleCode *string `json:"TaxScheduleCode,omitempty"`

	// TaxScheduleDescription: Edm.String
	TaxScheduleDescription *string `json:"TaxScheduleDescription,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// TypeDescription: Edm.String
	TypeDescription *string `json:"TypeDescription,omitempty"`

	// VATAmountDC: Edm.Double
	VATAmountDC *float64 `json:"VATAmountDC,omitempty"`

	// VATAmountFC: Edm.Double
	VATAmountFC *float64 `json:"VATAmountFC,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WithholdingTaxAmountFC: Edm.Double
	WithholdingTaxAmountFC *float64 `json:"WithholdingTaxAmountFC,omitempty"`

	// WithholdingTaxBaseAmount: Edm.Double
	WithholdingTaxBaseAmount *float64 `json:"WithholdingTaxBaseAmount,omitempty"`

	// WithholdingTaxPercentage: Edm.Double
	WithholdingTaxPercentage *float64 `json:"WithholdingTaxPercentage,omitempty"`

	// YourRef: Edm.String
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *SalesInvoices) GetPrimary() *types.GUID {
	return e.InvoiceID
}

func (s *SalesInvoicesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "salesinvoice/SalesInvoices", method)
}

// List the SalesInvoices entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SalesInvoicesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SalesInvoices, error) {
	var entities []*SalesInvoices
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoices", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SalesInvoices entitiy in the provided division.
func (s *SalesInvoicesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*SalesInvoices, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoices", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SalesInvoices{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty SalesInvoices entity
func (s *SalesInvoicesEndpoint) New() *SalesInvoices {
	return &SalesInvoices{}
}

// Create the SalesInvoices entity in the provided division.
func (s *SalesInvoicesEndpoint) Create(ctx context.Context, division int, entity *SalesInvoices) (*SalesInvoices, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoices", division) // #nosec
	e := &SalesInvoices{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the SalesInvoices entity in the provided division.
func (s *SalesInvoicesEndpoint) Update(ctx context.Context, division int, entity *SalesInvoices) (*SalesInvoices, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoices", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &SalesInvoices{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the SalesInvoices entity in the provided division.
func (s *SalesInvoicesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoices", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
