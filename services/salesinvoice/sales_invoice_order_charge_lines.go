// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package salesinvoice

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// SalesInvoiceOrderChargeLinesEndpoint is responsible for communicating with
// the SalesInvoiceOrderChargeLines endpoint of the SalesInvoice service.
type SalesInvoiceOrderChargeLinesEndpoint service

// SalesInvoiceOrderChargeLines:
// Service: SalesInvoice
// Entity: SalesInvoiceOrderChargeLines
// URL: /api/v1/{division}/salesinvoice/SalesInvoiceOrderChargeLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesInvoiceSalesInvoiceOrderChargeLines
type SalesInvoiceOrderChargeLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AmountDC: Edm.Double
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFCExclVAT: Edm.Double
	AmountFCExclVAT *float64 `json:"AmountFCExclVAT,omitempty"`

	// AmountFCInclVAT: Edm.Double
	AmountFCInclVAT *float64 `json:"AmountFCInclVAT,omitempty"`

	// AmountVATFC: Edm.Double
	AmountVATFC *float64 `json:"AmountVATFC,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// GLAccount: Edm.Guid
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// GLAccountCode: Edm.String
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription: Edm.String
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`

	// InvoiceID: Edm.Guid
	InvoiceID *types.GUID `json:"InvoiceID,omitempty"`

	// IsShippingCost: Edm.Boolean
	IsShippingCost *bool `json:"IsShippingCost,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// OrderCharge: Edm.Guid
	OrderCharge *types.GUID `json:"OrderCharge,omitempty"`

	// OrderChargeCode: Edm.String
	OrderChargeCode *string `json:"OrderChargeCode,omitempty"`

	// OrderChargeDescription: Edm.String
	OrderChargeDescription *string `json:"OrderChargeDescription,omitempty"`

	// OrderChargesLineDescription: Edm.String
	OrderChargesLineDescription *string `json:"OrderChargesLineDescription,omitempty"`

	// VATCode: Edm.String
	VATCode *string `json:"VATCode,omitempty"`

	// VATDescription: Edm.String
	VATDescription *string `json:"VATDescription,omitempty"`

	// VATPercentage: Edm.Double
	VATPercentage *float64 `json:"VATPercentage,omitempty"`
}

func (e *SalesInvoiceOrderChargeLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *SalesInvoiceOrderChargeLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "salesinvoice/SalesInvoiceOrderChargeLines", method)
}

// List the SalesInvoiceOrderChargeLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SalesInvoiceOrderChargeLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SalesInvoiceOrderChargeLines, error) {
	var entities []*SalesInvoiceOrderChargeLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceOrderChargeLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SalesInvoiceOrderChargeLines entitiy in the provided division.
func (s *SalesInvoiceOrderChargeLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*SalesInvoiceOrderChargeLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceOrderChargeLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SalesInvoiceOrderChargeLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty SalesInvoiceOrderChargeLines entity
func (s *SalesInvoiceOrderChargeLinesEndpoint) New() *SalesInvoiceOrderChargeLines {
	return &SalesInvoiceOrderChargeLines{}
}

// Create the SalesInvoiceOrderChargeLines entity in the provided division.
func (s *SalesInvoiceOrderChargeLinesEndpoint) Create(ctx context.Context, division int, entity *SalesInvoiceOrderChargeLines) (*SalesInvoiceOrderChargeLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceOrderChargeLines", division) // #nosec
	e := &SalesInvoiceOrderChargeLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the SalesInvoiceOrderChargeLines entity in the provided division.
func (s *SalesInvoiceOrderChargeLinesEndpoint) Update(ctx context.Context, division int, entity *SalesInvoiceOrderChargeLines) (*SalesInvoiceOrderChargeLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceOrderChargeLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &SalesInvoiceOrderChargeLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the SalesInvoiceOrderChargeLines entity in the provided division.
func (s *SalesInvoiceOrderChargeLinesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceOrderChargeLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
