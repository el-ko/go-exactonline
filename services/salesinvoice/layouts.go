// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package salesinvoice

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// LayoutsEndpoint is responsible for communicating with
// the Layouts endpoint of the SalesInvoice service.
type LayoutsEndpoint service

// Layouts:
// Service: SalesInvoice
// Entity: Layouts
// URL: /api/v1/{division}/salesinvoice/Layouts
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesInvoiceLayouts
type Layouts struct {
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of the creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of the last modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Subject: Layout name
	Subject *string `json:"Subject,omitempty"`

	// Type: Type: 1=Layout, 2=E-mail text layout, 3=Word template
	Type *int `json:"Type,omitempty"`
}

// List the Layouts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *LayoutsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Layouts, error) {
	var entities []*Layouts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/Layouts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
