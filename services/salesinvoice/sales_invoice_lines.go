// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package salesinvoice

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// SalesInvoiceLinesEndpoint is responsible for communicating with
// the SalesInvoiceLines endpoint of the SalesInvoice service.
type SalesInvoiceLinesEndpoint service

// SalesInvoiceLines:
// Service: SalesInvoice
// Entity: SalesInvoiceLines
// URL: /api/v1/{division}/salesinvoice/SalesInvoiceLines
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesInvoiceSalesInvoiceLines
type SalesInvoiceLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AmountDC: Edm.Double
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// CostCenter: Edm.String
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostCenterDescription: Edm.String
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit: Edm.String
	CostUnit *string `json:"CostUnit,omitempty"`

	// CostUnitDescription: Edm.String
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// CustomerItemCode: Edm.String
	CustomerItemCode *string `json:"CustomerItemCode,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// DeliveryDate: Edm.DateTime
	DeliveryDate *types.Date `json:"DeliveryDate,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Discount: Edm.Double
	Discount *float64 `json:"Discount,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Employee: Edm.Guid
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Edm.String
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EndTime: Edm.DateTime
	EndTime *types.Date `json:"EndTime,omitempty"`

	// ExtraDutyAmountFC: Edm.Double
	ExtraDutyAmountFC *float64 `json:"ExtraDutyAmountFC,omitempty"`

	// ExtraDutyPercentage: Edm.Double
	ExtraDutyPercentage *float64 `json:"ExtraDutyPercentage,omitempty"`

	// GLAccount: Edm.Guid
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// GLAccountDescription: Edm.String
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`

	// InvoiceID: Edm.Guid
	InvoiceID *types.GUID `json:"InvoiceID,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// NetPrice: Edm.Double
	NetPrice *float64 `json:"NetPrice,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Pricelist: Edm.Guid
	Pricelist *types.GUID `json:"Pricelist,omitempty"`

	// PricelistDescription: Edm.String
	PricelistDescription *string `json:"PricelistDescription,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// ProjectWBS: Edm.Guid
	ProjectWBS *types.GUID `json:"ProjectWBS,omitempty"`

	// ProjectWBSDescription: Edm.String
	ProjectWBSDescription *string `json:"ProjectWBSDescription,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// SalesOrder: Edm.Guid
	SalesOrder *types.GUID `json:"SalesOrder,omitempty"`

	// SalesOrderLine: Edm.Guid
	SalesOrderLine *types.GUID `json:"SalesOrderLine,omitempty"`

	// SalesOrderLineNumber: Edm.Int32
	SalesOrderLineNumber *int `json:"SalesOrderLineNumber,omitempty"`

	// SalesOrderNumber: Edm.Int32
	SalesOrderNumber *int `json:"SalesOrderNumber,omitempty"`

	// StartTime: Edm.DateTime
	StartTime *types.Date `json:"StartTime,omitempty"`

	// Subscription: Edm.Guid
	Subscription *types.GUID `json:"Subscription,omitempty"`

	// SubscriptionDescription: Edm.String
	SubscriptionDescription *string `json:"SubscriptionDescription,omitempty"`

	// TaxSchedule: Edm.Guid
	TaxSchedule *types.GUID `json:"TaxSchedule,omitempty"`

	// TaxScheduleCode: Edm.String
	TaxScheduleCode *string `json:"TaxScheduleCode,omitempty"`

	// TaxScheduleDescription: Edm.String
	TaxScheduleDescription *string `json:"TaxScheduleDescription,omitempty"`

	// UnitCode: Edm.String
	UnitCode *string `json:"UnitCode,omitempty"`

	// UnitDescription: Edm.String
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// UnitPrice: Edm.Double
	UnitPrice *float64 `json:"UnitPrice,omitempty"`

	// VATAmountDC: Edm.Double
	VATAmountDC *float64 `json:"VATAmountDC,omitempty"`

	// VATAmountFC: Edm.Double
	VATAmountFC *float64 `json:"VATAmountFC,omitempty"`

	// VATCode: Edm.String
	VATCode *string `json:"VATCode,omitempty"`

	// VATCodeDescription: Edm.String
	VATCodeDescription *string `json:"VATCodeDescription,omitempty"`

	// VATPercentage: Edm.Double
	VATPercentage *float64 `json:"VATPercentage,omitempty"`
}

func (e *SalesInvoiceLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *SalesInvoiceLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "salesinvoice/SalesInvoiceLines", method)
}

// List the SalesInvoiceLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SalesInvoiceLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SalesInvoiceLines, error) {
	var entities []*SalesInvoiceLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SalesInvoiceLines entitiy in the provided division.
func (s *SalesInvoiceLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*SalesInvoiceLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SalesInvoiceLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty SalesInvoiceLines entity
func (s *SalesInvoiceLinesEndpoint) New() *SalesInvoiceLines {
	return &SalesInvoiceLines{}
}

// Create the SalesInvoiceLines entity in the provided division.
func (s *SalesInvoiceLinesEndpoint) Create(ctx context.Context, division int, entity *SalesInvoiceLines) (*SalesInvoiceLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceLines", division) // #nosec
	e := &SalesInvoiceLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the SalesInvoiceLines entity in the provided division.
func (s *SalesInvoiceLinesEndpoint) Update(ctx context.Context, division int, entity *SalesInvoiceLines) (*SalesInvoiceLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &SalesInvoiceLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the SalesInvoiceLines entity in the provided division.
func (s *SalesInvoiceLinesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoiceLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
