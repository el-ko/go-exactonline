// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// CostTransactionsEndpoint is responsible for communicating with
// the CostTransactions endpoint of the Project service.
type CostTransactionsEndpoint service

// CostTransactions:
// Service: Project
// Entity: CostTransactions
// URL: /api/v1/{division}/project/CostTransactions
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectCostTransactions
type CostTransactions struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// Amount: Edm.Double
	Amount *float64 `json:"Amount,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// Attachment: Edm.Guid
	Attachment *types.GUID `json:"Attachment,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Date: Edm.DateTime
	Date *types.Date `json:"Date,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// DivisionDescription: Edm.String
	DivisionDescription *string `json:"DivisionDescription,omitempty"`

	// Employee: Edm.Guid
	Employee *types.GUID `json:"Employee,omitempty"`

	// EntryNumber: Edm.Int32
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// ErrorText: Edm.String
	ErrorText *string `json:"ErrorText,omitempty"`

	// Expense: Edm.Guid
	Expense *types.GUID `json:"Expense,omitempty"`

	// ExpenseDescription: Edm.String
	ExpenseDescription *string `json:"ExpenseDescription,omitempty"`

	// HourStatus: Edm.Int16
	HourStatus *int `json:"HourStatus,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemDivisable: Edm.Boolean
	ItemDivisable *bool `json:"ItemDivisable,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Price: Edm.Double
	Price *float64 `json:"Price,omitempty"`

	// PriceFC: Edm.Double
	PriceFC *float64 `json:"PriceFC,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectAccount: Edm.Guid
	ProjectAccount *types.GUID `json:"ProjectAccount,omitempty"`

	// ProjectAccountCode: Edm.String
	ProjectAccountCode *string `json:"ProjectAccountCode,omitempty"`

	// ProjectAccountName: Edm.String
	ProjectAccountName *string `json:"ProjectAccountName,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// SkipValidation: Edm.Boolean
	SkipValidation *bool `json:"SkipValidation,omitempty"`

	// Subscription: Edm.Guid
	Subscription *types.GUID `json:"Subscription,omitempty"`

	// SubscriptionAccount: Edm.Guid
	SubscriptionAccount *types.GUID `json:"SubscriptionAccount,omitempty"`

	// SubscriptionAccountCode: Edm.String
	SubscriptionAccountCode *string `json:"SubscriptionAccountCode,omitempty"`

	// SubscriptionAccountName: Edm.String
	SubscriptionAccountName *string `json:"SubscriptionAccountName,omitempty"`

	// SubscriptionDescription: Edm.String
	SubscriptionDescription *string `json:"SubscriptionDescription,omitempty"`

	// SubscriptionNumber: Edm.Int32
	SubscriptionNumber *int `json:"SubscriptionNumber,omitempty"`

	// Type: Edm.Int16
	Type *int `json:"Type,omitempty"`
}

func (e *CostTransactions) GetPrimary() *types.GUID {
	return e.ID
}

func (s *CostTransactionsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/CostTransactions", method)
}

// List the CostTransactions entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *CostTransactionsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*CostTransactions, error) {
	var entities []*CostTransactions
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/CostTransactions", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the CostTransactions entitiy in the provided division.
func (s *CostTransactionsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*CostTransactions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/CostTransactions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &CostTransactions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty CostTransactions entity
func (s *CostTransactionsEndpoint) New() *CostTransactions {
	return &CostTransactions{}
}

// Create the CostTransactions entity in the provided division.
func (s *CostTransactionsEndpoint) Create(ctx context.Context, division int, entity *CostTransactions) (*CostTransactions, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/CostTransactions", division) // #nosec
	e := &CostTransactions{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the CostTransactions entity in the provided division.
func (s *CostTransactionsEndpoint) Update(ctx context.Context, division int, entity *CostTransactions) (*CostTransactions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/CostTransactions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &CostTransactions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the CostTransactions entity in the provided division.
func (s *CostTransactionsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/CostTransactions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
