// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"

	"github.com/mcnijman/go-exactonline/types"
)

// CostTransactionsEndpoint is responsible for communicating with
// the CostTransactions endpoint of the Project service.
type CostTransactionsEndpoint service

// CostTransactions:
// Service: Project
// Entity: CostTransactions
// URL: /api/v1/{division}/project/CostTransactions
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectCostTransactions
type CostTransactions struct {
	// ID:
	ID *types.GUID `json:"ID,omitempty"`

	// Account:
	Account *types.GUID `json:"Account,omitempty"`

	// AccountName:
	AccountName *string `json:"AccountName,omitempty"`

	// Amount:
	Amount *float64 `json:"Amount,omitempty"`

	// AmountFC:
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// Attachment:
	Attachment *types.GUID `json:"Attachment,omitempty"`

	// Created:
	Created *types.Date `json:"Created,omitempty"`

	// Creator:
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency:
	Currency *string `json:"Currency,omitempty"`

	// Date:
	Date *types.Date `json:"Date,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// DivisionDescription:
	DivisionDescription *string `json:"DivisionDescription,omitempty"`

	// Employee:
	Employee *types.GUID `json:"Employee,omitempty"`

	// EntryNumber:
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// ErrorText:
	ErrorText *string `json:"ErrorText,omitempty"`

	// Expense:
	Expense *types.GUID `json:"Expense,omitempty"`

	// ExpenseDescription:
	ExpenseDescription *string `json:"ExpenseDescription,omitempty"`

	// HourStatus:
	HourStatus *int `json:"HourStatus,omitempty"`

	// Item:
	Item *types.GUID `json:"Item,omitempty"`

	// ItemDescription:
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemDivisable:
	ItemDivisable *bool `json:"ItemDivisable,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes:
	Notes *string `json:"Notes,omitempty"`

	// Price:
	Price *float64 `json:"Price,omitempty"`

	// PriceFC:
	PriceFC *float64 `json:"PriceFC,omitempty"`

	// Project:
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectAccount:
	ProjectAccount *types.GUID `json:"ProjectAccount,omitempty"`

	// ProjectAccountCode:
	ProjectAccountCode *string `json:"ProjectAccountCode,omitempty"`

	// ProjectAccountName:
	ProjectAccountName *string `json:"ProjectAccountName,omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// Quantity:
	Quantity *float64 `json:"Quantity,omitempty"`

	// SkipValidation:
	SkipValidation *bool `json:"SkipValidation,omitempty"`

	// Subscription:
	Subscription *types.GUID `json:"Subscription,omitempty"`

	// SubscriptionAccount:
	SubscriptionAccount *types.GUID `json:"SubscriptionAccount,omitempty"`

	// SubscriptionAccountCode:
	SubscriptionAccountCode *string `json:"SubscriptionAccountCode,omitempty"`

	// SubscriptionAccountName:
	SubscriptionAccountName *string `json:"SubscriptionAccountName,omitempty"`

	// SubscriptionDescription:
	SubscriptionDescription *string `json:"SubscriptionDescription,omitempty"`

	// SubscriptionNumber:
	SubscriptionNumber *int `json:"SubscriptionNumber,omitempty"`

	// Type:
	Type *int `json:"Type,omitempty"`
}

func (s *CostTransactions) GetIdentifier() types.GUID {
	return *s.ID
}

// List the CostTransactions entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *CostTransactionsEndpoint) List(ctx context.Context, division int, all bool) ([]*CostTransactions, error) {
	var entities []*CostTransactions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/project/CostTransactions?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
