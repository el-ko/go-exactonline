// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ProjectPlanningRecurringEndpoint is responsible for communicating with
// the ProjectPlanningRecurring endpoint of the Project service.
type ProjectPlanningRecurringEndpoint service

// ProjectPlanningRecurring:
// Service: Project
// Entity: ProjectPlanningRecurring
// URL: /api/v1/{division}/project/ProjectPlanningRecurring
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectProjectPlanningRecurring
type ProjectPlanningRecurring struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode: Edm.String
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// BGTStatus: Edm.Int16
	BGTStatus *int `json:"BGTStatus,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// DayOrThe: Edm.Int32
	DayOrThe *int `json:"DayOrThe,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Employee: Edm.Guid
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeCode: Edm.String
	EmployeeCode *string `json:"EmployeeCode,omitempty"`

	// EmployeeHID: Edm.Int32
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// EndDateOrAfter: Edm.Int32
	EndDateOrAfter *int `json:"EndDateOrAfter,omitempty"`

	// EndTime: Edm.DateTime
	EndTime *types.Date `json:"EndTime,omitempty"`

	// Hours: Edm.Double
	Hours *float64 `json:"Hours,omitempty"`

	// HourType: Edm.Guid
	HourType *types.GUID `json:"HourType,omitempty"`

	// HourTypeCode: Edm.String
	HourTypeCode *string `json:"HourTypeCode,omitempty"`

	// HourTypeDescription: Edm.String
	HourTypeDescription *string `json:"HourTypeDescription,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// MonthPatternDay: Edm.Byte
	MonthPatternDay *byte `json:"MonthPatternDay,omitempty"`

	// MonthPatternOrdinalDay: Edm.Byte
	MonthPatternOrdinalDay *byte `json:"MonthPatternOrdinalDay,omitempty"`

	// MonthPatternOrdinalWeek: Edm.Byte
	MonthPatternOrdinalWeek *byte `json:"MonthPatternOrdinalWeek,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// NumberOfRecurrences: Edm.Int16
	NumberOfRecurrences *int `json:"NumberOfRecurrences,omitempty"`

	// OverAllocate: Edm.Boolean
	OverAllocate *bool `json:"OverAllocate,omitempty"`

	// PatternFrequency: Edm.Byte
	PatternFrequency *byte `json:"PatternFrequency,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Edm.String
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// ProjectPlanningRecurringType: Edm.Byte
	ProjectPlanningRecurringType *byte `json:"ProjectPlanningRecurringType,omitempty"`

	// ProjectWBS: Edm.Guid
	ProjectWBS *types.GUID `json:"ProjectWBS,omitempty"`

	// ProjectWBSDescription: Edm.String
	ProjectWBSDescription *string `json:"ProjectWBSDescription,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// StartTime: Edm.DateTime
	StartTime *types.Date `json:"StartTime,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// WeekPatternDay: Edm.Byte
	WeekPatternDay *byte `json:"WeekPatternDay,omitempty"`

	// WeekPatternFriday: Edm.Boolean
	WeekPatternFriday *bool `json:"WeekPatternFriday,omitempty"`

	// WeekPatternMonday: Edm.Boolean
	WeekPatternMonday *bool `json:"WeekPatternMonday,omitempty"`

	// WeekPatternSaturday: Edm.Boolean
	WeekPatternSaturday *bool `json:"WeekPatternSaturday,omitempty"`

	// WeekPatternSunday: Edm.Boolean
	WeekPatternSunday *bool `json:"WeekPatternSunday,omitempty"`

	// WeekPatternThursday: Edm.Boolean
	WeekPatternThursday *bool `json:"WeekPatternThursday,omitempty"`

	// WeekPatternTuesday: Edm.Boolean
	WeekPatternTuesday *bool `json:"WeekPatternTuesday,omitempty"`

	// WeekPatternWednesday: Edm.Boolean
	WeekPatternWednesday *bool `json:"WeekPatternWednesday,omitempty"`
}

func (e *ProjectPlanningRecurring) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ProjectPlanningRecurringEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/ProjectPlanningRecurring", method)
}

// List the ProjectPlanningRecurring entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectPlanningRecurringEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ProjectPlanningRecurring, error) {
	var entities []*ProjectPlanningRecurring
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ProjectPlanningRecurring entitiy in the provided division.
func (s *ProjectPlanningRecurringEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ProjectPlanningRecurring, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ProjectPlanningRecurring{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty ProjectPlanningRecurring entity
func (s *ProjectPlanningRecurringEndpoint) New() *ProjectPlanningRecurring {
	return &ProjectPlanningRecurring{}
}

// Create the ProjectPlanningRecurring entity in the provided division.
func (s *ProjectPlanningRecurringEndpoint) Create(ctx context.Context, division int, entity *ProjectPlanningRecurring) (*ProjectPlanningRecurring, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	e := &ProjectPlanningRecurring{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the ProjectPlanningRecurring entity in the provided division.
func (s *ProjectPlanningRecurringEndpoint) Update(ctx context.Context, division int, entity *ProjectPlanningRecurring) (*ProjectPlanningRecurring, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &ProjectPlanningRecurring{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the ProjectPlanningRecurring entity in the provided division.
func (s *ProjectPlanningRecurringEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
