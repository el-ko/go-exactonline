// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ProjectsEndpoint is responsible for communicating with
// the Projects endpoint of the Project service.
type ProjectsEndpoint service

// Projects:
// Service: Project
// Entity: Projects
// URL: /api/v1/{division}/project/Projects
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectProjects
type Projects struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode: Edm.String
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountContact: Edm.Guid
	AccountContact *types.GUID `json:"AccountContact,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// AllowAdditionalInvoicing: Edm.Boolean
	AllowAdditionalInvoicing *bool `json:"AllowAdditionalInvoicing,omitempty"`

	// AllowMemberEntryOnly: Edm.Boolean
	AllowMemberEntryOnly *bool `json:"AllowMemberEntryOnly,omitempty"`

	// BlockEntry: Edm.Boolean
	BlockEntry *bool `json:"BlockEntry,omitempty"`

	// BlockInvoicing: Edm.Boolean
	BlockInvoicing *bool `json:"BlockInvoicing,omitempty"`

	// BlockPlanning: Edm.Boolean
	BlockPlanning *bool `json:"BlockPlanning,omitempty"`

	// BlockPurchasing: Edm.Boolean
	BlockPurchasing *bool `json:"BlockPurchasing,omitempty"`

	// BlockRebilling: Edm.Boolean
	BlockRebilling *bool `json:"BlockRebilling,omitempty"`

	// BudgetedAmount: Edm.Double
	BudgetedAmount *float64 `json:"BudgetedAmount,omitempty"`

	// BudgetedCosts: Edm.Double
	BudgetedCosts *float64 `json:"BudgetedCosts,omitempty"`

	// BudgetedHoursPerHourType: BudgetedHoursPerHourType
	BudgetedHoursPerHourType *json.RawMessage `json:"BudgetedHoursPerHourType,omitempty"`

	// BudgetedRevenue: Edm.Double
	BudgetedRevenue *float64 `json:"BudgetedRevenue,omitempty"`

	// BudgetOverrunHours: Edm.Byte
	BudgetOverrunHours *byte `json:"BudgetOverrunHours,omitempty"`

	// BudgetType: Edm.Int16
	BudgetType *int `json:"BudgetType,omitempty"`

	// BudgetTypeDescription: Edm.String
	BudgetTypeDescription *string `json:"BudgetTypeDescription,omitempty"`

	// Classification: Edm.Guid
	Classification *types.GUID `json:"Classification,omitempty"`

	// ClassificationDescription: Edm.String
	ClassificationDescription *string `json:"ClassificationDescription,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// CostsAmountFC: Edm.Double
	CostsAmountFC *float64 `json:"CostsAmountFC,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomerPOnumber: Edm.String
	CustomerPOnumber *string `json:"CustomerPOnumber,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// DivisionName: Edm.String
	DivisionName *string `json:"DivisionName,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// FixedPriceItem: Edm.Guid
	FixedPriceItem *types.GUID `json:"FixedPriceItem,omitempty"`

	// FixedPriceItemDescription: Edm.String
	FixedPriceItemDescription *string `json:"FixedPriceItemDescription,omitempty"`

	// HasWBSLines: Edm.Boolean
	HasWBSLines *bool `json:"HasWBSLines,omitempty"`

	// IncludeInvoiceSpecification: Edm.Int16
	IncludeInvoiceSpecification *int `json:"IncludeInvoiceSpecification,omitempty"`

	// IncludeSpecificationInInvoicePdf: Edm.Boolean
	IncludeSpecificationInInvoicePdf *bool `json:"IncludeSpecificationInInvoicePdf,omitempty"`

	// InternalNotes: Edm.String
	InternalNotes *string `json:"InternalNotes,omitempty"`

	// InvoiceAddress: Edm.Guid
	InvoiceAddress *types.GUID `json:"InvoiceAddress,omitempty"`

	// InvoiceAsQuoted: Edm.Boolean
	InvoiceAsQuoted *bool `json:"InvoiceAsQuoted,omitempty"`

	// InvoiceTerms: InvoiceTerms
	InvoiceTerms *json.RawMessage `json:"InvoiceTerms,omitempty"`

	// Manager: Edm.Guid
	Manager *types.GUID `json:"Manager,omitempty"`

	// ManagerFullname: Edm.String
	ManagerFullname *string `json:"ManagerFullname,omitempty"`

	// MarkupPercentage: Edm.Double
	MarkupPercentage *float64 `json:"MarkupPercentage,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// PaymentCondition: Edm.String
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PrepaidItem: Edm.Guid
	PrepaidItem *types.GUID `json:"PrepaidItem,omitempty"`

	// PrepaidItemDescription: Edm.String
	PrepaidItemDescription *string `json:"PrepaidItemDescription,omitempty"`

	// PrepaidType: Edm.Int16
	PrepaidType *int `json:"PrepaidType,omitempty"`

	// PrepaidTypeDescription: Edm.String
	PrepaidTypeDescription *string `json:"PrepaidTypeDescription,omitempty"`

	// ProjectRestrictionEmployees: ProjectRestrictionEmployees
	ProjectRestrictionEmployees *json.RawMessage `json:"ProjectRestrictionEmployees,omitempty"`

	// ProjectRestrictionItems: ProjectRestrictionItems
	ProjectRestrictionItems *json.RawMessage `json:"ProjectRestrictionItems,omitempty"`

	// ProjectRestrictionRebillings: ProjectRestrictionRebillings
	ProjectRestrictionRebillings *json.RawMessage `json:"ProjectRestrictionRebillings,omitempty"`

	// SalesTimeQuantity: Edm.Double
	SalesTimeQuantity *float64 `json:"SalesTimeQuantity,omitempty"`

	// SourceQuotation: Edm.Guid
	SourceQuotation *types.GUID `json:"SourceQuotation,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// TimeQuantityToAlert: Edm.Double
	TimeQuantityToAlert *float64 `json:"TimeQuantityToAlert,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// TypeDescription: Edm.String
	TypeDescription *string `json:"TypeDescription,omitempty"`

	// UseBillingMilestones: Edm.Boolean
	UseBillingMilestones *bool `json:"UseBillingMilestones,omitempty"`
}

func (e *Projects) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ProjectsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/Projects", method)
}

// List the Projects entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Projects, error) {
	var entities []*Projects
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/Projects", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Projects entitiy in the provided division.
func (s *ProjectsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Projects, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/Projects", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Projects{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty Projects entity
func (s *ProjectsEndpoint) New() *Projects {
	return &Projects{}
}

// Create the Projects entity in the provided division.
func (s *ProjectsEndpoint) Create(ctx context.Context, division int, entity *Projects) (*Projects, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/Projects", division) // #nosec
	e := &Projects{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the Projects entity in the provided division.
func (s *ProjectsEndpoint) Update(ctx context.Context, division int, entity *Projects) (*Projects, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/Projects", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &Projects{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the Projects entity in the provided division.
func (s *ProjectsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/Projects", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
