// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// WBSActivitiesEndpoint is responsible for communicating with
// the WBSActivities endpoint of the Project service.
type WBSActivitiesEndpoint service

// WBSActivities:
// Service: Project
// Entity: WBSActivities
// URL: /api/v1/{division}/project/WBSActivities
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectWBSActivities
type WBSActivities struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AutoCreateInvoiceTerm: Edm.Boolean
	AutoCreateInvoiceTerm *bool `json:"AutoCreateInvoiceTerm,omitempty"`

	// BlockEntry: Edm.Boolean
	BlockEntry *bool `json:"BlockEntry,omitempty"`

	// BudgetedCost: Edm.Double
	BudgetedCost *float64 `json:"BudgetedCost,omitempty"`

	// BudgetedHours: Edm.Double
	BudgetedHours *float64 `json:"BudgetedHours,omitempty"`

	// BudgetedRevenue: Edm.Double
	BudgetedRevenue *float64 `json:"BudgetedRevenue,omitempty"`

	// BudgetOverrunHours: Edm.Byte
	BudgetOverrunHours *byte `json:"BudgetOverrunHours,omitempty"`

	// Completed: Edm.Boolean
	Completed *bool `json:"Completed,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// DefaultItem: Edm.Guid
	DefaultItem *types.GUID `json:"DefaultItem,omitempty"`

	// DefaultItemIsMandatory: Edm.Boolean
	DefaultItemIsMandatory *bool `json:"DefaultItemIsMandatory,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// InvoiceDate: Edm.DateTime
	InvoiceDate *types.Date `json:"InvoiceDate,omitempty"`

	// InvoiceMethod: Edm.Int16
	InvoiceMethod *int `json:"InvoiceMethod,omitempty"`

	// InvoiceSeparately: Edm.Boolean
	InvoiceSeparately *bool `json:"InvoiceSeparately,omitempty"`

	// InvoiceTerm: Edm.Guid
	InvoiceTerm *types.GUID `json:"InvoiceTerm,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// PartOf: Edm.Guid
	PartOf *types.GUID `json:"PartOf,omitempty"`

	// PartOfDescription: Edm.String
	PartOfDescription *string `json:"PartOfDescription,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// ProjectTermAction: Edm.Int16
	ProjectTermAction *int `json:"ProjectTermAction,omitempty"`

	// SequenceNumber: Edm.Int32
	SequenceNumber *int `json:"SequenceNumber,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// TimeQuantityToAlert: Edm.Double
	TimeQuantityToAlert *float64 `json:"TimeQuantityToAlert,omitempty"`

	// Type: Edm.Int16
	Type *int `json:"Type,omitempty"`

	// UpdateAction: Edm.Int16
	UpdateAction *int `json:"UpdateAction,omitempty"`
}

func (e *WBSActivities) GetPrimary() *types.GUID {
	return e.ID
}

func (s *WBSActivitiesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/WBSActivities", method)
}

// List the WBSActivities entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *WBSActivitiesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*WBSActivities, error) {
	var entities []*WBSActivities
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/WBSActivities", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the WBSActivities entitiy in the provided division.
func (s *WBSActivitiesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*WBSActivities, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/WBSActivities", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &WBSActivities{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty WBSActivities entity
func (s *WBSActivitiesEndpoint) New() *WBSActivities {
	return &WBSActivities{}
}

// Create the WBSActivities entity in the provided division.
func (s *WBSActivitiesEndpoint) Create(ctx context.Context, division int, entity *WBSActivities) (*WBSActivities, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/WBSActivities", division) // #nosec
	e := &WBSActivities{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the WBSActivities entity in the provided division.
func (s *WBSActivitiesEndpoint) Update(ctx context.Context, division int, entity *WBSActivities) (*WBSActivities, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/WBSActivities", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &WBSActivities{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the WBSActivities entity in the provided division.
func (s *WBSActivitiesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/WBSActivities", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
