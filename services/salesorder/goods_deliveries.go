// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package salesorder

import (
	"context"
	"encoding/json"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// GoodsDeliveriesEndpoint is responsible for communicating with
// the GoodsDeliveries endpoint of the SalesOrder service.
type GoodsDeliveriesEndpoint service

// GoodsDeliveries:
// Service: SalesOrder
// Entity: GoodsDeliveries
// URL: /api/v1/{division}/salesorder/GoodsDeliveries
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesOrderGoodsDeliveries
type GoodsDeliveries struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// EntryID: Edm.Guid
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// DeliveryAccount: Edm.Guid
	DeliveryAccount *types.GUID `json:"DeliveryAccount,omitempty"`

	// DeliveryAccountCode: Edm.String
	DeliveryAccountCode *string `json:"DeliveryAccountCode,omitempty"`

	// DeliveryAccountName: Edm.String
	DeliveryAccountName *string `json:"DeliveryAccountName,omitempty"`

	// DeliveryAddress: Edm.Guid
	DeliveryAddress *types.GUID `json:"DeliveryAddress,omitempty"`

	// DeliveryContact: Edm.Guid
	DeliveryContact *types.GUID `json:"DeliveryContact,omitempty"`

	// DeliveryContactPersonFullName: Edm.String
	DeliveryContactPersonFullName *string `json:"DeliveryContactPersonFullName,omitempty"`

	// DeliveryDate: Edm.DateTime
	DeliveryDate *types.Date `json:"DeliveryDate,omitempty"`

	// DeliveryNumber: Edm.Int32
	DeliveryNumber *int `json:"DeliveryNumber,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentSubject: Edm.String
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// EntryNumber: Edm.Int32
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// GoodsDeliveryLines: GoodsDeliveryLines
	GoodsDeliveryLines *json.RawMessage `json:"GoodsDeliveryLines,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Remarks: Edm.String
	Remarks *string `json:"Remarks,omitempty"`

	// ShippingMethod: Edm.Guid
	ShippingMethod *types.GUID `json:"ShippingMethod,omitempty"`

	// ShippingMethodCode: Edm.String
	ShippingMethodCode *string `json:"ShippingMethodCode,omitempty"`

	// ShippingMethodDescription: Edm.String
	ShippingMethodDescription *string `json:"ShippingMethodDescription,omitempty"`

	// TrackingNumber: Edm.String
	TrackingNumber *string `json:"TrackingNumber,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Edm.String
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Edm.String
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *GoodsDeliveries) GetPrimary() *types.GUID {
	return e.EntryID
}

func (s *GoodsDeliveriesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "salesorder/GoodsDeliveries", method)
}

// List the GoodsDeliveries entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *GoodsDeliveriesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*GoodsDeliveries, error) {
	var entities []*GoodsDeliveries
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/GoodsDeliveries", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the GoodsDeliveries entitiy in the provided division.
func (s *GoodsDeliveriesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*GoodsDeliveries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/GoodsDeliveries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &GoodsDeliveries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty GoodsDeliveries entity
func (s *GoodsDeliveriesEndpoint) New() *GoodsDeliveries {
	return &GoodsDeliveries{}
}

// Create the GoodsDeliveries entity in the provided division.
func (s *GoodsDeliveriesEndpoint) Create(ctx context.Context, division int, entity *GoodsDeliveries) (*GoodsDeliveries, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/GoodsDeliveries", division) // #nosec
	e := &GoodsDeliveries{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the GoodsDeliveries entity in the provided division.
func (s *GoodsDeliveriesEndpoint) Update(ctx context.Context, division int, entity *GoodsDeliveries) (*GoodsDeliveries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/GoodsDeliveries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &GoodsDeliveries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}
