// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package vat

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// VATCodesEndpoint is responsible for communicating with
// the VATCodes endpoint of the VAT service.
type VATCodesEndpoint service

// VATCodes:
// Service: VAT
// Entity: VATCodes
// URL: /api/v1/{division}/vat/VATCodes
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=VATVATCodes
type VATCodes struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode: Edm.String
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// CalculationBasis: Edm.Byte
	CalculationBasis *byte `json:"CalculationBasis,omitempty"`

	// Charged: Edm.Boolean
	Charged *bool `json:"Charged,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// Country: Edm.String
	Country *string `json:"Country,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EUSalesListing: Edm.String
	EUSalesListing *string `json:"EUSalesListing,omitempty"`

	// ExcludeVATListing: Edm.Byte
	ExcludeVATListing *byte `json:"ExcludeVATListing,omitempty"`

	// GLDiscountPurchase: Edm.Guid
	GLDiscountPurchase *types.GUID `json:"GLDiscountPurchase,omitempty"`

	// GLDiscountPurchaseCode: Edm.String
	GLDiscountPurchaseCode *string `json:"GLDiscountPurchaseCode,omitempty"`

	// GLDiscountPurchaseDescription: Edm.String
	GLDiscountPurchaseDescription *string `json:"GLDiscountPurchaseDescription,omitempty"`

	// GLDiscountSales: Edm.Guid
	GLDiscountSales *types.GUID `json:"GLDiscountSales,omitempty"`

	// GLDiscountSalesCode: Edm.String
	GLDiscountSalesCode *string `json:"GLDiscountSalesCode,omitempty"`

	// GLDiscountSalesDescription: Edm.String
	GLDiscountSalesDescription *string `json:"GLDiscountSalesDescription,omitempty"`

	// GLToClaim: Edm.Guid
	GLToClaim *types.GUID `json:"GLToClaim,omitempty"`

	// GLToClaimCode: Edm.String
	GLToClaimCode *string `json:"GLToClaimCode,omitempty"`

	// GLToClaimDescription: Edm.String
	GLToClaimDescription *string `json:"GLToClaimDescription,omitempty"`

	// GLToPay: Edm.Guid
	GLToPay *types.GUID `json:"GLToPay,omitempty"`

	// GLToPayCode: Edm.String
	GLToPayCode *string `json:"GLToPayCode,omitempty"`

	// GLToPayDescription: Edm.String
	GLToPayDescription *string `json:"GLToPayDescription,omitempty"`

	// IntraStat: Edm.Boolean
	IntraStat *bool `json:"IntraStat,omitempty"`

	// IntrastatType: Edm.String
	IntrastatType *string `json:"IntrastatType,omitempty"`

	// IsBlocked: Edm.Boolean
	IsBlocked *bool `json:"IsBlocked,omitempty"`

	// LegalText: Edm.String
	LegalText *string `json:"LegalText,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OssCountry: Edm.String
	OssCountry *string `json:"OssCountry,omitempty"`

	// Percentage: Edm.Double
	Percentage *float64 `json:"Percentage,omitempty"`

	// TaxReturnType: Edm.Int16
	TaxReturnType *int `json:"TaxReturnType,omitempty"`

	// Type: Edm.String
	Type *string `json:"Type,omitempty"`

	// VatDocType: Edm.String
	VatDocType *string `json:"VatDocType,omitempty"`

	// VatMargin: Edm.Byte
	VatMargin *byte `json:"VatMargin,omitempty"`

	// VATPartialRatio: Edm.Int16
	VATPartialRatio *int `json:"VATPartialRatio,omitempty"`

	// VATPercentages: VATPercentages
	VATPercentages *json.RawMessage `json:"VATPercentages,omitempty"`

	// VATTransactionType: Edm.String
	VATTransactionType *string `json:"VATTransactionType,omitempty"`
}

func (e *VATCodes) GetPrimary() *types.GUID {
	return e.ID
}

func (s *VATCodesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "vat/VATCodes", method)
}

// List the VATCodes entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *VATCodesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*VATCodes, error) {
	var entities []*VATCodes
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/vat/VATCodes", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the VATCodes entitiy in the provided division.
func (s *VATCodesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*VATCodes, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/vat/VATCodes", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &VATCodes{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty VATCodes entity
func (s *VATCodesEndpoint) New() *VATCodes {
	return &VATCodes{}
}

// Create the VATCodes entity in the provided division.
func (s *VATCodesEndpoint) Create(ctx context.Context, division int, entity *VATCodes) (*VATCodes, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/vat/VATCodes", division) // #nosec
	e := &VATCodes{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the VATCodes entity in the provided division.
func (s *VATCodesEndpoint) Update(ctx context.Context, division int, entity *VATCodes) (*VATCodes, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/vat/VATCodes", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &VATCodes{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the VATCodes entity in the provided division.
func (s *VATCodesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/vat/VATCodes", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
