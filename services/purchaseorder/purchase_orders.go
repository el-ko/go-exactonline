// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchaseorder

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// PurchaseOrdersEndpoint is responsible for communicating with
// the PurchaseOrders endpoint of the PurchaseOrder service.
type PurchaseOrdersEndpoint service

// PurchaseOrders:
// Service: PurchaseOrder
// Entity: PurchaseOrders
// URL: /api/v1/{division}/purchaseorder/PurchaseOrders
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseOrderPurchaseOrders
type PurchaseOrders struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// PurchaseOrderID: Edm.Guid
	PurchaseOrderID *types.GUID `json:"PurchaseOrderID,omitempty"`

	// AmountDC: Edm.Double
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// ApprovalStatus: Edm.Int16
	ApprovalStatus *int `json:"ApprovalStatus,omitempty"`

	// ApprovalStatusDescription: Edm.String
	ApprovalStatusDescription *string `json:"ApprovalStatusDescription,omitempty"`

	// Approved: Edm.DateTime
	Approved *types.Date `json:"Approved,omitempty"`

	// Approver: Edm.Guid
	Approver *types.GUID `json:"Approver,omitempty"`

	// ApproverFullName: Edm.String
	ApproverFullName *string `json:"ApproverFullName,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// DeliveryAccount: Edm.Guid
	DeliveryAccount *types.GUID `json:"DeliveryAccount,omitempty"`

	// DeliveryAccountCode: Edm.String
	DeliveryAccountCode *string `json:"DeliveryAccountCode,omitempty"`

	// DeliveryAccountName: Edm.String
	DeliveryAccountName *string `json:"DeliveryAccountName,omitempty"`

	// DeliveryAddress: Edm.Guid
	DeliveryAddress *types.GUID `json:"DeliveryAddress,omitempty"`

	// DeliveryContact: Edm.Guid
	DeliveryContact *types.GUID `json:"DeliveryContact,omitempty"`

	// DeliveryContactPersonFullName: Edm.String
	DeliveryContactPersonFullName *string `json:"DeliveryContactPersonFullName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentSubject: Edm.String
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// DropShipment: Edm.Boolean
	DropShipment *bool `json:"DropShipment,omitempty"`

	// ExchangeRate: Edm.Double
	ExchangeRate *float64 `json:"ExchangeRate,omitempty"`

	// IncotermAddress: Edm.String
	IncotermAddress *string `json:"IncotermAddress,omitempty"`

	// IncotermCode: Edm.String
	IncotermCode *string `json:"IncotermCode,omitempty"`

	// IncotermVersion: Edm.Int16
	IncotermVersion *int `json:"IncotermVersion,omitempty"`

	// InvoiceStatus: Edm.Int32
	InvoiceStatus *int `json:"InvoiceStatus,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OrderDate: Edm.DateTime
	OrderDate *types.Date `json:"OrderDate,omitempty"`

	// OrderNumber: Edm.Int32
	OrderNumber *int `json:"OrderNumber,omitempty"`

	// OrderStatus: Edm.Int32
	OrderStatus *int `json:"OrderStatus,omitempty"`

	// PaymentCondition: Edm.String
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentConditionDescription: Edm.String
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// PurchaseAgent: Edm.Guid
	PurchaseAgent *types.GUID `json:"PurchaseAgent,omitempty"`

	// PurchaseAgentFullName: Edm.String
	PurchaseAgentFullName *string `json:"PurchaseAgentFullName,omitempty"`

	// PurchaseOrderLineCount: Edm.Int32
	PurchaseOrderLineCount *int `json:"PurchaseOrderLineCount,omitempty"`

	// PurchaseOrderLines: PurchaseOrderLines
	PurchaseOrderLines *json.RawMessage `json:"PurchaseOrderLines,omitempty"`

	// ReceiptDate: Edm.DateTime
	ReceiptDate *types.Date `json:"ReceiptDate,omitempty"`

	// ReceiptStatus: Edm.Int32
	ReceiptStatus *int `json:"ReceiptStatus,omitempty"`

	// Remarks: Edm.String
	Remarks *string `json:"Remarks,omitempty"`

	// SalesOrder: Edm.Guid
	SalesOrder *types.GUID `json:"SalesOrder,omitempty"`

	// SalesOrderNumber: Edm.Int32
	SalesOrderNumber *int `json:"SalesOrderNumber,omitempty"`

	// SelectionCode: Edm.Guid
	SelectionCode *types.GUID `json:"SelectionCode,omitempty"`

	// SelectionCodeCode: Edm.String
	SelectionCodeCode *string `json:"SelectionCodeCode,omitempty"`

	// SelectionCodeDescription: Edm.String
	SelectionCodeDescription *string `json:"SelectionCodeDescription,omitempty"`

	// ShippingMethod: Edm.Guid
	ShippingMethod *types.GUID `json:"ShippingMethod,omitempty"`

	// ShippingMethodCode: Edm.String
	ShippingMethodCode *string `json:"ShippingMethodCode,omitempty"`

	// ShippingMethodDescription: Edm.String
	ShippingMethodDescription *string `json:"ShippingMethodDescription,omitempty"`

	// Source: Edm.Int16
	Source *int `json:"Source,omitempty"`

	// Supplier: Edm.Guid
	Supplier *types.GUID `json:"Supplier,omitempty"`

	// SupplierCode: Edm.String
	SupplierCode *string `json:"SupplierCode,omitempty"`

	// SupplierContact: Edm.Guid
	SupplierContact *types.GUID `json:"SupplierContact,omitempty"`

	// SupplierContactPersonFullName: Edm.String
	SupplierContactPersonFullName *string `json:"SupplierContactPersonFullName,omitempty"`

	// SupplierName: Edm.String
	SupplierName *string `json:"SupplierName,omitempty"`

	// VATAmount: Edm.Double
	VATAmount *float64 `json:"VATAmount,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Edm.String
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Edm.String
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`

	// YourRef: Edm.String
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *PurchaseOrders) GetPrimary() *types.GUID {
	return e.PurchaseOrderID
}

func (s *PurchaseOrdersEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "purchaseorder/PurchaseOrders", method)
}

// List the PurchaseOrders entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseOrdersEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PurchaseOrders, error) {
	var entities []*PurchaseOrders
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrders", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PurchaseOrders entitiy in the provided division.
func (s *PurchaseOrdersEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*PurchaseOrders, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrders", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PurchaseOrders{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty PurchaseOrders entity
func (s *PurchaseOrdersEndpoint) New() *PurchaseOrders {
	return &PurchaseOrders{}
}

// Create the PurchaseOrders entity in the provided division.
func (s *PurchaseOrdersEndpoint) Create(ctx context.Context, division int, entity *PurchaseOrders) (*PurchaseOrders, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrders", division) // #nosec
	e := &PurchaseOrders{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the PurchaseOrders entity in the provided division.
func (s *PurchaseOrdersEndpoint) Update(ctx context.Context, division int, entity *PurchaseOrders) (*PurchaseOrders, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrders", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &PurchaseOrders{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the PurchaseOrders entity in the provided division.
func (s *PurchaseOrdersEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrders", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
