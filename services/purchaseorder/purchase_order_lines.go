// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchaseorder

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// PurchaseOrderLinesEndpoint is responsible for communicating with
// the PurchaseOrderLines endpoint of the PurchaseOrder service.
type PurchaseOrderLinesEndpoint service

// PurchaseOrderLines:
// Service: PurchaseOrder
// Entity: PurchaseOrderLines
// URL: /api/v1/{division}/purchaseorder/PurchaseOrderLines
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseOrderPurchaseOrderLines
type PurchaseOrderLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AmountDC: Edm.Double
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// CostCenter: Edm.String
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostCenterDescription: Edm.String
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit: Edm.String
	CostUnit *string `json:"CostUnit,omitempty"`

	// CostUnitDescription: Edm.String
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Discount: Edm.Double
	Discount *float64 `json:"Discount,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Expense: Edm.Guid
	Expense *types.GUID `json:"Expense,omitempty"`

	// ExpenseDescription: Edm.String
	ExpenseDescription *string `json:"ExpenseDescription,omitempty"`

	// InStock: Edm.Double
	InStock *float64 `json:"InStock,omitempty"`

	// InvoicedQuantity: Edm.Double
	InvoicedQuantity *float64 `json:"InvoicedQuantity,omitempty"`

	// IsBatchNumberItem: Edm.Byte
	IsBatchNumberItem *byte `json:"IsBatchNumberItem,omitempty"`

	// IsSerialNumberItem: Edm.Byte
	IsSerialNumberItem *byte `json:"IsSerialNumberItem,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemBarcode: Edm.String
	ItemBarcode *string `json:"ItemBarcode,omitempty"`

	// ItemBarcodeAdditional: Edm.String
	ItemBarcodeAdditional *string `json:"ItemBarcodeAdditional,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemDivisable: Edm.Boolean
	ItemDivisable *bool `json:"ItemDivisable,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// NetPrice: Edm.Double
	NetPrice *float64 `json:"NetPrice,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Edm.String
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// ProjectedStock: Edm.Double
	ProjectedStock *float64 `json:"ProjectedStock,omitempty"`

	// PurchaseOrderID: Edm.Guid
	PurchaseOrderID *types.GUID `json:"PurchaseOrderID,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// QuantityInPurchaseUnits: Edm.Double
	QuantityInPurchaseUnits *float64 `json:"QuantityInPurchaseUnits,omitempty"`

	// Rebill: Edm.Boolean
	Rebill *bool `json:"Rebill,omitempty"`

	// ReceiptDate: Edm.DateTime
	ReceiptDate *types.Date `json:"ReceiptDate,omitempty"`

	// ReceivedQuantity: Edm.Double
	ReceivedQuantity *float64 `json:"ReceivedQuantity,omitempty"`

	// SalesOrder: Edm.Guid
	SalesOrder *types.GUID `json:"SalesOrder,omitempty"`

	// SalesOrderLine: Edm.Guid
	SalesOrderLine *types.GUID `json:"SalesOrderLine,omitempty"`

	// SalesOrderLineNumber: Edm.Int32
	SalesOrderLineNumber *int `json:"SalesOrderLineNumber,omitempty"`

	// SalesOrderNumber: Edm.Int32
	SalesOrderNumber *int `json:"SalesOrderNumber,omitempty"`

	// ShopOrder: Edm.Guid
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// ShopOrderMaterialPlan: Edm.Guid
	ShopOrderMaterialPlan *types.GUID `json:"ShopOrderMaterialPlan,omitempty"`

	// ShopOrderMaterialPlanLineNumber: Edm.Int32
	ShopOrderMaterialPlanLineNumber *int `json:"ShopOrderMaterialPlanLineNumber,omitempty"`

	// ShopOrderMaterialPlans: ShopOrderMaterialPlans
	ShopOrderMaterialPlans *json.RawMessage `json:"ShopOrderMaterialPlans,omitempty"`

	// ShopOrderNumber: Edm.Int32
	ShopOrderNumber *int `json:"ShopOrderNumber,omitempty"`

	// ShopOrderRoutingStepPlan: Edm.Guid
	ShopOrderRoutingStepPlan *types.GUID `json:"ShopOrderRoutingStepPlan,omitempty"`

	// ShopOrderRoutingStepPlanLineNumber: Edm.Int32
	ShopOrderRoutingStepPlanLineNumber *int `json:"ShopOrderRoutingStepPlanLineNumber,omitempty"`

	// ShopOrderRoutingStepPlans: ShopOrderRoutingStepPlans
	ShopOrderRoutingStepPlans *json.RawMessage `json:"ShopOrderRoutingStepPlans,omitempty"`

	// SupplierItemCode: Edm.String
	SupplierItemCode *string `json:"SupplierItemCode,omitempty"`

	// SupplierItemCopyRemarks: Edm.Byte
	SupplierItemCopyRemarks *byte `json:"SupplierItemCopyRemarks,omitempty"`

	// Unit: Edm.String
	Unit *string `json:"Unit,omitempty"`

	// UnitDescription: Edm.String
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// UnitPrice: Edm.Double
	UnitPrice *float64 `json:"UnitPrice,omitempty"`

	// VATAmount: Edm.Double
	VATAmount *float64 `json:"VATAmount,omitempty"`

	// VATCode: Edm.String
	VATCode *string `json:"VATCode,omitempty"`

	// VATDescription: Edm.String
	VATDescription *string `json:"VATDescription,omitempty"`

	// VATPercentage: Edm.Double
	VATPercentage *float64 `json:"VATPercentage,omitempty"`
}

func (e *PurchaseOrderLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *PurchaseOrderLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "purchaseorder/PurchaseOrderLines", method)
}

// List the PurchaseOrderLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseOrderLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PurchaseOrderLines, error) {
	var entities []*PurchaseOrderLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrderLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PurchaseOrderLines entitiy in the provided division.
func (s *PurchaseOrderLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*PurchaseOrderLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrderLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PurchaseOrderLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty PurchaseOrderLines entity
func (s *PurchaseOrderLinesEndpoint) New() *PurchaseOrderLines {
	return &PurchaseOrderLines{}
}

// Create the PurchaseOrderLines entity in the provided division.
func (s *PurchaseOrderLinesEndpoint) Create(ctx context.Context, division int, entity *PurchaseOrderLines) (*PurchaseOrderLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrderLines", division) // #nosec
	e := &PurchaseOrderLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the PurchaseOrderLines entity in the provided division.
func (s *PurchaseOrderLinesEndpoint) Update(ctx context.Context, division int, entity *PurchaseOrderLines) (*PurchaseOrderLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrderLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &PurchaseOrderLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the PurchaseOrderLines entity in the provided division.
func (s *PurchaseOrderLinesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrderLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
