// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchaseorder

import (
	"context"
	"encoding/json"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// GoodsReceiptsEndpoint is responsible for communicating with
// the GoodsReceipts endpoint of the PurchaseOrder service.
type GoodsReceiptsEndpoint service

// GoodsReceipts:
// Service: PurchaseOrder
// Entity: GoodsReceipts
// URL: /api/v1/{division}/purchaseorder/GoodsReceipts
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseOrderGoodsReceipts
type GoodsReceipts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentSubject: Edm.String
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// EntryNumber: Edm.Int32
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// GoodsReceiptLineCount: Edm.Int32
	GoodsReceiptLineCount *int `json:"GoodsReceiptLineCount,omitempty"`

	// GoodsReceiptLines: GoodsReceiptLines
	GoodsReceiptLines *json.RawMessage `json:"GoodsReceiptLines,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// ReceiptDate: Edm.DateTime
	ReceiptDate *types.Date `json:"ReceiptDate,omitempty"`

	// ReceiptNumber: Edm.Int32
	ReceiptNumber *int `json:"ReceiptNumber,omitempty"`

	// Remarks: Edm.String
	Remarks *string `json:"Remarks,omitempty"`

	// Supplier: Edm.Guid
	Supplier *types.GUID `json:"Supplier,omitempty"`

	// SupplierCode: Edm.String
	SupplierCode *string `json:"SupplierCode,omitempty"`

	// SupplierContact: Edm.Guid
	SupplierContact *types.GUID `json:"SupplierContact,omitempty"`

	// SupplierContactFullName: Edm.String
	SupplierContactFullName *string `json:"SupplierContactFullName,omitempty"`

	// SupplierName: Edm.String
	SupplierName *string `json:"SupplierName,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Edm.String
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Edm.String
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`

	// YourRef: Edm.String
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *GoodsReceipts) GetPrimary() *types.GUID {
	return e.ID
}

func (s *GoodsReceiptsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "purchaseorder/GoodsReceipts", method)
}

// List the GoodsReceipts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *GoodsReceiptsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*GoodsReceipts, error) {
	var entities []*GoodsReceipts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/GoodsReceipts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the GoodsReceipts entitiy in the provided division.
func (s *GoodsReceiptsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*GoodsReceipts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/GoodsReceipts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &GoodsReceipts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty GoodsReceipts entity
func (s *GoodsReceiptsEndpoint) New() *GoodsReceipts {
	return &GoodsReceipts{}
}

// Create the GoodsReceipts entity in the provided division.
func (s *GoodsReceiptsEndpoint) Create(ctx context.Context, division int, entity *GoodsReceipts) (*GoodsReceipts, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/GoodsReceipts", division) // #nosec
	e := &GoodsReceipts{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the GoodsReceipts entity in the provided division.
func (s *GoodsReceiptsEndpoint) Update(ctx context.Context, division int, entity *GoodsReceipts) (*GoodsReceipts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/GoodsReceipts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &GoodsReceipts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}
