// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchaseorder

import (
	"context"

	"github.com/mcnijman/go-exactonline/types"
)

// GoodsReceiptLinesEndpoint is responsible for communicating with
// the GoodsReceiptLines endpoint of the PurchaseOrder service.
type GoodsReceiptLinesEndpoint service

// GoodsReceiptLines:
// Service: PurchaseOrder
// Entity: GoodsReceiptLines
// URL: /api/v1/{division}/purchaseorder/GoodsReceiptLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseOrderGoodsReceiptLines
type GoodsReceiptLines struct {
	// ID: The unique identifier of a stock transaction for a goods receipt line. A goods receipt line can be split into multiple storage locations. In this case, multiple storage locations will have the same stock transaction ID.
	ID *types.GUID `json:"ID,omitempty"`

	// BatchNumbers: Collection of batch numbers
	BatchNumbers *[]byte `json:"BatchNumbers,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of the creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Goods receipt line description
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// GoodsReceiptID: All the lines of a goods receipt have the same GoodsReceiptID
	GoodsReceiptID *types.GUID `json:"GoodsReceiptID,omitempty"`

	// Item: ID of the received item
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Code of the received item
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Item description
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemUnitCode: Unit code of the purchase
	ItemUnitCode *string `json:"ItemUnitCode,omitempty"`

	// LineNumber: Line number
	LineNumber *int `json:"LineNumber,omitempty"`

	// Location: ID of the storage location in the warehouse where the item is received
	Location *types.GUID `json:"Location,omitempty"`

	// LocationCode: Code of the storage location in the warehouse where the item is received
	LocationCode *string `json:"LocationCode,omitempty"`

	// LocationDescription: Description of the storage location in the warehouse where the item is received
	LocationDescription *string `json:"LocationDescription,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of the last modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Notes
	Notes *string `json:"Notes,omitempty"`

	// Project: Reference to project
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Project code
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Project description
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// PurchaseOrderID: Reference to purchase order
	PurchaseOrderID *types.GUID `json:"PurchaseOrderID,omitempty"`

	// PurchaseOrderLineID: ID of the purchase order line that is received
	PurchaseOrderLineID *types.GUID `json:"PurchaseOrderLineID,omitempty"`

	// PurchaseOrderNumber: Order number of the purchase order that is received
	PurchaseOrderNumber *int `json:"PurchaseOrderNumber,omitempty"`

	// QuantityOrdered: Quantity ordered
	QuantityOrdered *float64 `json:"QuantityOrdered,omitempty"`

	// QuantityReceived: Quantity received
	QuantityReceived *float64 `json:"QuantityReceived,omitempty"`

	// SerialNumbers: Collection of serial numbers
	SerialNumbers *[]byte `json:"SerialNumbers,omitempty"`

	// SupplierItemCode: Supplier item code
	SupplierItemCode *string `json:"SupplierItemCode,omitempty"`
}

// List the GoodsReceiptLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *GoodsReceiptLinesEndpoint) List(ctx context.Context, division int, all bool) ([]*GoodsReceiptLines, error) {
	var entities []*GoodsReceiptLines
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/GoodsReceiptLines?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
