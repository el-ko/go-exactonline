// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchaseorder

import (
	"context"
	"encoding/json"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// GoodsReceiptLinesEndpoint is responsible for communicating with
// the GoodsReceiptLines endpoint of the PurchaseOrder service.
type GoodsReceiptLinesEndpoint service

// GoodsReceiptLines:
// Service: PurchaseOrder
// Entity: GoodsReceiptLines
// URL: /api/v1/{division}/purchaseorder/GoodsReceiptLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseOrderGoodsReceiptLines
type GoodsReceiptLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// BatchNumbers: StockBatchNumbers
	BatchNumbers *json.RawMessage `json:"BatchNumbers,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Expense: Edm.Guid
	Expense *types.GUID `json:"Expense,omitempty"`

	// ExpenseDescription: Edm.String
	ExpenseDescription *string `json:"ExpenseDescription,omitempty"`

	// GoodsReceiptID: Edm.Guid
	GoodsReceiptID *types.GUID `json:"GoodsReceiptID,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemUnitCode: Edm.String
	ItemUnitCode *string `json:"ItemUnitCode,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Location: Edm.Guid
	Location *types.GUID `json:"Location,omitempty"`

	// LocationCode: Edm.String
	LocationCode *string `json:"LocationCode,omitempty"`

	// LocationDescription: Edm.String
	LocationDescription *string `json:"LocationDescription,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Edm.String
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// PurchaseOrderID: Edm.Guid
	PurchaseOrderID *types.GUID `json:"PurchaseOrderID,omitempty"`

	// PurchaseOrderLineID: Edm.Guid
	PurchaseOrderLineID *types.GUID `json:"PurchaseOrderLineID,omitempty"`

	// PurchaseOrderNumber: Edm.Int32
	PurchaseOrderNumber *int `json:"PurchaseOrderNumber,omitempty"`

	// QuantityOrdered: Edm.Double
	QuantityOrdered *float64 `json:"QuantityOrdered,omitempty"`

	// QuantityReceived: Edm.Double
	QuantityReceived *float64 `json:"QuantityReceived,omitempty"`

	// Rebill: Edm.Boolean
	Rebill *bool `json:"Rebill,omitempty"`

	// SerialNumbers: StockSerialNumbers
	SerialNumbers *json.RawMessage `json:"SerialNumbers,omitempty"`

	// SupplierItemCode: Edm.String
	SupplierItemCode *string `json:"SupplierItemCode,omitempty"`
}

func (e *GoodsReceiptLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *GoodsReceiptLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "purchaseorder/GoodsReceiptLines", method)
}

// List the GoodsReceiptLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *GoodsReceiptLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*GoodsReceiptLines, error) {
	var entities []*GoodsReceiptLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/GoodsReceiptLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the GoodsReceiptLines entitiy in the provided division.
func (s *GoodsReceiptLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*GoodsReceiptLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/GoodsReceiptLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &GoodsReceiptLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty GoodsReceiptLines entity
func (s *GoodsReceiptLinesEndpoint) New() *GoodsReceiptLines {
	return &GoodsReceiptLines{}
}

// Create the GoodsReceiptLines entity in the provided division.
func (s *GoodsReceiptLinesEndpoint) Create(ctx context.Context, division int, entity *GoodsReceiptLines) (*GoodsReceiptLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/GoodsReceiptLines", division) // #nosec
	e := &GoodsReceiptLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}
