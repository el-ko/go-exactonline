// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchase

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// PurchaseInvoiceLinesEndpoint is responsible for communicating with
// the PurchaseInvoiceLines endpoint of the Purchase service.
type PurchaseInvoiceLinesEndpoint service

// PurchaseInvoiceLines:
// Service: Purchase
// Entity: PurchaseInvoiceLines
// URL: /api/v1/{division}/purchase/PurchaseInvoiceLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchasePurchaseInvoiceLines
type PurchaseInvoiceLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Amount: Edm.Double
	Amount *float64 `json:"Amount,omitempty"`

	// CostCenter: Edm.String
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostUnit: Edm.String
	CostUnit *string `json:"CostUnit,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Discount: Edm.Double
	Discount *float64 `json:"Discount,omitempty"`

	// Expense: Edm.Guid
	Expense *types.GUID `json:"Expense,omitempty"`

	// ExpenseDescription: Edm.String
	ExpenseDescription *string `json:"ExpenseDescription,omitempty"`

	// InvoiceID: Edm.Guid
	InvoiceID *types.GUID `json:"InvoiceID,omitempty"`

	// InvoiceType: Edm.Int16
	InvoiceType *int `json:"InvoiceType,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemUnit: Edm.String
	ItemUnit *string `json:"ItemUnit,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// NetPrice: Edm.Double
	NetPrice *float64 `json:"NetPrice,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// PurchaseOrderLine: Edm.Guid
	PurchaseOrderLine *types.GUID `json:"PurchaseOrderLine,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// QuantityInDefaultUnits: Edm.Double
	QuantityInDefaultUnits *float64 `json:"QuantityInDefaultUnits,omitempty"`

	// Rebill: Edm.Boolean
	Rebill *bool `json:"Rebill,omitempty"`

	// Unit: Edm.String
	Unit *string `json:"Unit,omitempty"`

	// UnitPrice: Edm.Double
	UnitPrice *float64 `json:"UnitPrice,omitempty"`

	// VATAmount: Edm.Double
	VATAmount *float64 `json:"VATAmount,omitempty"`

	// VATCode: Edm.String
	VATCode *string `json:"VATCode,omitempty"`

	// VATPercentage: Edm.Double
	VATPercentage *float64 `json:"VATPercentage,omitempty"`
}

func (e *PurchaseInvoiceLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *PurchaseInvoiceLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "purchase/PurchaseInvoiceLines", method)
}

// List the PurchaseInvoiceLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseInvoiceLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PurchaseInvoiceLines, error) {
	var entities []*PurchaseInvoiceLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchase/PurchaseInvoiceLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PurchaseInvoiceLines entitiy in the provided division.
func (s *PurchaseInvoiceLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*PurchaseInvoiceLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchase/PurchaseInvoiceLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PurchaseInvoiceLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty PurchaseInvoiceLines entity
func (s *PurchaseInvoiceLinesEndpoint) New() *PurchaseInvoiceLines {
	return &PurchaseInvoiceLines{}
}

// Create the PurchaseInvoiceLines entity in the provided division.
func (s *PurchaseInvoiceLinesEndpoint) Create(ctx context.Context, division int, entity *PurchaseInvoiceLines) (*PurchaseInvoiceLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchase/PurchaseInvoiceLines", division) // #nosec
	e := &PurchaseInvoiceLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}
