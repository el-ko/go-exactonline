// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchase

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// PurchaseInvoicesEndpoint is responsible for communicating with
// the PurchaseInvoices endpoint of the Purchase service.
type PurchaseInvoicesEndpoint service

// PurchaseInvoices:
// Service: Purchase
// Entity: PurchaseInvoices
// URL: /api/v1/{division}/purchase/PurchaseInvoices
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchasePurchaseInvoices
type PurchaseInvoices struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Amount: Edm.Double
	Amount *float64 `json:"Amount,omitempty"`

	// ContactPerson: Edm.Guid
	ContactPerson *types.GUID `json:"ContactPerson,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// DueDate: Edm.DateTime
	DueDate *types.Date `json:"DueDate,omitempty"`

	// EntryNumber: Edm.Int32
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// ExchangeRate: Edm.Double
	ExchangeRate *float64 `json:"ExchangeRate,omitempty"`

	// FinancialPeriod: Edm.Int16
	FinancialPeriod *int `json:"FinancialPeriod,omitempty"`

	// FinancialYear: Edm.Int16
	FinancialYear *int `json:"FinancialYear,omitempty"`

	// InvoiceDate: Edm.DateTime
	InvoiceDate *types.Date `json:"InvoiceDate,omitempty"`

	// Journal: Edm.String
	Journal *string `json:"Journal,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// PaymentCondition: Edm.String
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentReference: Edm.String
	PaymentReference *string `json:"PaymentReference,omitempty"`

	// PurchaseInvoiceLines: PurchaseInvoiceLines
	PurchaseInvoiceLines *json.RawMessage `json:"PurchaseInvoiceLines,omitempty"`

	// Remarks: Edm.String
	Remarks *string `json:"Remarks,omitempty"`

	// Source: Edm.Int16
	Source *int `json:"Source,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// Supplier: Edm.Guid
	Supplier *types.GUID `json:"Supplier,omitempty"`

	// Type: Edm.Int16
	Type *int `json:"Type,omitempty"`

	// VATAmount: Edm.Double
	VATAmount *float64 `json:"VATAmount,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// YourRef: Edm.String
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *PurchaseInvoices) GetPrimary() *types.GUID {
	return e.ID
}

func (s *PurchaseInvoicesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "purchase/PurchaseInvoices", method)
}

// List the PurchaseInvoices entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseInvoicesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PurchaseInvoices, error) {
	var entities []*PurchaseInvoices
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchase/PurchaseInvoices", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PurchaseInvoices entitiy in the provided division.
func (s *PurchaseInvoicesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*PurchaseInvoices, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchase/PurchaseInvoices", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PurchaseInvoices{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty PurchaseInvoices entity
func (s *PurchaseInvoicesEndpoint) New() *PurchaseInvoices {
	return &PurchaseInvoices{}
}

// Create the PurchaseInvoices entity in the provided division.
func (s *PurchaseInvoicesEndpoint) Create(ctx context.Context, division int, entity *PurchaseInvoices) (*PurchaseInvoices, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchase/PurchaseInvoices", division) // #nosec
	e := &PurchaseInvoices{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the PurchaseInvoices entity in the provided division.
func (s *PurchaseInvoicesEndpoint) Update(ctx context.Context, division int, entity *PurchaseInvoices) (*PurchaseInvoices, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchase/PurchaseInvoices", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &PurchaseInvoices{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the PurchaseInvoices entity in the provided division.
func (s *PurchaseInvoicesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchase/PurchaseInvoices", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
