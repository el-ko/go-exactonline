// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package payroll

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// EmploymentSalariesEndpoint is responsible for communicating with
// the EmploymentSalaries endpoint of the Payroll service.
type EmploymentSalariesEndpoint service

// EmploymentSalaries:
// Service: Payroll
// Entity: EmploymentSalaries
// URL: /api/v1/{division}/payroll/EmploymentSalaries
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollEmploymentSalaries
type EmploymentSalaries struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AverageDaysPerWeek: Edm.Double
	AverageDaysPerWeek *float64 `json:"AverageDaysPerWeek,omitempty"`

	// AverageHoursPerWeek: Edm.Double
	AverageHoursPerWeek *float64 `json:"AverageHoursPerWeek,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Employee: Edm.Guid
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Edm.String
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Edm.Int32
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// Employment: Edm.Guid
	Employment *types.GUID `json:"Employment,omitempty"`

	// EmploymentHID: Edm.Int32
	EmploymentHID *int `json:"EmploymentHID,omitempty"`

	// EmploymentSalaryType: Edm.Int32
	EmploymentSalaryType *int `json:"EmploymentSalaryType,omitempty"`

	// EmploymentSalaryTypeDescription: Edm.String
	EmploymentSalaryTypeDescription *string `json:"EmploymentSalaryTypeDescription,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// Frequency: Edm.Int32
	Frequency *int `json:"Frequency,omitempty"`

	// FulltimeAmount: Edm.Double
	FulltimeAmount *float64 `json:"FulltimeAmount,omitempty"`

	// HourlyWage: Edm.Double
	HourlyWage *float64 `json:"HourlyWage,omitempty"`

	// InternalRate: Edm.Double
	InternalRate *float64 `json:"InternalRate,omitempty"`

	// JobLevel: Edm.Int32
	JobLevel *int `json:"JobLevel,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// ParttimeAmount: Edm.Double
	ParttimeAmount *float64 `json:"ParttimeAmount,omitempty"`

	// ParttimeFactor: Edm.Double
	ParttimeFactor *float64 `json:"ParttimeFactor,omitempty"`

	// Scale: Edm.String
	Scale *string `json:"Scale,omitempty"`

	// Schedule: Edm.Guid
	Schedule *types.GUID `json:"Schedule,omitempty"`

	// ScheduleCode: Edm.String
	ScheduleCode *string `json:"ScheduleCode,omitempty"`

	// ScheduleDescription: Edm.String
	ScheduleDescription *string `json:"ScheduleDescription,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`
}

func (e *EmploymentSalaries) GetPrimary() *types.GUID {
	return e.ID
}

func (s *EmploymentSalariesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "payroll/EmploymentSalaries", method)
}

// List the EmploymentSalaries entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *EmploymentSalariesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*EmploymentSalaries, error) {
	var entities []*EmploymentSalaries
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/EmploymentSalaries", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the EmploymentSalaries entitiy in the provided division.
func (s *EmploymentSalariesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*EmploymentSalaries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/EmploymentSalaries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &EmploymentSalaries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
