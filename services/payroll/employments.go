// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package payroll

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// EmploymentsEndpoint is responsible for communicating with
// the Employments endpoint of the Payroll service.
type EmploymentsEndpoint service

// Employments:
// Service: Payroll
// Entity: Employments
// URL: /api/v1/{division}/payroll/Employments
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollEmployments
type Employments struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Employee: Edm.Guid
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Edm.String
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Edm.Int32
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// HID: Edm.Int32
	HID *int `json:"HID,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// ReasonEnd: Edm.Int32
	ReasonEnd *int `json:"ReasonEnd,omitempty"`

	// ReasonEndDescription: Edm.String
	ReasonEndDescription *string `json:"ReasonEndDescription,omitempty"`

	// ReasonEndFlex: Edm.Int32
	ReasonEndFlex *int `json:"ReasonEndFlex,omitempty"`

	// ReasonEndFlexDescription: Edm.String
	ReasonEndFlexDescription *string `json:"ReasonEndFlexDescription,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// StartDateOrganization: Edm.DateTime
	StartDateOrganization *types.Date `json:"StartDateOrganization,omitempty"`
}

func (e *Employments) GetPrimary() *types.GUID {
	return e.ID
}

func (s *EmploymentsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "payroll/Employments", method)
}

// List the Employments entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *EmploymentsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Employments, error) {
	var entities []*Employments
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/Employments", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Employments entitiy in the provided division.
func (s *EmploymentsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Employments, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/Employments", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Employments{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
