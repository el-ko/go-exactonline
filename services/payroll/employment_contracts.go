// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package payroll

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// EmploymentContractsEndpoint is responsible for communicating with
// the EmploymentContracts endpoint of the Payroll service.
type EmploymentContractsEndpoint service

// EmploymentContracts:
// Service: Payroll
// Entity: EmploymentContracts
// URL: /api/v1/{division}/payroll/EmploymentContracts
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollEmploymentContracts
type EmploymentContracts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// ContractFlexPhase: Edm.Int32
	ContractFlexPhase *int `json:"ContractFlexPhase,omitempty"`

	// ContractFlexPhaseDescription: Edm.String
	ContractFlexPhaseDescription *string `json:"ContractFlexPhaseDescription,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// Employee: Edm.Guid
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Edm.String
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Edm.Int32
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EmployeeType: Edm.Int32
	EmployeeType *int `json:"EmployeeType,omitempty"`

	// EmployeeTypeDescription: Edm.String
	EmployeeTypeDescription *string `json:"EmployeeTypeDescription,omitempty"`

	// Employment: Edm.Guid
	Employment *types.GUID `json:"Employment,omitempty"`

	// EmploymentHID: Edm.Int32
	EmploymentHID *int `json:"EmploymentHID,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// ProbationEndDate: Edm.DateTime
	ProbationEndDate *types.Date `json:"ProbationEndDate,omitempty"`

	// ProbationPeriod: Edm.Int32
	ProbationPeriod *int `json:"ProbationPeriod,omitempty"`

	// ReasonContract: Edm.Int32
	ReasonContract *int `json:"ReasonContract,omitempty"`

	// ReasonContractDescription: Edm.String
	ReasonContractDescription *string `json:"ReasonContractDescription,omitempty"`

	// Sequence: Edm.Int32
	Sequence *int `json:"Sequence,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// TypeDescription: Edm.String
	TypeDescription *string `json:"TypeDescription,omitempty"`
}

func (e *EmploymentContracts) GetPrimary() *types.GUID {
	return e.ID
}

func (s *EmploymentContractsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "payroll/EmploymentContracts", method)
}

// List the EmploymentContracts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *EmploymentContractsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*EmploymentContracts, error) {
	var entities []*EmploymentContracts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/EmploymentContracts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the EmploymentContracts entitiy in the provided division.
func (s *EmploymentContractsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*EmploymentContracts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/EmploymentContracts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &EmploymentContracts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
