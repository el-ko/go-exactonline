// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package payroll

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ActiveEmploymentsEndpoint is responsible for communicating with
// the ActiveEmployments endpoint of the Payroll service.
type ActiveEmploymentsEndpoint service

// ActiveEmployments:
// Service: Payroll
// Entity: ActiveEmployments
// URL: /api/v1/{division}/payroll/ActiveEmployments
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollActiveEmployments
type ActiveEmployments struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AverageDaysPerWeek: Edm.Double
	AverageDaysPerWeek *float64 `json:"AverageDaysPerWeek,omitempty"`

	// AverageHoursPerWeek: Edm.Double
	AverageHoursPerWeek *float64 `json:"AverageHoursPerWeek,omitempty"`

	// Contract: Edm.Guid
	Contract *types.GUID `json:"Contract,omitempty"`

	// ContractDocument: Edm.Guid
	ContractDocument *types.GUID `json:"ContractDocument,omitempty"`

	// ContractEndDate: Edm.DateTime
	ContractEndDate *types.Date `json:"ContractEndDate,omitempty"`

	// ContractProbationEndDate: Edm.DateTime
	ContractProbationEndDate *types.Date `json:"ContractProbationEndDate,omitempty"`

	// ContractProbationPeriod: Edm.Int32
	ContractProbationPeriod *int `json:"ContractProbationPeriod,omitempty"`

	// ContractStartDate: Edm.DateTime
	ContractStartDate *types.Date `json:"ContractStartDate,omitempty"`

	// ContractType: Edm.Int32
	ContractType *int `json:"ContractType,omitempty"`

	// ContractTypeDescription: Edm.String
	ContractTypeDescription *string `json:"ContractTypeDescription,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Department: Edm.Guid
	Department *types.GUID `json:"Department,omitempty"`

	// DepartmentCode: Edm.String
	DepartmentCode *string `json:"DepartmentCode,omitempty"`

	// DepartmentDescription: Edm.String
	DepartmentDescription *string `json:"DepartmentDescription,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Employee: Edm.Guid
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Edm.String
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Edm.Int32
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EmploymentOrganization: Edm.Guid
	EmploymentOrganization *types.GUID `json:"EmploymentOrganization,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// HID: Edm.Int32
	HID *int `json:"HID,omitempty"`

	// HourlyWage: Edm.Double
	HourlyWage *float64 `json:"HourlyWage,omitempty"`

	// InternalRate: Edm.Double
	InternalRate *float64 `json:"InternalRate,omitempty"`

	// Jobtitle: Edm.Guid
	Jobtitle *types.GUID `json:"Jobtitle,omitempty"`

	// JobtitleDescription: Edm.String
	JobtitleDescription *string `json:"JobtitleDescription,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// ReasonEnd: Edm.Int32
	ReasonEnd *int `json:"ReasonEnd,omitempty"`

	// ReasonEndDescription: Edm.String
	ReasonEndDescription *string `json:"ReasonEndDescription,omitempty"`

	// ReasonEndFlex: Edm.Int32
	ReasonEndFlex *int `json:"ReasonEndFlex,omitempty"`

	// ReasonEndFlexDescription: Edm.String
	ReasonEndFlexDescription *string `json:"ReasonEndFlexDescription,omitempty"`

	// Salary: Edm.Guid
	Salary *types.GUID `json:"Salary,omitempty"`

	// Schedule: Edm.Guid
	Schedule *types.GUID `json:"Schedule,omitempty"`

	// ScheduleAverageHours: Edm.Double
	ScheduleAverageHours *float64 `json:"ScheduleAverageHours,omitempty"`

	// ScheduleCode: Edm.String
	ScheduleCode *string `json:"ScheduleCode,omitempty"`

	// ScheduleDays: Edm.Double
	ScheduleDays *float64 `json:"ScheduleDays,omitempty"`

	// ScheduleDescription: Edm.String
	ScheduleDescription *string `json:"ScheduleDescription,omitempty"`

	// ScheduleHours: Edm.Double
	ScheduleHours *float64 `json:"ScheduleHours,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// StartDateOrganization: Edm.DateTime
	StartDateOrganization *types.Date `json:"StartDateOrganization,omitempty"`
}

func (e *ActiveEmployments) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ActiveEmploymentsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "payroll/ActiveEmployments", method)
}

// List the ActiveEmployments entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ActiveEmploymentsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ActiveEmployments, error) {
	var entities []*ActiveEmployments
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/ActiveEmployments", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ActiveEmployments entitiy in the provided division.
func (s *ActiveEmploymentsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ActiveEmployments, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/ActiveEmployments", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ActiveEmployments{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
