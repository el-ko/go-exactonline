// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package financial

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// JournalsEndpoint is responsible for communicating with
// the Journals endpoint of the Financial service.
type JournalsEndpoint service

// Journals:
// Service: Financial
// Entity: Journals
// URL: /api/v1/{division}/financial/Journals
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=FinancialJournals
type Journals struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AllowVariableCurrency: Edm.Boolean
	AllowVariableCurrency *bool `json:"AllowVariableCurrency,omitempty"`

	// AllowVariableExchangeRate: Edm.Boolean
	AllowVariableExchangeRate *bool `json:"AllowVariableExchangeRate,omitempty"`

	// AllowVAT: Edm.Boolean
	AllowVAT *bool `json:"AllowVAT,omitempty"`

	// AutoSave: Edm.Boolean
	AutoSave *bool `json:"AutoSave,omitempty"`

	// Bank: Edm.Guid
	Bank *types.GUID `json:"Bank,omitempty"`

	// BankAccountBICCode: Edm.String
	BankAccountBICCode *string `json:"BankAccountBICCode,omitempty"`

	// BankAccountCountry: Edm.String
	BankAccountCountry *string `json:"BankAccountCountry,omitempty"`

	// BankAccountDescription: Edm.String
	BankAccountDescription *string `json:"BankAccountDescription,omitempty"`

	// BankAccountIBAN: Edm.String
	BankAccountIBAN *string `json:"BankAccountIBAN,omitempty"`

	// BankAccountID: Edm.Guid
	BankAccountID *types.GUID `json:"BankAccountID,omitempty"`

	// BankAccountIncludingMask: Edm.String
	BankAccountIncludingMask *string `json:"BankAccountIncludingMask,omitempty"`

	// BankAccountUseSEPA: Edm.Boolean
	BankAccountUseSEPA *bool `json:"BankAccountUseSEPA,omitempty"`

	// BankAccountUseSepaDirectDebit: Edm.Boolean
	BankAccountUseSepaDirectDebit *bool `json:"BankAccountUseSepaDirectDebit,omitempty"`

	// BankName: Edm.String
	BankName *string `json:"BankName,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// CurrencyDescription: Edm.String
	CurrencyDescription *string `json:"CurrencyDescription,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// GLAccount: Edm.Guid
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// GLAccountCode: Edm.String
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription: Edm.String
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`

	// GLAccountType: Edm.Int32
	GLAccountType *int `json:"GLAccountType,omitempty"`

	// IsBlocked: Edm.Boolean
	IsBlocked *bool `json:"IsBlocked,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PaymentInTransitAccount: Edm.Guid
	PaymentInTransitAccount *types.GUID `json:"PaymentInTransitAccount,omitempty"`

	// PaymentServiceAccountIdentifier: Edm.String
	PaymentServiceAccountIdentifier *string `json:"PaymentServiceAccountIdentifier,omitempty"`

	// PaymentServiceProvider: Edm.Int32
	PaymentServiceProvider *int `json:"PaymentServiceProvider,omitempty"`

	// PaymentServiceProviderName: Edm.String
	PaymentServiceProviderName *string `json:"PaymentServiceProviderName,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`
}

func (e *Journals) GetPrimary() *types.GUID {
	return e.ID
}

func (s *JournalsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "financial/Journals", method)
}

// List the Journals entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *JournalsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Journals, error) {
	var entities []*Journals
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/Journals", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Journals entitiy in the provided division.
func (s *JournalsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Journals, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/Journals", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Journals{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty Journals entity
func (s *JournalsEndpoint) New() *Journals {
	return &Journals{}
}

// Create the Journals entity in the provided division.
func (s *JournalsEndpoint) Create(ctx context.Context, division int, entity *Journals) (*Journals, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/Journals", division) // #nosec
	e := &Journals{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the Journals entity in the provided division.
func (s *JournalsEndpoint) Update(ctx context.Context, division int, entity *Journals) (*Journals, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/Journals", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &Journals{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the Journals entity in the provided division.
func (s *JournalsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/Journals", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
