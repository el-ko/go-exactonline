// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package financial

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ReturnsEndpoint is responsible for communicating with
// the Returns endpoint of the Financial service.
type ReturnsEndpoint service

// Returns:
// Service: Financial
// Entity: Returns
// URL: /api/v1/{division}/read/financial/Returns
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadFinancialReturns
type Returns struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// DocumentID: Edm.Guid
	DocumentID *types.GUID `json:"DocumentID,omitempty"`

	// Amount: Edm.Double
	Amount *float64 `json:"Amount,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// DocumentViewUrl: Edm.String
	DocumentViewUrl *string `json:"DocumentViewUrl,omitempty"`

	// DueDate: Edm.DateTime
	DueDate *types.Date `json:"DueDate,omitempty"`

	// Frequency: Edm.String
	Frequency *string `json:"Frequency,omitempty"`

	// PayrollDeclarationType: Edm.String
	PayrollDeclarationType *string `json:"PayrollDeclarationType,omitempty"`

	// Period: Edm.Int32
	Period *int `json:"Period,omitempty"`

	// PeriodDescription: Edm.String
	PeriodDescription *string `json:"PeriodDescription,omitempty"`

	// Request: Edm.Guid
	Request *types.GUID `json:"Request,omitempty"`

	// Status: Edm.Int32
	Status *int `json:"Status,omitempty"`

	// Subject: Edm.String
	Subject *string `json:"Subject,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// Year: Edm.Int32
	Year *int `json:"Year,omitempty"`
}

func (e *Returns) GetPrimary() *types.GUID {
	return e.DocumentID
}

func (s *ReturnsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "financial/Returns", method)
}

// List the Returns entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ReturnsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Returns, error) {
	var entities []*Returns
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/Returns", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Returns entitiy in the provided division.
func (s *ReturnsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Returns, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/Returns", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Returns{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
