// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package financial

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// GLAccountsEndpoint is responsible for communicating with
// the GLAccounts endpoint of the Financial service.
type GLAccountsEndpoint service

// GLAccounts:
// Service: Financial
// Entity: GLAccounts
// URL: /api/v1/{division}/financial/GLAccounts
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=FinancialGLAccounts
type GLAccounts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AllowCostsInSales: Edm.Byte
	AllowCostsInSales *byte `json:"AllowCostsInSales,omitempty"`

	// AssimilatedVATBox: Edm.Int16
	AssimilatedVATBox *int `json:"AssimilatedVATBox,omitempty"`

	// BalanceSide: Edm.String
	BalanceSide *string `json:"BalanceSide,omitempty"`

	// BalanceType: Edm.String
	BalanceType *string `json:"BalanceType,omitempty"`

	// BelcotaxType: Edm.Int32
	BelcotaxType *int `json:"BelcotaxType,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// Compress: Edm.Boolean
	Compress *bool `json:"Compress,omitempty"`

	// Costcenter: Edm.String
	Costcenter *string `json:"Costcenter,omitempty"`

	// CostcenterDescription: Edm.String
	CostcenterDescription *string `json:"CostcenterDescription,omitempty"`

	// Costunit: Edm.String
	Costunit *string `json:"Costunit,omitempty"`

	// CostunitDescription: Edm.String
	CostunitDescription *string `json:"CostunitDescription,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// DeductibilityPercentages: DeductibilityPercentages
	DeductibilityPercentages *json.RawMessage `json:"DeductibilityPercentages,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// DescriptionTermID: Edm.Int32
	DescriptionTermID *int `json:"DescriptionTermID,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// ExcludeVATListing: Edm.Byte
	ExcludeVATListing *byte `json:"ExcludeVATListing,omitempty"`

	// ExpenseNonDeductiblePercentage: Edm.Double
	ExpenseNonDeductiblePercentage *float64 `json:"ExpenseNonDeductiblePercentage,omitempty"`

	// IsBlocked: Edm.Boolean
	IsBlocked *bool `json:"IsBlocked,omitempty"`

	// Matching: Edm.Boolean
	Matching *bool `json:"Matching,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PrivateGLAccount: Edm.Guid
	PrivateGLAccount *types.GUID `json:"PrivateGLAccount,omitempty"`

	// PrivatePercentage: Edm.Double
	PrivatePercentage *float64 `json:"PrivatePercentage,omitempty"`

	// ReportingCode: Edm.String
	ReportingCode *string `json:"ReportingCode,omitempty"`

	// RevalueCurrency: Edm.Boolean
	RevalueCurrency *bool `json:"RevalueCurrency,omitempty"`

	// SearchCode: Edm.String
	SearchCode *string `json:"SearchCode,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// TypeDescription: Edm.String
	TypeDescription *string `json:"TypeDescription,omitempty"`

	// UseCostcenter: Edm.Byte
	UseCostcenter *byte `json:"UseCostcenter,omitempty"`

	// UseCostunit: Edm.Byte
	UseCostunit *byte `json:"UseCostunit,omitempty"`

	// VATCode: Edm.String
	VATCode *string `json:"VATCode,omitempty"`

	// VATDescription: Edm.String
	VATDescription *string `json:"VATDescription,omitempty"`

	// VATGLAccountType: Edm.String
	VATGLAccountType *string `json:"VATGLAccountType,omitempty"`

	// VATNonDeductibleGLAccount: Edm.Guid
	VATNonDeductibleGLAccount *types.GUID `json:"VATNonDeductibleGLAccount,omitempty"`

	// VATNonDeductiblePercentage: Edm.Double
	VATNonDeductiblePercentage *float64 `json:"VATNonDeductiblePercentage,omitempty"`

	// VATSystem: Edm.String
	VATSystem *string `json:"VATSystem,omitempty"`

	// YearEndCostGLAccount: Edm.Guid
	YearEndCostGLAccount *types.GUID `json:"YearEndCostGLAccount,omitempty"`

	// YearEndReflectionGLAccount: Edm.Guid
	YearEndReflectionGLAccount *types.GUID `json:"YearEndReflectionGLAccount,omitempty"`
}

func (e *GLAccounts) GetPrimary() *types.GUID {
	return e.ID
}

func (s *GLAccountsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "financial/GLAccounts", method)
}

// List the GLAccounts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *GLAccountsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*GLAccounts, error) {
	var entities []*GLAccounts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/GLAccounts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the GLAccounts entitiy in the provided division.
func (s *GLAccountsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*GLAccounts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/GLAccounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &GLAccounts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty GLAccounts entity
func (s *GLAccountsEndpoint) New() *GLAccounts {
	return &GLAccounts{}
}

// Create the GLAccounts entity in the provided division.
func (s *GLAccountsEndpoint) Create(ctx context.Context, division int, entity *GLAccounts) (*GLAccounts, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/GLAccounts", division) // #nosec
	e := &GLAccounts{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the GLAccounts entity in the provided division.
func (s *GLAccountsEndpoint) Update(ctx context.Context, division int, entity *GLAccounts) (*GLAccounts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/GLAccounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &GLAccounts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the GLAccounts entity in the provided division.
func (s *GLAccountsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/GLAccounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
