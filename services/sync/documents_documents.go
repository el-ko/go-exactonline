// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// DocumentsDocumentsEndpoint is responsible for communicating with
// the DocumentsDocuments endpoint of the Sync service.
type DocumentsDocumentsEndpoint service

// DocumentsDocuments:
// Service: Sync
// Entity: DocumentsDocuments
// URL: /api/v1/{division}/sync/Documents/Documents
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncDocumentsDocuments
type DocumentsDocuments struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Edm.Int64
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode: Edm.String
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// Body: Edm.String
	Body *string `json:"Body,omitempty"`

	// Category: Edm.Guid
	Category *types.GUID `json:"Category,omitempty"`

	// CategoryDescription: Edm.String
	CategoryDescription *string `json:"CategoryDescription,omitempty"`

	// Contact: Edm.Guid
	Contact *types.GUID `json:"Contact,omitempty"`

	// ContactFullName: Edm.String
	ContactFullName *string `json:"ContactFullName,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// DocumentDate: Edm.DateTime
	DocumentDate *types.Date `json:"DocumentDate,omitempty"`

	// DocumentFolder: Edm.Guid
	DocumentFolder *types.GUID `json:"DocumentFolder,omitempty"`

	// DocumentFolderCode: Edm.String
	DocumentFolderCode *string `json:"DocumentFolderCode,omitempty"`

	// DocumentFolderDescription: Edm.String
	DocumentFolderDescription *string `json:"DocumentFolderDescription,omitempty"`

	// DocumentViewUrl: Edm.String
	DocumentViewUrl *string `json:"DocumentViewUrl,omitempty"`

	// ExpiryDate: Edm.DateTime
	ExpiryDate *types.Date `json:"ExpiryDate,omitempty"`

	// FinancialTransactionEntryID: Edm.Guid
	FinancialTransactionEntryID *types.GUID `json:"FinancialTransactionEntryID,omitempty"`

	// HasEmptyBody: Edm.Boolean
	HasEmptyBody *bool `json:"HasEmptyBody,omitempty"`

	// HID: Edm.Int32
	HID *int `json:"HID,omitempty"`

	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// InheritShare: Edm.Boolean
	InheritShare *bool `json:"InheritShare,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemMaterial: Edm.Guid
	ItemMaterial *types.GUID `json:"ItemMaterial,omitempty"`

	// ItemRoutingStep: Edm.Guid
	ItemRoutingStep *types.GUID `json:"ItemRoutingStep,omitempty"`

	// Language: Edm.String
	Language *string `json:"Language,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Opportunity: Edm.Guid
	Opportunity *types.GUID `json:"Opportunity,omitempty"`

	// Project: Edm.Guid
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Edm.String
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Edm.String
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// ProposedEntryStatus: Edm.Int16
	ProposedEntryStatus *int `json:"ProposedEntryStatus,omitempty"`

	// SalesInvoiceNumber: Edm.Int32
	SalesInvoiceNumber *int `json:"SalesInvoiceNumber,omitempty"`

	// SalesOrderNumber: Edm.Int32
	SalesOrderNumber *int `json:"SalesOrderNumber,omitempty"`

	// SendMethod: Edm.Int32
	SendMethod *int `json:"SendMethod,omitempty"`

	// ShopOrderNumber: Edm.Int32
	ShopOrderNumber *int `json:"ShopOrderNumber,omitempty"`

	// Subject: Edm.String
	Subject *string `json:"Subject,omitempty"`

	// TeamsMeetingId: Edm.String
	TeamsMeetingId *string `json:"TeamsMeetingId,omitempty"`

	// Type: Edm.Int32
	Type *int `json:"Type,omitempty"`

	// TypeDescription: Edm.String
	TypeDescription *string `json:"TypeDescription,omitempty"`
}

func (e *DocumentsDocuments) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *DocumentsDocumentsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Documents/Documents", method)
}

// List the DocumentsDocuments entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *DocumentsDocumentsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*DocumentsDocuments, error) {
	var entities []*DocumentsDocuments
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Documents/Documents", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the DocumentsDocuments entitiy in the provided division.
func (s *DocumentsDocumentsEndpoint) Get(ctx context.Context, division int, id *int64) (*DocumentsDocuments, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Documents/Documents", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &DocumentsDocuments{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
