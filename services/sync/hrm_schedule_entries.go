// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// HRMScheduleEntriesEndpoint is responsible for communicating with
// the HRMScheduleEntries endpoint of the Sync service.
type HRMScheduleEntriesEndpoint service

// HRMScheduleEntries:
// Service: Sync
// Entity: HRMScheduleEntries
// URL: /api/v1/{division}/sync/HRM/ScheduleEntries
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncHRMScheduleEntries
type HRMScheduleEntries struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Edm.Int64
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Day: Edm.Int32
	Day *int `json:"Day,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EndTime: Edm.String
	EndTime *string `json:"EndTime,omitempty"`

	// Hours: Edm.String
	Hours *string `json:"Hours,omitempty"`

	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Schedule: Edm.Guid
	Schedule *types.GUID `json:"Schedule,omitempty"`

	// ScheduleActivityType: Edm.Int32
	ScheduleActivityType *int `json:"ScheduleActivityType,omitempty"`

	// StartTime: Edm.String
	StartTime *string `json:"StartTime,omitempty"`

	// WeekNumber: Edm.Int32
	WeekNumber *int `json:"WeekNumber,omitempty"`
}

func (e *HRMScheduleEntries) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *HRMScheduleEntriesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "HRM/ScheduleEntries", method)
}

// List the HRMScheduleEntries entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *HRMScheduleEntriesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*HRMScheduleEntries, error) {
	var entities []*HRMScheduleEntries
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/HRM/ScheduleEntries", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the HRMScheduleEntries entitiy in the provided division.
func (s *HRMScheduleEntriesEndpoint) Get(ctx context.Context, division int, id *int64) (*HRMScheduleEntries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/HRM/ScheduleEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &HRMScheduleEntries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
