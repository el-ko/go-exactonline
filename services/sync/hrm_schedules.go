// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// HRMSchedulesEndpoint is responsible for communicating with
// the HRMSchedules endpoint of the Sync service.
type HRMSchedulesEndpoint service

// HRMSchedules:
// Service: Sync
// Entity: HRMSchedules
// URL: /api/v1/{division}/sync/HRM/Schedules
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncHRMSchedules
type HRMSchedules struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Edm.Int64
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// AverageHours: Edm.Double
	AverageHours *float64 `json:"AverageHours,omitempty"`

	// BillabilityTarget: Edm.Double
	BillabilityTarget *float64 `json:"BillabilityTarget,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Days: Edm.Double
	Days *float64 `json:"Days,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Employment: Edm.Guid
	Employment *types.GUID `json:"Employment,omitempty"`

	// EmploymentHID: Edm.Int32
	EmploymentHID *int `json:"EmploymentHID,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// Hours: Edm.Double
	Hours *float64 `json:"Hours,omitempty"`

	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// LeaveHoursCompensation: Edm.Double
	LeaveHoursCompensation *float64 `json:"LeaveHoursCompensation,omitempty"`

	// Main: Edm.Byte
	Main *byte `json:"Main,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PaymentParttimeFactor: Edm.Double
	PaymentParttimeFactor *float64 `json:"PaymentParttimeFactor,omitempty"`

	// ScheduleType: Edm.Int32
	ScheduleType *int `json:"ScheduleType,omitempty"`

	// ScheduleTypeDescription: Edm.String
	ScheduleTypeDescription *string `json:"ScheduleTypeDescription,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// StartWeek: Edm.Int32
	StartWeek *int `json:"StartWeek,omitempty"`
}

func (e *HRMSchedules) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *HRMSchedulesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "HRM/Schedules", method)
}

// List the HRMSchedules entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *HRMSchedulesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*HRMSchedules, error) {
	var entities []*HRMSchedules
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/HRM/Schedules", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the HRMSchedules entitiy in the provided division.
func (s *HRMSchedulesEndpoint) Get(ctx context.Context, division int, id *int64) (*HRMSchedules, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/HRM/Schedules", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &HRMSchedules{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
