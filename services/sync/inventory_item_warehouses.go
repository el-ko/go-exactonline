// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// InventoryItemWarehousesEndpoint is responsible for communicating with
// the InventoryItemWarehouses endpoint of the Sync service.
type InventoryItemWarehousesEndpoint service

// InventoryItemWarehouses:
// Service: Sync
// Entity: InventoryItemWarehouses
// URL: /api/v1/{division}/sync/Inventory/ItemWarehouses
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncInventoryItemWarehouses
type InventoryItemWarehouses struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Edm.Int64
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// CountingCycle: Edm.Int16
	CountingCycle *int `json:"CountingCycle,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// DefaultStorageLocation: Edm.Guid
	DefaultStorageLocation *types.GUID `json:"DefaultStorageLocation,omitempty"`

	// DefaultStorageLocationCode: Edm.String
	DefaultStorageLocationCode *string `json:"DefaultStorageLocationCode,omitempty"`

	// DefaultStorageLocationDescription: Edm.String
	DefaultStorageLocationDescription *string `json:"DefaultStorageLocationDescription,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// MaximumStock: Edm.Double
	MaximumStock *float64 `json:"MaximumStock,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OrderPolicy: Edm.Int16
	OrderPolicy *int `json:"OrderPolicy,omitempty"`

	// Period: Edm.Int16
	Period *int `json:"Period,omitempty"`

	// ReorderPoint: Edm.Double
	ReorderPoint *float64 `json:"ReorderPoint,omitempty"`

	// ReorderQuantity: Edm.Double
	ReorderQuantity *float64 `json:"ReorderQuantity,omitempty"`

	// ReplenishmentType: Edm.Int16
	ReplenishmentType *int `json:"ReplenishmentType,omitempty"`

	// ReservedStock: Edm.Double
	ReservedStock *float64 `json:"ReservedStock,omitempty"`

	// SafetyStock: Edm.Double
	SafetyStock *float64 `json:"SafetyStock,omitempty"`

	// StorageLocationSequenceNumber: Edm.Int32
	StorageLocationSequenceNumber *int `json:"StorageLocationSequenceNumber,omitempty"`

	// Warehouse: Edm.Guid
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Edm.String
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Edm.String
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *InventoryItemWarehouses) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *InventoryItemWarehousesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Inventory/ItemWarehouses", method)
}

// List the InventoryItemWarehouses entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *InventoryItemWarehousesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*InventoryItemWarehouses, error) {
	var entities []*InventoryItemWarehouses
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Inventory/ItemWarehouses", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the InventoryItemWarehouses entitiy in the provided division.
func (s *InventoryItemWarehousesEndpoint) Get(ctx context.Context, division int, id *int64) (*InventoryItemWarehouses, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Inventory/ItemWarehouses", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &InventoryItemWarehouses{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
