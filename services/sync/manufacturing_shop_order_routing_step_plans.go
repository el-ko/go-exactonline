// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ManufacturingShopOrderRoutingStepPlansEndpoint is responsible for communicating with
// the ManufacturingShopOrderRoutingStepPlans endpoint of the Sync service.
type ManufacturingShopOrderRoutingStepPlansEndpoint service

// ManufacturingShopOrderRoutingStepPlans:
// Service: Sync
// Entity: ManufacturingShopOrderRoutingStepPlans
// URL: /api/v1/{division}/sync/Manufacturing/ShopOrderRoutingStepPlans
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncManufacturingShopOrderRoutingStepPlans
type ManufacturingShopOrderRoutingStepPlans struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Edm.Int64
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// AccountNumber: Edm.String
	AccountNumber *string `json:"AccountNumber,omitempty"`

	// AttendedPercentage: Edm.Double
	AttendedPercentage *float64 `json:"AttendedPercentage,omitempty"`

	// Backflush: Edm.Byte
	Backflush *byte `json:"Backflush,omitempty"`

	// CostPerItem: Edm.Double
	CostPerItem *float64 `json:"CostPerItem,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EfficiencyPercentage: Edm.Double
	EfficiencyPercentage *float64 `json:"EfficiencyPercentage,omitempty"`

	// FactorType: Edm.Int32
	FactorType *int `json:"FactorType,omitempty"`

	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// ItemRoutingStep: Edm.Guid
	ItemRoutingStep *types.GUID `json:"ItemRoutingStep,omitempty"`

	// LineNumber: Edm.Int32
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Operation: Edm.Guid
	Operation *types.GUID `json:"Operation,omitempty"`

	// OperationCode: Edm.String
	OperationCode *string `json:"OperationCode,omitempty"`

	// OperationDescription: Edm.String
	OperationDescription *string `json:"OperationDescription,omitempty"`

	// OperationResource: Edm.Guid
	OperationResource *types.GUID `json:"OperationResource,omitempty"`

	// PlannedEndDate: Edm.DateTime
	PlannedEndDate *types.Date `json:"PlannedEndDate,omitempty"`

	// PlannedRunHours: Edm.Double
	PlannedRunHours *float64 `json:"PlannedRunHours,omitempty"`

	// PlannedSetupHours: Edm.Double
	PlannedSetupHours *float64 `json:"PlannedSetupHours,omitempty"`

	// PlannedStartDate: Edm.DateTime
	PlannedStartDate *types.Date `json:"PlannedStartDate,omitempty"`

	// PlannedTotalHours: Edm.Double
	PlannedTotalHours *float64 `json:"PlannedTotalHours,omitempty"`

	// PurchaseUnit: Edm.String
	PurchaseUnit *string `json:"PurchaseUnit,omitempty"`

	// PurchaseUnitFactor: Edm.Double
	PurchaseUnitFactor *float64 `json:"PurchaseUnitFactor,omitempty"`

	// PurchaseUnitPriceFC: Edm.Double
	PurchaseUnitPriceFC *float64 `json:"PurchaseUnitPriceFC,omitempty"`

	// PurchaseUnitQuantity: Edm.Double
	PurchaseUnitQuantity *float64 `json:"PurchaseUnitQuantity,omitempty"`

	// RoutingStepType: Edm.Int32
	RoutingStepType *int `json:"RoutingStepType,omitempty"`

	// Run: Edm.Double
	Run *float64 `json:"Run,omitempty"`

	// RunMethod: Edm.Int32
	RunMethod *int `json:"RunMethod,omitempty"`

	// RunMethodDescription: Edm.String
	RunMethodDescription *string `json:"RunMethodDescription,omitempty"`

	// Setup: Edm.Double
	Setup *float64 `json:"Setup,omitempty"`

	// SetupUnit: Edm.String
	SetupUnit *string `json:"SetupUnit,omitempty"`

	// ShopOrder: Edm.Guid
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// Status: Edm.Int32
	Status *int `json:"Status,omitempty"`

	// StatusDescription: Edm.String
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// SubcontractedLeadDays: Edm.Int32
	SubcontractedLeadDays *int `json:"SubcontractedLeadDays,omitempty"`

	// TotalCostDC: Edm.Double
	TotalCostDC *float64 `json:"TotalCostDC,omitempty"`

	// Workcenter: Edm.Guid
	Workcenter *types.GUID `json:"Workcenter,omitempty"`

	// WorkcenterCode: Edm.String
	WorkcenterCode *string `json:"WorkcenterCode,omitempty"`

	// WorkcenterDescription: Edm.String
	WorkcenterDescription *string `json:"WorkcenterDescription,omitempty"`
}

func (e *ManufacturingShopOrderRoutingStepPlans) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *ManufacturingShopOrderRoutingStepPlansEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Manufacturing/ShopOrderRoutingStepPlans", method)
}

// List the ManufacturingShopOrderRoutingStepPlans entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ManufacturingShopOrderRoutingStepPlansEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ManufacturingShopOrderRoutingStepPlans, error) {
	var entities []*ManufacturingShopOrderRoutingStepPlans
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Manufacturing/ShopOrderRoutingStepPlans", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ManufacturingShopOrderRoutingStepPlans entitiy in the provided division.
func (s *ManufacturingShopOrderRoutingStepPlansEndpoint) Get(ctx context.Context, division int, id *int64) (*ManufacturingShopOrderRoutingStepPlans, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Manufacturing/ShopOrderRoutingStepPlans", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ManufacturingShopOrderRoutingStepPlans{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
