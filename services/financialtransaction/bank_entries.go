// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package financialtransaction

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// BankEntriesEndpoint is responsible for communicating with
// the BankEntries endpoint of the FinancialTransaction service.
type BankEntriesEndpoint service

// BankEntries:
// Service: FinancialTransaction
// Entity: BankEntries
// URL: /api/v1/{division}/financialtransaction/BankEntries
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=FinancialTransactionBankEntries
type BankEntries struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// EntryID: Edm.Guid
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// BankEntryLines: BankEntryLines
	BankEntryLines *json.RawMessage `json:"BankEntryLines,omitempty"`

	// BankStatementDocument: Edm.Guid
	BankStatementDocument *types.GUID `json:"BankStatementDocument,omitempty"`

	// BankStatementDocumentNumber: Edm.Int32
	BankStatementDocumentNumber *int `json:"BankStatementDocumentNumber,omitempty"`

	// BankStatementDocumentSubject: Edm.String
	BankStatementDocumentSubject *string `json:"BankStatementDocumentSubject,omitempty"`

	// ClosingBalanceFC: Edm.Double
	ClosingBalanceFC *float64 `json:"ClosingBalanceFC,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EntryNumber: Edm.Int32
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// FinancialPeriod: Edm.Int16
	FinancialPeriod *int `json:"FinancialPeriod,omitempty"`

	// FinancialYear: Edm.Int16
	FinancialYear *int `json:"FinancialYear,omitempty"`

	// JournalCode: Edm.String
	JournalCode *string `json:"JournalCode,omitempty"`

	// JournalDescription: Edm.String
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// OpeningBalanceFC: Edm.Double
	OpeningBalanceFC *float64 `json:"OpeningBalanceFC,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// StatusDescription: Edm.String
	StatusDescription *string `json:"StatusDescription,omitempty"`
}

func (e *BankEntries) GetPrimary() *types.GUID {
	return e.EntryID
}

func (s *BankEntriesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "financialtransaction/BankEntries", method)
}

// List the BankEntries entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *BankEntriesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*BankEntries, error) {
	var entities []*BankEntries
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financialtransaction/BankEntries", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the BankEntries entitiy in the provided division.
func (s *BankEntriesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*BankEntries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financialtransaction/BankEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &BankEntries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty BankEntries entity
func (s *BankEntriesEndpoint) New() *BankEntries {
	return &BankEntries{}
}

// Create the BankEntries entity in the provided division.
func (s *BankEntriesEndpoint) Create(ctx context.Context, division int, entity *BankEntries) (*BankEntries, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financialtransaction/BankEntries", division) // #nosec
	e := &BankEntries{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Delete the BankEntries entity in the provided division.
func (s *BankEntriesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financialtransaction/BankEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
