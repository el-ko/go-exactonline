// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package assets

import (
	"context"
	"encoding/json"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// AssetsEndpoint is responsible for communicating with
// the Assets endpoint of the Assets service.
type AssetsEndpoint service

// Assets:
// Service: Assets
// Entity: Assets
// URL: /api/v1/{division}/assets/Assets
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=AssetsAssets
type Assets struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// AlreadyDepreciated: Edm.Byte
	AlreadyDepreciated *byte `json:"AlreadyDepreciated,omitempty"`

	// AssetFrom: Edm.Guid
	AssetFrom *types.GUID `json:"AssetFrom,omitempty"`

	// AssetFromDescription: Edm.String
	AssetFromDescription *string `json:"AssetFromDescription,omitempty"`

	// AssetGroup: Edm.Guid
	AssetGroup *types.GUID `json:"AssetGroup,omitempty"`

	// AssetGroupCode: Edm.String
	AssetGroupCode *string `json:"AssetGroupCode,omitempty"`

	// AssetGroupDescription: Edm.String
	AssetGroupDescription *string `json:"AssetGroupDescription,omitempty"`

	// CatalogueValue: Edm.Double
	CatalogueValue *float64 `json:"CatalogueValue,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// CommercialBuildingValues: CommercialBuildingValues
	CommercialBuildingValues *json.RawMessage `json:"CommercialBuildingValues,omitempty"`

	// Costcenter: Edm.String
	Costcenter *string `json:"Costcenter,omitempty"`

	// CostcenterDescription: Edm.String
	CostcenterDescription *string `json:"CostcenterDescription,omitempty"`

	// Costunit: Edm.String
	Costunit *string `json:"Costunit,omitempty"`

	// CostunitDescription: Edm.String
	CostunitDescription *string `json:"CostunitDescription,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField: Edm.String
	CustomField *string `json:"CustomField,omitempty"`

	// DeductionPercentage: Edm.Double
	DeductionPercentage *float64 `json:"DeductionPercentage,omitempty"`

	// DepreciatedAmount: Edm.Double
	DepreciatedAmount *float64 `json:"DepreciatedAmount,omitempty"`

	// DepreciatedPeriods: Edm.Int32
	DepreciatedPeriods *int `json:"DepreciatedPeriods,omitempty"`

	// DepreciatedStartDate: Edm.DateTime
	DepreciatedStartDate *types.Date `json:"DepreciatedStartDate,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// EngineEmission: Edm.Int16
	EngineEmission *int `json:"EngineEmission,omitempty"`

	// EngineType: Edm.Int16
	EngineType *int `json:"EngineType,omitempty"`

	// GLTransactionLine: Edm.Guid
	GLTransactionLine *types.GUID `json:"GLTransactionLine,omitempty"`

	// GLTransactionLineDescription: Edm.String
	GLTransactionLineDescription *string `json:"GLTransactionLineDescription,omitempty"`

	// InvestmentAccount: Edm.Guid
	InvestmentAccount *types.GUID `json:"InvestmentAccount,omitempty"`

	// InvestmentAccountCode: Edm.String
	InvestmentAccountCode *string `json:"InvestmentAccountCode,omitempty"`

	// InvestmentAccountName: Edm.String
	InvestmentAccountName *string `json:"InvestmentAccountName,omitempty"`

	// InvestmentAmountDC: Edm.Double
	InvestmentAmountDC *float64 `json:"InvestmentAmountDC,omitempty"`

	// InvestmentAmountFC: Edm.Double
	InvestmentAmountFC *float64 `json:"InvestmentAmountFC,omitempty"`

	// InvestmentCurrency: Edm.String
	InvestmentCurrency *string `json:"InvestmentCurrency,omitempty"`

	// InvestmentCurrencyDescription: Edm.String
	InvestmentCurrencyDescription *string `json:"InvestmentCurrencyDescription,omitempty"`

	// InvestmentDate: Edm.DateTime
	InvestmentDate *types.Date `json:"InvestmentDate,omitempty"`

	// InvestmentDeduction: Edm.Int16
	InvestmentDeduction *int `json:"InvestmentDeduction,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// Parent: Edm.Guid
	Parent *types.GUID `json:"Parent,omitempty"`

	// ParentCode: Edm.String
	ParentCode *string `json:"ParentCode,omitempty"`

	// ParentDescription: Edm.String
	ParentDescription *string `json:"ParentDescription,omitempty"`

	// Picture: Edm.Binary
	Picture *[]byte `json:"Picture,omitempty"`

	// PictureFileName: Edm.String
	PictureFileName *string `json:"PictureFileName,omitempty"`

	// PrimaryMethod: Edm.Guid
	PrimaryMethod *types.GUID `json:"PrimaryMethod,omitempty"`

	// PrimaryMethodCode: Edm.String
	PrimaryMethodCode *string `json:"PrimaryMethodCode,omitempty"`

	// PrimaryMethodDescription: Edm.String
	PrimaryMethodDescription *string `json:"PrimaryMethodDescription,omitempty"`

	// ResidualValue: Edm.Double
	ResidualValue *float64 `json:"ResidualValue,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// TransactionEntryID: Edm.Guid
	TransactionEntryID *types.GUID `json:"TransactionEntryID,omitempty"`

	// TransactionEntryNo: Edm.Int32
	TransactionEntryNo *int `json:"TransactionEntryNo,omitempty"`

	// Type: Edm.String
	Type *string `json:"Type,omitempty"`
}

func (e *Assets) GetPrimary() *types.GUID {
	return e.ID
}

func (s *AssetsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "assets/Assets", method)
}

// List the Assets entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *AssetsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Assets, error) {
	var entities []*Assets
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/assets/Assets", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Assets entitiy in the provided division.
func (s *AssetsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Assets, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/assets/Assets", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Assets{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
