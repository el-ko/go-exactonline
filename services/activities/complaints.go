// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package activities

import (
	"context"
	"encoding/json"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ComplaintsEndpoint is responsible for communicating with
// the Complaints endpoint of the Activities service.
type ComplaintsEndpoint service

// Complaints:
// Service: Activities
// Entity: Complaints
// URL: /api/v1/{division}/activities/Complaints
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ActivitiesComplaints
type Complaints struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// AssignedTo: Edm.Guid
	AssignedTo *types.GUID `json:"AssignedTo,omitempty"`

	// AssignedToFullName: Edm.String
	AssignedToFullName *string `json:"AssignedToFullName,omitempty"`

	// Attachments: RequestAttachments
	Attachments *json.RawMessage `json:"Attachments,omitempty"`

	// Complaint: Edm.String
	Complaint *string `json:"Complaint,omitempty"`

	// Contact: Edm.Guid
	Contact *types.GUID `json:"Contact,omitempty"`

	// ContactFullName: Edm.String
	ContactFullName *string `json:"ContactFullName,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentSubject: Edm.String
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// HID: Edm.Int32
	HID *int `json:"HID,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// NextAction: Edm.DateTime
	NextAction *types.Date `json:"NextAction,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// ReceiptDate: Edm.DateTime
	ReceiptDate *types.Date `json:"ReceiptDate,omitempty"`

	// Status: Edm.Int32
	Status *int `json:"Status,omitempty"`

	// StatusDescription: Edm.String
	StatusDescription *string `json:"StatusDescription,omitempty"`
}

func (e *Complaints) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ComplaintsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "activities/Complaints", method)
}

// List the Complaints entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ComplaintsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Complaints, error) {
	var entities []*Complaints
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/activities/Complaints", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Complaints entitiy in the provided division.
func (s *ComplaintsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Complaints, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/activities/Complaints", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Complaints{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty Complaints entity
func (s *ComplaintsEndpoint) New() *Complaints {
	return &Complaints{}
}

// Create the Complaints entity in the provided division.
func (s *ComplaintsEndpoint) Create(ctx context.Context, division int, entity *Complaints) (*Complaints, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/activities/Complaints", division) // #nosec
	e := &Complaints{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}
