// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package cashflow

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// PaymentConditionsEndpoint is responsible for communicating with
// the PaymentConditions endpoint of the Cashflow service.
type PaymentConditionsEndpoint service

// PaymentConditions:
// Service: Cashflow
// Entity: PaymentConditions
// URL: /api/v1/{division}/cashflow/PaymentConditions
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CashflowPaymentConditions
type PaymentConditions struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CreditManagementScenario: Edm.Guid
	CreditManagementScenario *types.GUID `json:"CreditManagementScenario,omitempty"`

	// CreditManagementScenarioCode: Edm.String
	CreditManagementScenarioCode *string `json:"CreditManagementScenarioCode,omitempty"`

	// CreditManagementScenarioDescription: Edm.String
	CreditManagementScenarioDescription *string `json:"CreditManagementScenarioDescription,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// DiscountCalculation: Edm.String
	DiscountCalculation *string `json:"DiscountCalculation,omitempty"`

	// DiscountPaymentDays: Edm.Int32
	DiscountPaymentDays *int `json:"DiscountPaymentDays,omitempty"`

	// DiscountPercentage: Edm.Double
	DiscountPercentage *float64 `json:"DiscountPercentage,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PaymentDays: Edm.Int32
	PaymentDays *int `json:"PaymentDays,omitempty"`

	// PaymentDiscountType: Edm.String
	PaymentDiscountType *string `json:"PaymentDiscountType,omitempty"`

	// PaymentEndOfMonths: Edm.Int32
	PaymentEndOfMonths *int `json:"PaymentEndOfMonths,omitempty"`

	// PaymentMethod: Edm.String
	PaymentMethod *string `json:"PaymentMethod,omitempty"`

	// Percentage: Edm.Double
	Percentage *float64 `json:"Percentage,omitempty"`

	// VATCalculation: Edm.String
	VATCalculation *string `json:"VATCalculation,omitempty"`
}

func (e *PaymentConditions) GetPrimary() *types.GUID {
	return e.ID
}

func (s *PaymentConditionsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "cashflow/PaymentConditions", method)
}

// List the PaymentConditions entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PaymentConditionsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PaymentConditions, error) {
	var entities []*PaymentConditions
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/PaymentConditions", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PaymentConditions entitiy in the provided division.
func (s *PaymentConditionsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*PaymentConditions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/PaymentConditions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PaymentConditions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty PaymentConditions entity
func (s *PaymentConditionsEndpoint) New() *PaymentConditions {
	return &PaymentConditions{}
}

// Create the PaymentConditions entity in the provided division.
func (s *PaymentConditionsEndpoint) Create(ctx context.Context, division int, entity *PaymentConditions) (*PaymentConditions, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/PaymentConditions", division) // #nosec
	e := &PaymentConditions{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}
