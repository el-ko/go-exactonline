// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package cashflow

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ReceivablesEndpoint is responsible for communicating with
// the Receivables endpoint of the Cashflow service.
type ReceivablesEndpoint service

// Receivables:
// Service: Cashflow
// Entity: Receivables
// URL: /api/v1/{division}/cashflow/Receivables
// HasWebhook: false
// IsInBeta: false
// Methods: GET PUT
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CashflowReceivables
type Receivables struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Edm.Guid
	Account *types.GUID `json:"Account,omitempty"`

	// AccountBankAccountID: Edm.Guid
	AccountBankAccountID *types.GUID `json:"AccountBankAccountID,omitempty"`

	// AccountBankAccountNumber: Edm.String
	AccountBankAccountNumber *string `json:"AccountBankAccountNumber,omitempty"`

	// AccountCode: Edm.String
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountContact: Edm.Guid
	AccountContact *types.GUID `json:"AccountContact,omitempty"`

	// AccountContactName: Edm.String
	AccountContactName *string `json:"AccountContactName,omitempty"`

	// AccountCountry: Edm.String
	AccountCountry *string `json:"AccountCountry,omitempty"`

	// AccountName: Edm.String
	AccountName *string `json:"AccountName,omitempty"`

	// AmountDC: Edm.Double
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountDiscountDC: Edm.Double
	AmountDiscountDC *float64 `json:"AmountDiscountDC,omitempty"`

	// AmountDiscountFC: Edm.Double
	AmountDiscountFC *float64 `json:"AmountDiscountFC,omitempty"`

	// AmountFC: Edm.Double
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// BankAccountID: Edm.Guid
	BankAccountID *types.GUID `json:"BankAccountID,omitempty"`

	// BankAccountNumber: Edm.String
	BankAccountNumber *string `json:"BankAccountNumber,omitempty"`

	// CashflowTransactionBatchCode: Edm.String
	CashflowTransactionBatchCode *string `json:"CashflowTransactionBatchCode,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// DirectDebitMandate: Edm.Guid
	DirectDebitMandate *types.GUID `json:"DirectDebitMandate,omitempty"`

	// DirectDebitMandateDescription: Edm.String
	DirectDebitMandateDescription *string `json:"DirectDebitMandateDescription,omitempty"`

	// DirectDebitMandatePaymentType: Edm.Int16
	DirectDebitMandatePaymentType *int `json:"DirectDebitMandatePaymentType,omitempty"`

	// DirectDebitMandateReference: Edm.String
	DirectDebitMandateReference *string `json:"DirectDebitMandateReference,omitempty"`

	// DirectDebitMandateType: Edm.Int16
	DirectDebitMandateType *int `json:"DirectDebitMandateType,omitempty"`

	// DiscountDueDate: Edm.DateTime
	DiscountDueDate *types.Date `json:"DiscountDueDate,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Document: Edm.Guid
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentNumber: Edm.Int32
	DocumentNumber *int `json:"DocumentNumber,omitempty"`

	// DocumentSubject: Edm.String
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// DueDate: Edm.DateTime
	DueDate *types.Date `json:"DueDate,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// EndPeriod: Edm.Int16
	EndPeriod *int `json:"EndPeriod,omitempty"`

	// EndToEndID: Edm.String
	EndToEndID *string `json:"EndToEndID,omitempty"`

	// EndYear: Edm.Int16
	EndYear *int `json:"EndYear,omitempty"`

	// EntryDate: Edm.DateTime
	EntryDate *types.Date `json:"EntryDate,omitempty"`

	// EntryID: Edm.Guid
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// EntryNumber: Edm.Int32
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// GLAccount: Edm.Guid
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// GLAccountCode: Edm.String
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription: Edm.String
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`

	// InvoiceDate: Edm.DateTime
	InvoiceDate *types.Date `json:"InvoiceDate,omitempty"`

	// InvoiceNumber: Edm.Int32
	InvoiceNumber *int `json:"InvoiceNumber,omitempty"`

	// IsBatchBooking: Edm.Byte
	IsBatchBooking *byte `json:"IsBatchBooking,omitempty"`

	// IsFullyPaid: Edm.Boolean
	IsFullyPaid *bool `json:"IsFullyPaid,omitempty"`

	// Journal: Edm.String
	Journal *string `json:"Journal,omitempty"`

	// JournalDescription: Edm.String
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// LastPaymentDate: Edm.DateTime
	LastPaymentDate *types.Date `json:"LastPaymentDate,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OrderNumber: Edm.Int32
	OrderNumber *int `json:"OrderNumber,omitempty"`

	// PaymentCondition: Edm.String
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentConditionDescription: Edm.String
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// PaymentDays: Edm.Int32
	PaymentDays *int `json:"PaymentDays,omitempty"`

	// PaymentDaysDiscount: Edm.Int32
	PaymentDaysDiscount *int `json:"PaymentDaysDiscount,omitempty"`

	// PaymentDiscountPercentage: Edm.Double
	PaymentDiscountPercentage *float64 `json:"PaymentDiscountPercentage,omitempty"`

	// PaymentInformationID: Edm.String
	PaymentInformationID *string `json:"PaymentInformationID,omitempty"`

	// PaymentMethod: Edm.String
	PaymentMethod *string `json:"PaymentMethod,omitempty"`

	// PaymentReference: Edm.String
	PaymentReference *string `json:"PaymentReference,omitempty"`

	// RateFC: Edm.Double
	RateFC *float64 `json:"RateFC,omitempty"`

	// ReceivableBatchNumber: Edm.Int32
	ReceivableBatchNumber *int `json:"ReceivableBatchNumber,omitempty"`

	// ReceivableSelected: Edm.DateTime
	ReceivableSelected *types.Date `json:"ReceivableSelected,omitempty"`

	// ReceivableSelector: Edm.Guid
	ReceivableSelector *types.GUID `json:"ReceivableSelector,omitempty"`

	// ReceivableSelectorFullName: Edm.String
	ReceivableSelectorFullName *string `json:"ReceivableSelectorFullName,omitempty"`

	// Source: Edm.Int32
	Source *int `json:"Source,omitempty"`

	// Status: Edm.Int16
	Status *int `json:"Status,omitempty"`

	// TransactionAmountDC: Edm.Double
	TransactionAmountDC *float64 `json:"TransactionAmountDC,omitempty"`

	// TransactionAmountFC: Edm.Double
	TransactionAmountFC *float64 `json:"TransactionAmountFC,omitempty"`

	// TransactionDueDate: Edm.DateTime
	TransactionDueDate *types.Date `json:"TransactionDueDate,omitempty"`

	// TransactionEntryID: Edm.Guid
	TransactionEntryID *types.GUID `json:"TransactionEntryID,omitempty"`

	// TransactionID: Edm.Guid
	TransactionID *types.GUID `json:"TransactionID,omitempty"`

	// TransactionIsReversal: Edm.Boolean
	TransactionIsReversal *bool `json:"TransactionIsReversal,omitempty"`

	// TransactionReportingPeriod: Edm.Int16
	TransactionReportingPeriod *int `json:"TransactionReportingPeriod,omitempty"`

	// TransactionReportingYear: Edm.Int16
	TransactionReportingYear *int `json:"TransactionReportingYear,omitempty"`

	// TransactionStatus: Edm.Int16
	TransactionStatus *int `json:"TransactionStatus,omitempty"`

	// TransactionType: Edm.Int32
	TransactionType *int `json:"TransactionType,omitempty"`

	// YourRef: Edm.String
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *Receivables) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ReceivablesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "cashflow/Receivables", method)
}

// List the Receivables entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ReceivablesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Receivables, error) {
	var entities []*Receivables
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/Receivables", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Receivables entitiy in the provided division.
func (s *ReceivablesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Receivables, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/Receivables", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Receivables{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Update the Receivables entity in the provided division.
func (s *ReceivablesEndpoint) Update(ctx context.Context, division int, entity *Receivables) (*Receivables, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/Receivables", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &Receivables{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}
