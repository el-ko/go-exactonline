// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package logistics

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// SupplierItemEndpoint is responsible for communicating with
// the SupplierItem endpoint of the Logistics service.
type SupplierItemEndpoint service

// SupplierItem:
// Service: Logistics
// Entity: SupplierItem
// URL: /api/v1/{division}/logistics/SupplierItem
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=LogisticsSupplierItem
type SupplierItem struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// CopyRemarks: Edm.Byte
	CopyRemarks *byte `json:"CopyRemarks,omitempty"`

	// CountryOfOrigin: Edm.String
	CountryOfOrigin *string `json:"CountryOfOrigin,omitempty"`

	// CountryOfOriginDescription: Edm.String
	CountryOfOriginDescription *string `json:"CountryOfOriginDescription,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// CurrencyDescription: Edm.String
	CurrencyDescription *string `json:"CurrencyDescription,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// DropShipment: Edm.Byte
	DropShipment *byte `json:"DropShipment,omitempty"`

	// EndDate: Edm.DateTime
	EndDate *types.Date `json:"EndDate,omitempty"`

	// Item: Edm.Guid
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemUnit: Edm.Guid
	ItemUnit *types.GUID `json:"ItemUnit,omitempty"`

	// ItemUnitCode: Edm.String
	ItemUnitCode *string `json:"ItemUnitCode,omitempty"`

	// ItemUnitDescription: Edm.String
	ItemUnitDescription *string `json:"ItemUnitDescription,omitempty"`

	// MainSupplier: Edm.Boolean
	MainSupplier *bool `json:"MainSupplier,omitempty"`

	// MinimumQuantity: Edm.Double
	MinimumQuantity *float64 `json:"MinimumQuantity,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`

	// PurchaseLeadTime: Edm.Int32
	PurchaseLeadTime *int `json:"PurchaseLeadTime,omitempty"`

	// PurchaseLotSize: Edm.Int32
	PurchaseLotSize *int `json:"PurchaseLotSize,omitempty"`

	// PurchasePrice: Edm.Double
	PurchasePrice *float64 `json:"PurchasePrice,omitempty"`

	// PurchaseUnit: Edm.String
	PurchaseUnit *string `json:"PurchaseUnit,omitempty"`

	// PurchaseUnitDescription: Edm.String
	PurchaseUnitDescription *string `json:"PurchaseUnitDescription,omitempty"`

	// PurchaseUnitFactor: Edm.Double
	PurchaseUnitFactor *float64 `json:"PurchaseUnitFactor,omitempty"`

	// PurchaseVATCode: Edm.String
	PurchaseVATCode *string `json:"PurchaseVATCode,omitempty"`

	// PurchaseVATCodeDescription: Edm.String
	PurchaseVATCodeDescription *string `json:"PurchaseVATCodeDescription,omitempty"`

	// StartDate: Edm.DateTime
	StartDate *types.Date `json:"StartDate,omitempty"`

	// Supplier: Edm.Guid
	Supplier *types.GUID `json:"Supplier,omitempty"`

	// SupplierCode: Edm.String
	SupplierCode *string `json:"SupplierCode,omitempty"`

	// SupplierDescription: Edm.String
	SupplierDescription *string `json:"SupplierDescription,omitempty"`

	// SupplierItemCode: Edm.String
	SupplierItemCode *string `json:"SupplierItemCode,omitempty"`
}

func (e *SupplierItem) GetPrimary() *types.GUID {
	return e.ID
}

func (s *SupplierItemEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "logistics/SupplierItem", method)
}

// List the SupplierItem entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SupplierItemEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SupplierItem, error) {
	var entities []*SupplierItem
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/SupplierItem", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SupplierItem entitiy in the provided division.
func (s *SupplierItemEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*SupplierItem, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/SupplierItem", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SupplierItem{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty SupplierItem entity
func (s *SupplierItemEndpoint) New() *SupplierItem {
	return &SupplierItem{}
}

// Create the SupplierItem entity in the provided division.
func (s *SupplierItemEndpoint) Create(ctx context.Context, division int, entity *SupplierItem) (*SupplierItem, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/SupplierItem", division) // #nosec
	e := &SupplierItem{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the SupplierItem entity in the provided division.
func (s *SupplierItemEndpoint) Update(ctx context.Context, division int, entity *SupplierItem) (*SupplierItem, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/SupplierItem", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &SupplierItem{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the SupplierItem entity in the provided division.
func (s *SupplierItemEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/SupplierItem", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
