// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package logistics

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// SelectionCodesEndpoint is responsible for communicating with
// the SelectionCodes endpoint of the Logistics service.
type SelectionCodesEndpoint service

// SelectionCodes:
// Service: Logistics
// Entity: SelectionCodes
// URL: /api/v1/{division}/logistics/SelectionCodes
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=LogisticsSelectionCodes
type SelectionCodes struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Active: Edm.Byte
	Active *byte `json:"Active,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Edm.String
	Notes *string `json:"Notes,omitempty"`
}

func (e *SelectionCodes) GetPrimary() *types.GUID {
	return e.ID
}

func (s *SelectionCodesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "logistics/SelectionCodes", method)
}

// List the SelectionCodes entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SelectionCodesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SelectionCodes, error) {
	var entities []*SelectionCodes
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/SelectionCodes", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SelectionCodes entitiy in the provided division.
func (s *SelectionCodesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*SelectionCodes, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/SelectionCodes", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SelectionCodes{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
