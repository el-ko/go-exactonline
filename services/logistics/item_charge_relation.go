// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package logistics

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
	"github.com/mcnijman/go-exactonline/types"
)

// ItemChargeRelationEndpoint is responsible for communicating with
// the ItemChargeRelation endpoint of the Logistics service.
type ItemChargeRelationEndpoint service

// ItemChargeRelation:
// Service: Logistics
// Entity: ItemChargeRelation
// URL: /api/v1/{division}/logistics/ItemChargeRelation
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=LogisticsItemChargeRelation
type ItemChargeRelation struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Guid
	ID *types.GUID `json:"ID,omitempty"`

	// Amount: Edm.Double
	Amount *float64 `json:"Amount,omitempty"`

	// ChargeCode: Edm.String
	ChargeCode *string `json:"ChargeCode,omitempty"`

	// ChargeDescription: Edm.String
	ChargeDescription *string `json:"ChargeDescription,omitempty"`

	// ChargeID: Edm.Guid
	ChargeID *types.GUID `json:"ChargeID,omitempty"`

	// ChargeVATCode: Edm.String
	ChargeVATCode *string `json:"ChargeVATCode,omitempty"`

	// ChargeVATDescription: Edm.String
	ChargeVATDescription *string `json:"ChargeVATDescription,omitempty"`

	// ChargeVATPercentage: Edm.Double
	ChargeVATPercentage *float64 `json:"ChargeVATPercentage,omitempty"`

	// ChargeVATType: Edm.String
	ChargeVATType *string `json:"ChargeVATType,omitempty"`

	// Created: Edm.DateTime
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Edm.Guid
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Edm.String
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Edm.String
	Currency *string `json:"Currency,omitempty"`

	// Division: Edm.Int32
	Division *int `json:"Division,omitempty"`

	// ItemCode: Edm.String
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Edm.String
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemID: Edm.Guid
	ItemID *types.GUID `json:"ItemID,omitempty"`

	// Modified: Edm.DateTime
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Edm.Guid
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Edm.String
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Quantity: Edm.Double
	Quantity *float64 `json:"Quantity,omitempty"`

	// TotalAmount: Edm.Double
	TotalAmount *float64 `json:"TotalAmount,omitempty"`
}

func (e *ItemChargeRelation) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ItemChargeRelationEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "logistics/ItemChargeRelation", method)
}

// List the ItemChargeRelation entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ItemChargeRelationEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ItemChargeRelation, error) {
	var entities []*ItemChargeRelation
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/ItemChargeRelation", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ItemChargeRelation entitiy in the provided division.
func (s *ItemChargeRelationEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ItemChargeRelation, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/ItemChargeRelation", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ItemChargeRelation{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
