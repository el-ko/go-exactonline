// Copyright 2024 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package logistics

import (
	"context"

	"github.com/mcnijman/go-exactonline/api"
)

// IncotermsEndpoint is responsible for communicating with
// the Incoterms endpoint of the Logistics service.
type IncotermsEndpoint service

// Incoterms:
// Service: Logistics
// Entity: Incoterms
// URL: /api/v1/{division}/logistics/Incoterms
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=LogisticsIncoterms
type Incoterms struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Edm.Int16
	ID *int `json:"ID,omitempty"`

	// Code: Edm.String
	Code *string `json:"Code,omitempty"`

	// Description: Edm.String
	Description *string `json:"Description,omitempty"`

	// Version: Edm.Int16
	Version *int `json:"Version,omitempty"`
}

func (e *Incoterms) GetPrimary() *int {
	return e.ID
}

func (s *IncotermsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "logistics/Incoterms", method)
}

// List the Incoterms entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *IncotermsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Incoterms, error) {
	var entities []*Incoterms
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/Incoterms", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Incoterms entitiy in the provided division.
func (s *IncotermsEndpoint) Get(ctx context.Context, division int, id *int) (*Incoterms, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/Incoterms", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Incoterms{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}
