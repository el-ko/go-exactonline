// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// InventorySerialNumbersService is responsible for communicating with
// the SerialNumbers endpoint of the Inventory service.
type InventorySerialNumbersService service

// InventorySerialNumbers:
// Service: Inventory
// Entity: SerialNumbers
// URL: /api/v1/{division}/inventory/SerialNumbers
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventorySerialNumbers
type InventorySerialNumbers struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Available: Availability of this serial number
	Available *byte `json:"Available,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// EndDate: End date of effective period for serial number
	EndDate *Date `json:"EndDate,omitempty"`

	// IsBlocked: Boolean value indicating whether or not the serial number is blocked
	IsBlocked *byte `json:"IsBlocked,omitempty"`

	// Item: Item
	Item *GUID `json:"Item,omitempty"`

	// ItemCode: Item code
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Remarks: Remarks
	Remarks *string `json:"Remarks,omitempty"`

	// SerialNumber: Human readable serial number
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// StartDate: Start date of effective period for serial number
	StartDate *Date `json:"StartDate,omitempty"`

	// StorageLocation: ID of storage location where serial number is available
	StorageLocation *GUID `json:"StorageLocation,omitempty"`

	// StorageLocationCode: Code of storage location where serial number is available
	StorageLocationCode *string `json:"StorageLocationCode,omitempty"`

	// StorageLocationDescription: Description of storage location where serial number is available
	StorageLocationDescription *string `json:"StorageLocationDescription,omitempty"`

	// Warehouse: ID of warehouse where serial number is available
	Warehouse *GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Code of warehouse where serial number is available
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Description of warehouse where serial number is available
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (s *InventorySerialNumbers) GetIdentifier() GUID {
	return *s.ID
}

// List the SerialNumbers entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *InventorySerialNumbersService) List(ctx context.Context, division int, all bool) ([]*InventorySerialNumbers, error) {
	var entities []*InventorySerialNumbers
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/SerialNumbers?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the SerialNumbers enitity, by ID.
func (s *InventorySerialNumbersService) Get(ctx context.Context, division int, id GUID) (*InventorySerialNumbers, error) {
	var entities []*InventorySerialNumbers
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/SerialNumbers?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d SerialNumbers entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
