// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// FinancialReceivablesListService is responsible for communicating with
// the ReceivablesList endpoint of the Financial service.
type FinancialReceivablesListService service

// FinancialReceivablesList:
// Service: Financial
// Entity: ReceivablesList
// URL: /api/v1/{division}/read/financial/ReceivablesList
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadFinancialReceivablesList
type FinancialReceivablesList struct {
	// HID: Primary key, human readable ID
	HID *int64 `json:"HID,omitempty"`

	// AccountCode: Code of Account
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountId: Reference to the account
	AccountId *GUID `json:"AccountId,omitempty"`

	// AccountName: Name of Account
	AccountName *string `json:"AccountName,omitempty"`

	// Amount: Amount
	Amount *float64 `json:"Amount,omitempty"`

	// AmountInTransit: Amount in transit
	AmountInTransit *float64 `json:"AmountInTransit,omitempty"`

	// CurrencyCode: Code of Currency
	CurrencyCode *string `json:"CurrencyCode,omitempty"`

	// Description: Description
	Description *string `json:"Description,omitempty"`

	// DueDate: Date the invoice is due (This due date is not the discount due date)
	DueDate *Date `json:"DueDate,omitempty"`

	// EntryNumber: Entry number
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// Id: Obsolete
	Id *GUID `json:"Id,omitempty"`

	// InvoiceDate: Invoice date
	InvoiceDate *Date `json:"InvoiceDate,omitempty"`

	// InvoiceNumber: Invoice number. The value is 0 when the invoice number of the linked transaction is empty.
	InvoiceNumber *int `json:"InvoiceNumber,omitempty"`

	// JournalCode: Code of Journal
	JournalCode *string `json:"JournalCode,omitempty"`

	// JournalDescription: Description of Journal
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// YourRef: Your reference
	YourRef *string `json:"YourRef,omitempty"`
}

func (s *FinancialReceivablesList) GetIdentifier() int64 {
	return *s.HID
}

// List the ReceivablesList entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *FinancialReceivablesListService) List(ctx context.Context, division int, all bool) ([]*FinancialReceivablesList, error) {
	var entities []*FinancialReceivablesList
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/ReceivablesList?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the ReceivablesList enitity, by HID.
func (s *FinancialReceivablesListService) Get(ctx context.Context, division int, id int64) (*FinancialReceivablesList, error) {
	var entities []*FinancialReceivablesList
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/ReceivablesList?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d ReceivablesList entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
