// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// CashflowPaymentConditionsService is responsible for communicating with
// the PaymentConditions endpoint of the Cashflow service.
type CashflowPaymentConditionsService service

// CashflowPaymentConditions:
// Service: Cashflow
// Entity: PaymentConditions
// URL: /api/v1/{division}/cashflow/PaymentConditions
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CashflowPaymentConditions
type CashflowPaymentConditions struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Code: Code of the payment condition
	Code *string `json:"Code,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CreditManagementScenario: Default credit management scenario to be used for new payment terms
	CreditManagementScenario *GUID `json:"CreditManagementScenario,omitempty"`

	// CreditManagementScenarioCode: Code of CreditManagementScenario
	CreditManagementScenarioCode *string `json:"CreditManagementScenarioCode,omitempty"`

	// CreditManagementScenarioDescription: Description of CreditManagementScenario
	CreditManagementScenarioDescription *string `json:"CreditManagementScenarioDescription,omitempty"`

	// Description: Description of the payment condition
	Description *string `json:"Description,omitempty"`

	// DiscountCalculation: Indicates how the discount amount is calculated. Values: E = Excluding VAT, I = Including VAT
	DiscountCalculation *string `json:"DiscountCalculation,omitempty"`

	// DiscountPaymentDays: Number of days to pay within, to have the right to take the discount
	DiscountPaymentDays *int `json:"DiscountPaymentDays,omitempty"`

	// DiscountPercentage: Discount percentage
	DiscountPercentage *float64 `json:"DiscountPercentage,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PaymentDays: Number of days to be included in the due date calculation. Example: invoice date = 17/01 PaymentEndOfMonths = 2 =&gt; 31/03 PaymentDays = 15 =&gt; 15/04
	PaymentDays *int `json:"PaymentDays,omitempty"`

	// PaymentDiscountType: Type of payment discount. Values: B = Settlement discount, K = Credit surcharge
	PaymentDiscountType *string `json:"PaymentDiscountType,omitempty"`

	// PaymentEndOfMonths: Number of month endings to be included in the due date calculation
	PaymentEndOfMonths *int `json:"PaymentEndOfMonths,omitempty"`

	// PaymentMethod: Method of payment. Values: B = On credit, I = Collection, K = Cash
	PaymentMethod *string `json:"PaymentMethod,omitempty"`

	// Percentage: Percentage (stored as fraction) of total invoice amount
	Percentage *float64 `json:"Percentage,omitempty"`

	// VATCalculation: Indicates how the VAT amount is calculated Values: E = Excluding discount, I = Including discount
	VATCalculation *string `json:"VATCalculation,omitempty"`
}

func (s *CashflowPaymentConditions) GetIdentifier() GUID {
	return *s.ID
}

// List the PaymentConditions entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *CashflowPaymentConditionsService) List(ctx context.Context, division int, all bool) ([]*CashflowPaymentConditions, error) {
	var entities []*CashflowPaymentConditions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/PaymentConditions?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the PaymentConditions enitity, by ID.
func (s *CashflowPaymentConditionsService) Get(ctx context.Context, division int, id GUID) (*CashflowPaymentConditions, error) {
	var entities []*CashflowPaymentConditions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/PaymentConditions?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d PaymentConditions entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
