// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// CRMAddressStatesService is responsible for communicating with
// the AddressStates endpoint of the CRM service.
type CRMAddressStatesService service

// CRMAddressStates:
// Service: CRM
// Entity: AddressStates
// URL: /api/v1/{division}/crm/AddressStates
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CRMAddressStates
type CRMAddressStates struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Country: Country code
	Country *string `json:"Country,omitempty"`

	// DisplayValue: Description of state prefixed with the code
	DisplayValue *string `json:"DisplayValue,omitempty"`

	// Latitude: Latitude
	Latitude *float64 `json:"Latitude,omitempty"`

	// Longitude: Longitude
	Longitude *float64 `json:"Longitude,omitempty"`

	// Name: State name
	Name *string `json:"Name,omitempty"`

	// State: State code
	State *string `json:"State,omitempty"`
}

func (s *CRMAddressStates) GetIdentifier() GUID {
	return *s.ID
}

// List the AddressStates entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *CRMAddressStatesService) List(ctx context.Context, division int, all bool) ([]*CRMAddressStates, error) {
	var entities []*CRMAddressStates
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/AddressStates?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the AddressStates enitity, by ID.
func (s *CRMAddressStatesService) Get(ctx context.Context, division int, id GUID) (*CRMAddressStates, error) {
	var entities []*CRMAddressStates
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/AddressStates?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d AddressStates entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
