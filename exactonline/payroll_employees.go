// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// PayrollEmployeesService is responsible for communicating with
// the Employees endpoint of the Payroll service.
type PayrollEmployeesService service

// PayrollEmployees:
// Service: Payroll
// Entity: Employees
// URL: /api/v1/{division}/payroll/Employees
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollEmployees
type PayrollEmployees struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// ActiveEmployment: Obsolete
	ActiveEmployment *byte `json:",omitempty"`

	// AddressLine2: Second address line
	AddressLine2 *string `json:",omitempty"`

	// AddressLine3: Third address line
	AddressLine3 *string `json:",omitempty"`

	// AddressStreet: Street of address
	AddressStreet *string `json:",omitempty"`

	// AddressStreetNumber: Street number of address
	AddressStreetNumber *string `json:",omitempty"`

	// AddressStreetNumberSuffix: Street number suffix of address
	AddressStreetNumberSuffix *string `json:",omitempty"`

	// BirthDate: Birth date
	BirthDate *Date `json:",omitempty"`

	// BirthName: Birth name
	BirthName *string `json:",omitempty"`

	// BirthNamePrefix: Birth middle name
	BirthNamePrefix *string `json:",omitempty"`

	// BirthPlace: Birth place
	BirthPlace *string `json:",omitempty"`

	// BusinessEmail: Email of the employee at the office
	BusinessEmail *string `json:",omitempty"`

	// BusinessFax: Fax number of the employee at the office
	BusinessFax *string `json:",omitempty"`

	// BusinessMobile: Office mobile number of the employee
	BusinessMobile *string `json:",omitempty"`

	// BusinessPhone: Phone number of the employee at the office
	BusinessPhone *string `json:",omitempty"`

	// BusinessPhoneExtension: Phone extension of the employee at the office
	BusinessPhoneExtension *string `json:",omitempty"`

	// CASONumber: Obsolete
	CASONumber *string `json:",omitempty"`

	// City: City
	City *string `json:",omitempty"`

	// Code: Code of the employee
	Code *string `json:",omitempty"`

	// Country: Country code
	Country *string `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// Customer: Customer ID
	Customer *GUID `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// Email: Email address
	Email *string `json:",omitempty"`

	// EmployeeHID: Employee number
	EmployeeHID *int `json:",omitempty"`

	// EndDate: End date of the employee
	EndDate *Date `json:",omitempty"`

	// FirstName: First name of the employee
	FirstName *string `json:",omitempty"`

	// FullName: Full name of the employee
	FullName *string `json:",omitempty"`

	// Gender: Gender
	Gender *string `json:",omitempty"`

	// HID: Numeric ID of the employee
	HID *int `json:",omitempty"`

	// Initials: Initials
	Initials *string `json:",omitempty"`

	// IsActive: IsActive
	IsActive *bool `json:",omitempty"`

	// IsAnonymised: Indicates whether the employee is anonymised.
	IsAnonymised *byte `json:",omitempty"`

	// Language: Language code
	Language *string `json:",omitempty"`

	// LastName: Last name
	LastName *string `json:",omitempty"`

	// LocationDescription: Description of the location of the employee (where am I?)
	LocationDescription *string `json:",omitempty"`

	// Manager: Direct manager of the employee
	Manager *GUID `json:",omitempty"`

	// MaritalDate: Date of marriage
	MaritalDate *Date `json:",omitempty"`

	// MaritalStatus: Marital status
	MaritalStatus *int `json:",omitempty"`

	// MiddleName: Middle name
	MiddleName *string `json:",omitempty"`

	// Mobile: Mobile phone
	Mobile *string `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// Municipality: Municipality
	Municipality *string `json:",omitempty"`

	// NameComposition:
	NameComposition *int `json:",omitempty"`

	// Nationality: Nationality
	Nationality *string `json:",omitempty"`

	// NickName: Nick name
	NickName *string `json:",omitempty"`

	// Notes: Additional notes
	Notes *string `json:",omitempty"`

	// PartnerName: Name of partner
	PartnerName *string `json:",omitempty"`

	// PartnerNamePrefix: Middle name of partner
	PartnerNamePrefix *string `json:",omitempty"`

	// Person: Reference to the persons table in which the personal data of the employee is stored
	Person *GUID `json:",omitempty"`

	// Phone: Phone number
	Phone *string `json:",omitempty"`

	// PhoneExtension: Phone number extension
	PhoneExtension *string `json:",omitempty"`

	// PictureFileName: Filename of picture
	PictureFileName *string `json:",omitempty"`

	// PictureUrl: Url of picture
	PictureUrl *string `json:",omitempty"`

	// Postcode: Postcode
	Postcode *string `json:",omitempty"`

	// PrivateEmail: Private email address
	PrivateEmail *string `json:",omitempty"`

	// SocialSecurityNumber: Social security number
	SocialSecurityNumber *string `json:",omitempty"`

	// StartDate: Start date of the employee
	StartDate *Date `json:",omitempty"`

	// State: State
	State *string `json:",omitempty"`

	// Title: Title
	Title *string `json:",omitempty"`

	// User: User ID of employee
	User *GUID `json:",omitempty"`

	// UserFullName: Name of user
	UserFullName *string `json:",omitempty"`
}

func (s *PayrollEmployees) GetIdentifier() GUID {
	return *s.ID
}

// List the Employees entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PayrollEmployeesService) List(ctx context.Context, division int, all bool) ([]*PayrollEmployees, error) {
	var entities []*PayrollEmployees
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/Employees?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
