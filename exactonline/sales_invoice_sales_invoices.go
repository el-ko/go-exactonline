// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// SalesInvoiceSalesInvoicesService is responsible for communicating with
// the SalesInvoices endpoint of the SalesInvoice service.
type SalesInvoiceSalesInvoicesService service

// SalesInvoiceSalesInvoices:
// Service: SalesInvoice
// Entity: SalesInvoices
// URL: /api/v1/{division}/salesinvoice/SalesInvoices
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesInvoiceSalesInvoices
type SalesInvoiceSalesInvoices struct {
	// InvoiceID:
	InvoiceID *GUID `json:"InvoiceID,omitempty"`

	// AmountDC:
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountDiscount:
	AmountDiscount *float64 `json:"AmountDiscount,omitempty"`

	// AmountDiscountExclVat:
	AmountDiscountExclVat *float64 `json:"AmountDiscountExclVat,omitempty"`

	// AmountFC:
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// AmountFCExclVat:
	AmountFCExclVat *float64 `json:"AmountFCExclVat,omitempty"`

	// Created:
	Created *Date `json:"Created,omitempty"`

	// Creator:
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency:
	Currency *string `json:"Currency,omitempty"`

	// DeliverTo:
	DeliverTo *GUID `json:"DeliverTo,omitempty"`

	// DeliverToAddress:
	DeliverToAddress *GUID `json:"DeliverToAddress,omitempty"`

	// DeliverToContactPerson:
	DeliverToContactPerson *GUID `json:"DeliverToContactPerson,omitempty"`

	// DeliverToContactPersonFullName:
	DeliverToContactPersonFullName *string `json:"DeliverToContactPersonFullName,omitempty"`

	// DeliverToName:
	DeliverToName *string `json:"DeliverToName,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Discount:
	Discount *float64 `json:"Discount,omitempty"`

	// DiscountType:
	DiscountType *int `json:"DiscountType,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// Document:
	Document *GUID `json:"Document,omitempty"`

	// DocumentNumber:
	DocumentNumber *int `json:"DocumentNumber,omitempty"`

	// DocumentSubject:
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// DueDate:
	DueDate *Date `json:"DueDate,omitempty"`

	// ExtraDutyAmountFC:
	ExtraDutyAmountFC *float64 `json:"ExtraDutyAmountFC,omitempty"`

	// GAccountAmountFC:
	GAccountAmountFC *float64 `json:"GAccountAmountFC,omitempty"`

	// InvoiceDate:
	InvoiceDate *Date `json:"InvoiceDate,omitempty"`

	// InvoiceNumber:
	InvoiceNumber *int `json:"InvoiceNumber,omitempty"`

	// InvoiceTo:
	InvoiceTo *GUID `json:"InvoiceTo,omitempty"`

	// InvoiceToContactPerson:
	InvoiceToContactPerson *GUID `json:"InvoiceToContactPerson,omitempty"`

	// InvoiceToContactPersonFullName:
	InvoiceToContactPersonFullName *string `json:"InvoiceToContactPersonFullName,omitempty"`

	// InvoiceToName:
	InvoiceToName *string `json:"InvoiceToName,omitempty"`

	// IsExtraDuty:
	IsExtraDuty *bool `json:"IsExtraDuty,omitempty"`

	// Journal:
	Journal *string `json:"Journal,omitempty"`

	// JournalDescription:
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// Modified:
	Modified *Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OrderDate:
	OrderDate *Date `json:"OrderDate,omitempty"`

	// OrderedBy:
	OrderedBy *GUID `json:"OrderedBy,omitempty"`

	// OrderedByContactPerson:
	OrderedByContactPerson *GUID `json:"OrderedByContactPerson,omitempty"`

	// OrderedByContactPersonFullName:
	OrderedByContactPersonFullName *string `json:"OrderedByContactPersonFullName,omitempty"`

	// OrderedByName:
	OrderedByName *string `json:"OrderedByName,omitempty"`

	// OrderNumber:
	OrderNumber *int `json:"OrderNumber,omitempty"`

	// PaymentCondition:
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentConditionDescription:
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// PaymentReference:
	PaymentReference *string `json:"PaymentReference,omitempty"`

	// Remarks:
	Remarks *string `json:"Remarks,omitempty"`

	// SalesInvoiceLines:
	SalesInvoiceLines *[]byte `json:"SalesInvoiceLines,omitempty"`

	// Salesperson:
	Salesperson *GUID `json:"Salesperson,omitempty"`

	// SalespersonFullName:
	SalespersonFullName *string `json:"SalespersonFullName,omitempty"`

	// StarterSalesInvoiceStatus:
	StarterSalesInvoiceStatus *int `json:"StarterSalesInvoiceStatus,omitempty"`

	// StarterSalesInvoiceStatusDescription:
	StarterSalesInvoiceStatusDescription *string `json:"StarterSalesInvoiceStatusDescription,omitempty"`

	// Status:
	Status *int `json:"Status,omitempty"`

	// StatusDescription:
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// TaxSchedule:
	TaxSchedule *GUID `json:"TaxSchedule,omitempty"`

	// TaxScheduleCode:
	TaxScheduleCode *string `json:"TaxScheduleCode,omitempty"`

	// TaxScheduleDescription:
	TaxScheduleDescription *string `json:"TaxScheduleDescription,omitempty"`

	// Type:
	Type *int `json:"Type,omitempty"`

	// TypeDescription:
	TypeDescription *string `json:"TypeDescription,omitempty"`

	// VATAmountDC:
	VATAmountDC *float64 `json:"VATAmountDC,omitempty"`

	// VATAmountFC:
	VATAmountFC *float64 `json:"VATAmountFC,omitempty"`

	// WithholdingTaxAmountFC:
	WithholdingTaxAmountFC *float64 `json:"WithholdingTaxAmountFC,omitempty"`

	// WithholdingTaxBaseAmount:
	WithholdingTaxBaseAmount *float64 `json:"WithholdingTaxBaseAmount,omitempty"`

	// WithholdingTaxPercentage:
	WithholdingTaxPercentage *float64 `json:"WithholdingTaxPercentage,omitempty"`

	// YourRef:
	YourRef *string `json:"YourRef,omitempty"`
}

func (s *SalesInvoiceSalesInvoices) GetIdentifier() GUID {
	return *s.InvoiceID
}

// List the SalesInvoices entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SalesInvoiceSalesInvoicesService) List(ctx context.Context, division int, all bool) ([]*SalesInvoiceSalesInvoices, error) {
	var entities []*SalesInvoiceSalesInvoices
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoices?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the SalesInvoices enitity, by InvoiceID.
func (s *SalesInvoiceSalesInvoicesService) Get(ctx context.Context, division int, id GUID) (*SalesInvoiceSalesInvoices, error) {
	var entities []*SalesInvoiceSalesInvoices
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/salesinvoice/SalesInvoices?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d SalesInvoices entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
