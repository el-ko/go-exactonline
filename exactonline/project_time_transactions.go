// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ProjectTimeTransactionsService is responsible for communicating with
// the TimeTransactions endpoint of the Project service.
type ProjectTimeTransactionsService service

// ProjectTimeTransactions:
// Service: Project
// Entity: TimeTransactions
// URL: /api/v1/{division}/project/TimeTransactions
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectTimeTransactions
type ProjectTimeTransactions struct {
	// ID:
	ID *GUID `json:",omitempty"`

	// Account:
	Account *GUID `json:",omitempty"`

	// AccountName:
	AccountName *string `json:",omitempty"`

	// Activity:
	Activity *GUID `json:",omitempty"`

	// ActivityDescription:
	ActivityDescription *string `json:",omitempty"`

	// Amount:
	Amount *float64 `json:",omitempty"`

	// AmountFC:
	AmountFC *float64 `json:",omitempty"`

	// Attachment:
	Attachment *GUID `json:",omitempty"`

	// Created:
	Created *Date `json:",omitempty"`

	// Creator:
	Creator *GUID `json:",omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:",omitempty"`

	// Currency:
	Currency *string `json:",omitempty"`

	// Date:
	Date *Date `json:",omitempty"`

	// Division:
	Division *int `json:",omitempty"`

	// DivisionDescription:
	DivisionDescription *string `json:",omitempty"`

	// Employee:
	Employee *GUID `json:",omitempty"`

	// EndTime:
	EndTime *Date `json:",omitempty"`

	// EntryNumber:
	EntryNumber *int `json:",omitempty"`

	// ErrorText:
	ErrorText *string `json:",omitempty"`

	// HourStatus:
	HourStatus *int `json:",omitempty"`

	// Item:
	Item *GUID `json:",omitempty"`

	// ItemDescription:
	ItemDescription *string `json:",omitempty"`

	// ItemDivisable:
	ItemDivisable *bool `json:",omitempty"`

	// Modified:
	Modified *Date `json:",omitempty"`

	// Modifier:
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:",omitempty"`

	// Notes:
	Notes *string `json:",omitempty"`

	// Price:
	Price *float64 `json:",omitempty"`

	// PriceFC:
	PriceFC *float64 `json:",omitempty"`

	// Project:
	Project *GUID `json:",omitempty"`

	// ProjectAccount:
	ProjectAccount *GUID `json:",omitempty"`

	// ProjectAccountCode:
	ProjectAccountCode *string `json:",omitempty"`

	// ProjectAccountName:
	ProjectAccountName *string `json:",omitempty"`

	// ProjectCode:
	ProjectCode *string `json:",omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:",omitempty"`

	// Quantity:
	Quantity *float64 `json:",omitempty"`

	// SkipValidation:
	SkipValidation *bool `json:",omitempty"`

	// StartTime:
	StartTime *Date `json:",omitempty"`

	// Subscription:
	Subscription *GUID `json:",omitempty"`

	// SubscriptionAccount:
	SubscriptionAccount *GUID `json:",omitempty"`

	// SubscriptionAccountCode:
	SubscriptionAccountCode *string `json:",omitempty"`

	// SubscriptionAccountName:
	SubscriptionAccountName *string `json:",omitempty"`

	// SubscriptionDescription:
	SubscriptionDescription *string `json:",omitempty"`

	// SubscriptionNumber:
	SubscriptionNumber *int `json:",omitempty"`

	// Type:
	Type *int `json:",omitempty"`
}

func (s *ProjectTimeTransactions) GetIdentifier() GUID {
	return *s.ID
}

// List the TimeTransactions entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectTimeTransactionsService) List(ctx context.Context, division int, all bool) ([]*ProjectTimeTransactions, error) {
	var entities []*ProjectTimeTransactions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/project/TimeTransactions?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
