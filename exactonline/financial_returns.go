// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// FinancialReturnsService is responsible for communicating with
// the Returns endpoint of the Financial service.
type FinancialReturnsService service

// FinancialReturns:
// Service: Financial
// Entity: Returns
// URL: /api/v1/{division}/read/financial/Returns
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadFinancialReturns
type FinancialReturns struct {
	// DocumentID: Primary key, document ID
	DocumentID *GUID `json:"DocumentID,omitempty"`

	// Amount: Amount in the currency of the transaction
	Amount *float64 `json:"Amount,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Currency: Currency
	Currency *string `json:"Currency,omitempty"`

	// Description: Description
	Description *string `json:"Description,omitempty"`

	// DocumentViewUrl: Url to view the document
	DocumentViewUrl *string `json:"DocumentViewUrl,omitempty"`

	// DueDate: Due date
	DueDate *Date `json:"DueDate,omitempty"`

	// Frequency: Frequency
	Frequency *string `json:"Frequency,omitempty"`

	// PayrollDeclarationType: Payroll declaration type
	PayrollDeclarationType *string `json:"PayrollDeclarationType,omitempty"`

	// Period: Period
	Period *int `json:"Period,omitempty"`

	// PeriodDescription: Description of Period
	PeriodDescription *string `json:"PeriodDescription,omitempty"`

	// Request: Reference to request
	Request *GUID `json:"Request,omitempty"`

	// Status: Status
	Status *int `json:"Status,omitempty"`

	// Type: Type
	Type *int `json:"Type,omitempty"`

	// Year: Year
	Year *int `json:"Year,omitempty"`
}

func (s *FinancialReturns) GetIdentifier() GUID {
	return *s.DocumentID
}

// List the Returns entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *FinancialReturnsService) List(ctx context.Context, division int, all bool) ([]*FinancialReturns, error) {
	var entities []*FinancialReturns
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/Returns?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the Returns enitity, by DocumentID.
func (s *FinancialReturnsService) Get(ctx context.Context, division int, id GUID) (*FinancialReturns, error) {
	var entities []*FinancialReturns
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/Returns?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d Returns entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
