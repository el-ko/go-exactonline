// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// WebhooksWebhookSubscriptionsService is responsible for communicating with
// the WebhookSubscriptions endpoint of the Webhooks service.
type WebhooksWebhookSubscriptionsService service

// WebhooksWebhookSubscriptions:
// Service: Webhooks
// Entity: WebhookSubscriptions
// URL: /api/v1/{division}/webhooks/WebhookSubscriptions
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=WebhooksWebhookSubscriptions
type WebhooksWebhookSubscriptions struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// CallbackURL: Callback URL endpoint
	CallbackURL *string `json:"CallbackURL,omitempty"`

	// ClientID: OAuth client Id
	ClientID *GUID `json:"ClientID,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of the OAuth Client
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Topic: Webhook subscription topic, e.g.: FinancialTransactions, Items, StockPositions
	Topic *string `json:"Topic,omitempty"`
}

func (s *WebhooksWebhookSubscriptions) GetIdentifier() GUID {
	return *s.ID
}

// List the WebhookSubscriptions entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *WebhooksWebhookSubscriptionsService) List(ctx context.Context, division int, all bool) ([]*WebhooksWebhookSubscriptions, error) {
	var entities []*WebhooksWebhookSubscriptions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/webhooks/WebhookSubscriptions?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the WebhookSubscriptions enitity, by ID.
func (s *WebhooksWebhookSubscriptionsService) Get(ctx context.Context, division int, id GUID) (*WebhooksWebhookSubscriptions, error) {
	var entities []*WebhooksWebhookSubscriptions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/webhooks/WebhookSubscriptions?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d WebhookSubscriptions entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
