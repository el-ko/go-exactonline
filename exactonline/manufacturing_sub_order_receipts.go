// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ManufacturingSubOrderReceiptsService is responsible for communicating with
// the SubOrderReceipts endpoint of the Manufacturing service.
type ManufacturingSubOrderReceiptsService service

// ManufacturingSubOrderReceipts:
// Service: Manufacturing
// Entity: SubOrderReceipts
// URL: /api/v1/{division}/manufacturing/SubOrderReceipts
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingSubOrderReceipts
type ManufacturingSubOrderReceipts struct {
	// ShopOrderReceiptStockTransactionId: ShopOrderReceipt.StockTransactionId related to this SubOrderReceipt
	ShopOrderReceiptStockTransactionId *GUID `json:"ShopOrderReceiptStockTransactionId,omitempty"`

	// CreatedBy: ID of creating user
	CreatedBy *GUID `json:"CreatedBy,omitempty"`

	// CreatedByFullName: Name of the creating user
	CreatedByFullName *string `json:"CreatedByFullName,omitempty"`

	// CreatedDate: Creation date of this SubOrderReceipt
	CreatedDate *Date `json:"CreatedDate,omitempty"`

	// DraftStockTransactionID: Serial or batch numbers are reserved prior to a POST to SubOrderReceipt. This DraftStockTransactionID represents the group of serial or batch numbers to be used in this transaction.
	DraftStockTransactionID *GUID `json:"DraftStockTransactionID,omitempty"`

	// HasReversibleQuantity: Indicates if this SubOrderReceipt has a quantity eligible to be reversed via SubOrderReversals
	HasReversibleQuantity *bool `json:"HasReversibleQuantity,omitempty"`

	// IsBatch: Does the SubOrderReceipt&#39;s item use batch numbers
	IsBatch *byte `json:"IsBatch,omitempty"`

	// IsFractionAllowedItem: Indicates if fractions (for example 0.35) are allowed for quantities of the SubOrderReceipt&#39;s item
	IsFractionAllowedItem *byte `json:"IsFractionAllowedItem,omitempty"`

	// IsSerial: Does the SubOrderReceipt&#39;s item use serial numbers
	IsSerial *byte `json:"IsSerial,omitempty"`

	// Item: Item of this SubOrderReceipt
	Item *GUID `json:"Item,omitempty"`

	// ItemCode: Code of this SubOrderReceipt&#39;s item
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of this SubOrderReceipt&#39;s item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemPictureUrl: Picture url of shop order item
	ItemPictureUrl *string `json:"ItemPictureUrl,omitempty"`

	// MaterialIssueStockTransactionId: MaterialIssue.StockTransactionId related to this SubOrderReceipt
	MaterialIssueStockTransactionId *GUID `json:"MaterialIssueStockTransactionId,omitempty"`

	// ParentShopOrder: Shop order issued to
	ParentShopOrder *GUID `json:"ParentShopOrder,omitempty"`

	// ParentShopOrderMaterialPlan: Shop order material plan issued to
	ParentShopOrderMaterialPlan *GUID `json:"ParentShopOrderMaterialPlan,omitempty"`

	// ParentShopOrderNumber: Number of shop order issued to
	ParentShopOrderNumber *int `json:"ParentShopOrderNumber,omitempty"`

	// Quantity: Quantity of this SubOrderReceipt
	Quantity *float64 `json:"Quantity,omitempty"`

	// SubShopOrder: Shop order issued from
	SubShopOrder *GUID `json:"SubShopOrder,omitempty"`

	// SubShopOrderNumber: Number of shop order issued from
	SubShopOrderNumber *int `json:"SubShopOrderNumber,omitempty"`

	// TransactionDate: Effective date of this SubOrderReceipt
	TransactionDate *Date `json:"TransactionDate,omitempty"`

	// Unit: Unit of measurement abbreviation of this SubOrderReceipt&#39;s item
	Unit *string `json:"Unit,omitempty"`

	// UnitDescription: Unit of measurement of this SubOrderReceipt&#39;s item
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// Warehouse: ID of warehouse SubOrderReceipt
	Warehouse *GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Code of warehouse SubOrderReceipt
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Description of warehouse SubOrderReceipt
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (s *ManufacturingSubOrderReceipts) GetIdentifier() GUID {
	return *s.ShopOrderReceiptStockTransactionId
}

// List the SubOrderReceipts entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ManufacturingSubOrderReceiptsService) List(ctx context.Context, division int, all bool) ([]*ManufacturingSubOrderReceipts, error) {
	var entities []*ManufacturingSubOrderReceipts
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/SubOrderReceipts?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the SubOrderReceipts enitity, by ShopOrderReceiptStockTransactionId.
func (s *ManufacturingSubOrderReceiptsService) Get(ctx context.Context, division int, id GUID) (*ManufacturingSubOrderReceipts, error) {
	var entities []*ManufacturingSubOrderReceipts
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/SubOrderReceipts?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d SubOrderReceipts entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
