// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// SystemMeService is responsible for communicating with
// the Me endpoint of the System service.
type SystemMeService service

// SystemMe:
// Service: System
// Entity: Me
// URL: /api/v1/current/Me
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SystemSystemMe
type SystemMe struct {
	// UserID: Primary key
	UserID *GUID `json:",omitempty"`

	// CurrentDivision: Division number that is currently used in the API. You should use a division number in the url
	CurrentDivision *int `json:",omitempty"`

	// DivisionCustomer: Owner account of the division
	DivisionCustomer *GUID `json:",omitempty"`

	// DivisionCustomerCode: Owner account code of the division
	DivisionCustomerCode *string `json:",omitempty"`

	// DivisionCustomerName: Owner account name of the division
	DivisionCustomerName *string `json:",omitempty"`

	// DivisionCustomerSiretNumber: Owner account SIRET Number of the division for French legislation
	DivisionCustomerSiretNumber *string `json:",omitempty"`

	// DivisionCustomerVatNumber: Owner account VAT Number of the division
	DivisionCustomerVatNumber *string `json:",omitempty"`

	// Email: Email address of the user
	Email *string `json:",omitempty"`

	// EmployeeID: Employee ID
	EmployeeID *GUID `json:",omitempty"`

	// FirstName: First name
	FirstName *string `json:",omitempty"`

	// FullName: Full name of the user
	FullName *string `json:",omitempty"`

	// Gender: Gender: M=Male, V=Female, O=Unknown
	Gender *string `json:",omitempty"`

	// Initials: Initials
	Initials *string `json:",omitempty"`

	// Language: Language spoken by this user
	Language *string `json:",omitempty"`

	// LanguageCode: Language (culture) that is used in Exact Online
	LanguageCode *string `json:",omitempty"`

	// LastName: Last name
	LastName *string `json:",omitempty"`

	// Legislation: Legislation
	Legislation *int64 `json:",omitempty"`

	// MiddleName: Middle name
	MiddleName *string `json:",omitempty"`

	// Mobile: Mobile phone
	Mobile *string `json:",omitempty"`

	// Nationality: Nationality
	Nationality *string `json:",omitempty"`

	// Phone: Phone number
	Phone *string `json:",omitempty"`

	// PhoneExtension: Phone number extension
	PhoneExtension *string `json:",omitempty"`

	// PictureUrl: Url that can be used to retrieve the picture of the user
	PictureUrl *string `json:",omitempty"`

	// ServerTime: The current date and time in Exact Online
	ServerTime *string `json:",omitempty"`

	// ServerUtcOffset: The time difference with UTC in seconds
	ServerUtcOffset *float64 `json:",omitempty"`

	// ThumbnailPicture: Binary thumbnail picture of this user
	ThumbnailPicture *[]byte `json:",omitempty"`

	// ThumbnailPictureFormat: File type of the picture
	ThumbnailPictureFormat *string `json:",omitempty"`

	// Title: Title
	Title *string `json:",omitempty"`

	// UserName: Login name of the user
	UserName *string `json:",omitempty"`
}

func (s *SystemMe) GetIdentifier() GUID {
	return *s.UserID
}

// List the Me entities.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SystemMeService) List(ctx context.Context, division int, all bool) ([]*SystemMe, error) {
	var entities []*SystemMe
	u, err := s.client.ResolvePathWithDivision("/api/v1/current/Me?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
