// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// PayrollEmploymentSalariesService is responsible for communicating with
// the EmploymentSalaries endpoint of the Payroll service.
type PayrollEmploymentSalariesService service

// PayrollEmploymentSalaries:
// Service: Payroll
// Entity: EmploymentSalaries
// URL: /api/v1/{division}/payroll/EmploymentSalaries
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollEmploymentSalaries
type PayrollEmploymentSalaries struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// AverageDaysPerWeek: The average number of contract days that an employee works per week
	AverageDaysPerWeek *float64 `json:",omitempty"`

	// AverageHoursPerWeek: The average number of contract hours that an employee works per week
	AverageHoursPerWeek *float64 `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// Employee: Employee ID
	Employee *GUID `json:",omitempty"`

	// EmployeeFullName: Name of employee
	EmployeeFullName *string `json:",omitempty"`

	// EmployeeHID: Employee number
	EmployeeHID *int `json:",omitempty"`

	// Employment: Employment
	Employment *GUID `json:",omitempty"`

	// EmploymentHID: Employment number
	EmploymentHID *int `json:",omitempty"`

	// EmploymentSalaryType: Salary type of employment. 1 - Periodical (fixed), 2 - Per hour (variable)
	EmploymentSalaryType *int `json:",omitempty"`

	// EmploymentSalaryTypeDescription: Salary type description
	EmploymentSalaryTypeDescription *string `json:",omitempty"`

	// EndDate: Salary record end date
	EndDate *Date `json:",omitempty"`

	// FulltimeAmount: Salary when working fulltime
	FulltimeAmount *float64 `json:",omitempty"`

	// HourlyWage: Hourly wage
	HourlyWage *float64 `json:",omitempty"`

	// InternalRate: Internal rate for time &amp; billing or professional service user
	InternalRate *float64 `json:",omitempty"`

	// JobLevel: Employee job level in context of a wage scale
	JobLevel *int `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// ParttimeAmount: Salary when working parttime
	ParttimeAmount *float64 `json:",omitempty"`

	// ParttimeFactor: Contract hours / Fulltime contract hours
	ParttimeFactor *float64 `json:",omitempty"`

	// Scale: Employee wage scale
	Scale *string `json:",omitempty"`

	// Schedule: Employment schedule
	Schedule *GUID `json:",omitempty"`

	// ScheduleCode: Employment schedule code
	ScheduleCode *string `json:",omitempty"`

	// ScheduleDescription: Description of employment schedule
	ScheduleDescription *string `json:",omitempty"`

	// StartDate: Salary record start date
	StartDate *Date `json:",omitempty"`
}

func (s *PayrollEmploymentSalaries) GetIdentifier() GUID {
	return *s.ID
}

// List the EmploymentSalaries entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PayrollEmploymentSalariesService) List(ctx context.Context, division int, all bool) ([]*PayrollEmploymentSalaries, error) {
	var entities []*PayrollEmploymentSalaries
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/EmploymentSalaries?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
