// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ProjectProjectHourBudgetsService is responsible for communicating with
// the ProjectHourBudgets endpoint of the Project service.
type ProjectProjectHourBudgetsService service

// ProjectProjectHourBudgets:
// Service: Project
// Entity: ProjectHourBudgets
// URL: /api/v1/{division}/project/ProjectHourBudgets
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectProjectHourBudgets
type ProjectProjectHourBudgets struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Budget: Number of hours
	Budget *float64 `json:"Budget,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division number
	Division *int `json:"Division,omitempty"`

	// Item: Hour type of budget
	Item *GUID `json:"Item,omitempty"`

	// ItemCode: Code of hour type
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of hour type
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Project: Reference to project
	Project *GUID `json:"Project,omitempty"`

	// ProjectCode: Code of project
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Description of project
	ProjectDescription *string `json:"ProjectDescription,omitempty"`
}

func (s *ProjectProjectHourBudgets) GetIdentifier() GUID {
	return *s.ID
}

// List the ProjectHourBudgets entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectProjectHourBudgetsService) List(ctx context.Context, division int, all bool) ([]*ProjectProjectHourBudgets, error) {
	var entities []*ProjectProjectHourBudgets
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectHourBudgets?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the ProjectHourBudgets enitity, by ID.
func (s *ProjectProjectHourBudgetsService) Get(ctx context.Context, division int, id GUID) (*ProjectProjectHourBudgets, error) {
	var entities []*ProjectProjectHourBudgets
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectHourBudgets?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d ProjectHourBudgets entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
