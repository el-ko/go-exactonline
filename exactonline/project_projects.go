// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ProjectProjectsService is responsible for communicating with
// the Projects endpoint of the Project service.
type ProjectProjectsService service

// ProjectProjects:
// Service: Project
// Entity: Projects
// URL: /api/v1/{division}/project/Projects
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectProjects
type ProjectProjects struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// Account: The account for this project
	Account *GUID `json:",omitempty"`

	// AccountCode: Code of Account
	AccountCode *string `json:",omitempty"`

	// AccountContact: Contact person of Account
	AccountContact *GUID `json:",omitempty"`

	// AccountName: Name of Account
	AccountName *string `json:",omitempty"`

	// AllowAdditionalInvoicing: Is additional invoice is allowed for project
	AllowAdditionalInvoicing *bool `json:",omitempty"`

	// BlockEntry: Block time and cost entries
	BlockEntry *bool `json:",omitempty"`

	// BlockRebilling: Block rebilling
	BlockRebilling *bool `json:",omitempty"`

	// BudgetedAmount: Budgeted amount of sales in the default currency of the company
	BudgetedAmount *float64 `json:",omitempty"`

	// BudgetedCosts: Budgeted amount of costs in the default currency of the company
	BudgetedCosts *float64 `json:",omitempty"`

	// BudgetedHoursPerHourType: Collection of budgeted hours
	BudgetedHoursPerHourType *[]byte `json:",omitempty"`

	// BudgetedRevenue: Budgeted amount of revenue in the default currency of the company
	BudgetedRevenue *float64 `json:",omitempty"`

	// BudgetOverrunHours: BudgetOverrunHours: 10-Allowed, 20-Not Allowed
	BudgetOverrunHours *byte `json:",omitempty"`

	// BudgetType: Budget type
	BudgetType *int `json:",omitempty"`

	// BudgetTypeDescription: Budget type description
	BudgetTypeDescription *string `json:",omitempty"`

	// Classification: Used only for PSA to link a project classification to the project
	Classification *GUID `json:",omitempty"`

	// ClassificationDescription: Description of Classification
	ClassificationDescription *string `json:",omitempty"`

	// Code: Code
	Code *string `json:",omitempty"`

	// CostsAmountFC: Used only for PSA to store the budgetted costs of a project (except for project type Campaign and Non-billable). Positive quantities only
	CostsAmountFC *float64 `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// CustomerPOnumber: Used only for PSA to store the customer&#39;s PO number
	CustomerPOnumber *string `json:",omitempty"`

	// Description: Description of the project
	Description *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// DivisionName: Name of Division
	DivisionName *string `json:",omitempty"`

	// EndDate: End date of the project. In combination with the start date the status is determined
	EndDate *Date `json:",omitempty"`

	// FixedPriceItem: Item used for fixed price invoicing. To be defined per project. If empty the functionality relies on the setting
	FixedPriceItem *GUID `json:",omitempty"`

	// FixedPriceItemDescription: Description of FixedPriceItem
	FixedPriceItemDescription *string `json:",omitempty"`

	// InternalNotes: Internal notes not to be printed in invoice
	InternalNotes *string `json:",omitempty"`

	// InvoiceAsQuoted: Is invoice as quoted
	InvoiceAsQuoted *bool `json:",omitempty"`

	// InvoiceTerms: Collection of invoice terms
	InvoiceTerms *[]byte `json:",omitempty"`

	// Manager: Responsible person for this project
	Manager *GUID `json:",omitempty"`

	// ManagerFullname: Name of Manager
	ManagerFullname *string `json:",omitempty"`

	// MarkupPercentage: Purchase markup percentage
	MarkupPercentage *float64 `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// Notes: For additional information about projects
	Notes *string `json:",omitempty"`

	// PrepaidItem: Used only for PSA. This item is used for prepaid invoicing. If left empty, the functionality relies on a setting
	PrepaidItem *GUID `json:",omitempty"`

	// PrepaidItemDescription: Description of PrepaidItem
	PrepaidItemDescription *string `json:",omitempty"`

	// PrepaidType: PrepaidType: 1-Retainer, 2-Hour type bundle
	PrepaidType *int `json:",omitempty"`

	// PrepaidTypeDescription: Description of PrepaidType
	PrepaidTypeDescription *string `json:",omitempty"`

	// ProjectRestrictionEmployees: Collection of employee restrictions
	ProjectRestrictionEmployees *[]byte `json:",omitempty"`

	// ProjectRestrictionItems: Collection of item restrictions
	ProjectRestrictionItems *[]byte `json:",omitempty"`

	// ProjectRestrictionRebillings: Collection of rebilling restrictions
	ProjectRestrictionRebillings *[]byte `json:",omitempty"`

	// SalesTimeQuantity: Budgeted time. Total number of hours estimated for the fixed price project
	SalesTimeQuantity *float64 `json:",omitempty"`

	// SourceQuotation: Source quotation
	SourceQuotation *GUID `json:",omitempty"`

	// StartDate: Start date of a project. In combination with the end date the status is determined
	StartDate *Date `json:",omitempty"`

	// TimeQuantityToAlert: Alert when exceeding (Hours)
	TimeQuantityToAlert *float64 `json:",omitempty"`

	// Type: Reference to ProjectTypes
	Type *int `json:",omitempty"`

	// TypeDescription: Description of Type
	TypeDescription *string `json:",omitempty"`

	// UseBillingMilestones: Using billing milestones
	UseBillingMilestones *bool `json:",omitempty"`
}

func (s *ProjectProjects) GetIdentifier() GUID {
	return *s.ID
}

// List the Projects entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectProjectsService) List(ctx context.Context, division int, all bool) ([]*ProjectProjects, error) {
	var entities []*ProjectProjects
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/project/Projects?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
