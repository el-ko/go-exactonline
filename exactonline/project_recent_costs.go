// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ProjectRecentCostsService is responsible for communicating with
// the RecentCosts endpoint of the Project service.
type ProjectRecentCostsService service

// ProjectRecentCosts:
// Service: Project
// Entity: RecentCosts
// URL: /api/v1/{division}/read/project/RecentCosts
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadProjectRecentCosts
type ProjectRecentCosts struct {
	// Id: Primary key
	Id *int `json:",omitempty"`

	// AccountCode: Code of Account
	AccountCode *string `json:",omitempty"`

	// AccountId: Reference to Account
	AccountId *GUID `json:",omitempty"`

	// AccountName: Name of Account
	AccountName *string `json:",omitempty"`

	// AmountApproved: Amount approved
	AmountApproved *float64 `json:",omitempty"`

	// AmountDraft: Amount draft
	AmountDraft *float64 `json:",omitempty"`

	// AmountRejected: Amount rejected
	AmountRejected *float64 `json:",omitempty"`

	// AmountSubmitted: Amount submitted
	AmountSubmitted *float64 `json:",omitempty"`

	// CurrencyCode: Code of Currency
	CurrencyCode *string `json:",omitempty"`

	// Date: Date
	Date *Date `json:",omitempty"`

	// EntryId: Entry ID
	EntryId *GUID `json:",omitempty"`

	// Expense: Reference to Expense
	Expense *GUID `json:",omitempty"`

	// ExpenseDescription: Description of Expense
	ExpenseDescription *string `json:",omitempty"`

	// ItemCode: Code of Item
	ItemCode *string `json:",omitempty"`

	// ItemDescription: Description of Item
	ItemDescription *string `json:",omitempty"`

	// ItemId: Reference to Item
	ItemId *GUID `json:",omitempty"`

	// Notes: Remarks
	Notes *string `json:",omitempty"`

	// ProjectCode: Code of Project
	ProjectCode *string `json:",omitempty"`

	// ProjectDescription: Description of Project
	ProjectDescription *string `json:",omitempty"`

	// ProjectId: Reference to Project
	ProjectId *GUID `json:",omitempty"`

	// QuantityApproved: Quantity approved
	QuantityApproved *float64 `json:",omitempty"`

	// QuantityDraft: Quantity draft
	QuantityDraft *float64 `json:",omitempty"`

	// QuantityRejected: Quantity rejected
	QuantityRejected *float64 `json:",omitempty"`

	// QuantitySubmitted: Quantity submitted
	QuantitySubmitted *float64 `json:",omitempty"`

	// WeekNumber: Week number
	WeekNumber *int `json:",omitempty"`
}

func (s *ProjectRecentCosts) GetIdentifier() int {
	return *s.Id
}

// List the RecentCosts entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectRecentCostsService) List(ctx context.Context, division int, all bool) ([]*ProjectRecentCosts, error) {
	var entities []*ProjectRecentCosts
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/RecentCosts?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
