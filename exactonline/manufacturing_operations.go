// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ManufacturingOperationsService is responsible for communicating with
// the Operations endpoint of the Manufacturing service.
type ManufacturingOperationsService service

// ManufacturingOperations:
// Service: Manufacturing
// Entity: Operations
// URL: /api/v1/{division}/manufacturing/Operations
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingOperations
type ManufacturingOperations struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Code: Code of the operation
	Code *string `json:"Code,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of the operation
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// HasSuppliers: Indicates if the operation has suppliers associated with it
	HasSuppliers *byte `json:"HasSuppliers,omitempty"`

	// Item: Reference to Items table
	Item *GUID `json:"Item,omitempty"`

	// ItemDescription: Description of Item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Extra remarks
	Notes *string `json:"Notes,omitempty"`

	// Searchcode: Search code for the operation
	Searchcode *string `json:"Searchcode,omitempty"`

	// Status: Status of the operation
	Status *int `json:"Status,omitempty"`
}

func (s *ManufacturingOperations) GetIdentifier() GUID {
	return *s.ID
}

// List the Operations entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ManufacturingOperationsService) List(ctx context.Context, division int, all bool) ([]*ManufacturingOperations, error) {
	var entities []*ManufacturingOperations
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/Operations?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the Operations enitity, by ID.
func (s *ManufacturingOperationsService) Get(ctx context.Context, division int, id GUID) (*ManufacturingOperations, error) {
	var entities []*ManufacturingOperations
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/Operations?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d Operations entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
