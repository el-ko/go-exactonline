// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// InventoryAssemblyOrdersService is responsible for communicating with
// the AssemblyOrders endpoint of the Inventory service.
type InventoryAssemblyOrdersService service

// InventoryAssemblyOrders:
// Service: Inventory
// Entity: AssemblyOrders
// URL: /api/v1/{division}/inventory/AssemblyOrders
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryAssemblyOrders
type InventoryAssemblyOrders struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// AssemblyDate: Planned date for assembly of the item
	AssemblyDate *Date `json:",omitempty"`

	// Description: Description of assembly order
	Description *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// FinishedQuantity: Quantity of items that have actually been assembled
	FinishedQuantity *float64 `json:",omitempty"`

	// Item: Reference to item
	Item *GUID `json:",omitempty"`

	// ItemCode: Item code
	ItemCode *string `json:",omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:",omitempty"`

	// Notes: Notes of the assembly order
	Notes *string `json:",omitempty"`

	// OrderDate: Date of the assembly order is initiated
	OrderDate *Date `json:",omitempty"`

	// OrderNumber: Assembly order number
	OrderNumber *int `json:",omitempty"`

	// OrderStatus: Assembly order status: 20 = Open, 30 = Partial, 50 = Complete
	OrderStatus *int `json:",omitempty"`

	// PartItems: Collection of part items for assembly order
	PartItems *[]byte `json:",omitempty"`

	// PlannedQuantity: Planned quantity of the item to be assembled
	PlannedQuantity *float64 `json:",omitempty"`

	// StorageLocation: Reference to storage location
	StorageLocation *GUID `json:",omitempty"`

	// StorageLocationCode: Storage location code
	StorageLocationCode *string `json:",omitempty"`

	// StorageLocationDescription: Storage location description
	StorageLocationDescription *string `json:",omitempty"`

	// Warehouse: Warehouse
	Warehouse *GUID `json:",omitempty"`

	// WarehouseCode: Code of Warehouse
	WarehouseCode *string `json:",omitempty"`

	// WarehouseDescription: Description of Warehouse
	WarehouseDescription *string `json:",omitempty"`
}

func (s *InventoryAssemblyOrders) GetIdentifier() GUID {
	return *s.ID
}

// List the AssemblyOrders entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *InventoryAssemblyOrdersService) List(ctx context.Context, division int, all bool) ([]*InventoryAssemblyOrders, error) {
	var entities []*InventoryAssemblyOrders
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/AssemblyOrders?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
