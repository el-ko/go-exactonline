// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// SystemDivisionsService is responsible for communicating with
// the Divisions endpoint of the System service.
type SystemDivisionsService service

// SystemDivisions:
// Service: System
// Entity: Divisions
// URL: /api/v1/{division}/system/Divisions
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SystemSystemDivisions
type SystemDivisions struct {
	// Code: Primary key
	Code *int `json:",omitempty"`

	// AddressLine1: Address line 1
	AddressLine1 *string `json:",omitempty"`

	// AddressLine2: Address line 2
	AddressLine2 *string `json:",omitempty"`

	// AddressLine3: Address line 3
	AddressLine3 *string `json:",omitempty"`

	// BlockingStatus: Values: 0 = Not blocked, 1 = Backup, 2 = Conversion busy, 3 = Conversion shadow, 4 = Conversion waiting, 5 = Copy data waiting, 6 = Copy data buzy, 100 = Wait for deletion, 101 = Deleted, 102 = Deletion failed
	BlockingStatus *int `json:",omitempty"`

	// BusinessTypeCode: Business Type Code
	BusinessTypeCode *string `json:",omitempty"`

	// BusinessTypeDescription: Business Type Description
	BusinessTypeDescription *string `json:",omitempty"`

	// ChamberOfCommerceEstablishment: Chamber of commerce establishment
	ChamberOfCommerceEstablishment *string `json:",omitempty"`

	// ChamberOfCommerceNumber: Chamber of commerce number
	ChamberOfCommerceNumber *string `json:",omitempty"`

	// City: City
	City *string `json:",omitempty"`

	// Class_01: First division classification. User should have access rights to view division classifications.
	Class_01 *[]byte `json:",omitempty"`

	// Class_02: Second division classification. User should have access rights to view division classifications.
	Class_02 *[]byte `json:",omitempty"`

	// Class_03: Third division classification. User should have access rights to view division classifications.
	Class_03 *[]byte `json:",omitempty"`

	// Class_04: Fourth division classification. User should have access rights to view division classifications.
	Class_04 *[]byte `json:",omitempty"`

	// Class_05: Fifth division classification. User should have access rights to view division classifications.
	Class_05 *[]byte `json:",omitempty"`

	// CompanySizeCode: Company Size Code
	CompanySizeCode *string `json:",omitempty"`

	// CompanySizeDescription: Company Size Description
	CompanySizeDescription *string `json:",omitempty"`

	// Country: Country of the division. Is used for determination of legislation
	Country *string `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:",omitempty"`

	// Currency: Default currency
	Currency *string `json:",omitempty"`

	// Current: True when this division is most recently used by the API
	Current *bool `json:",omitempty"`

	// Customer: Owner account of the division
	Customer *GUID `json:",omitempty"`

	// CustomerCode: Owner account code of the division
	CustomerCode *string `json:",omitempty"`

	// CustomerName: Owner account name of the division
	CustomerName *string `json:",omitempty"`

	// DatevAccountantNumber: Accountant number DATEV (Germany)
	DatevAccountantNumber *string `json:",omitempty"`

	// DatevClientNumber: Client number DATEV (Germany)
	DatevClientNumber *string `json:",omitempty"`

	// Description: Description
	Description *string `json:",omitempty"`

	// Email: Email address
	Email *string `json:",omitempty"`

	// Fax: Fax number
	Fax *string `json:",omitempty"`

	// Hid: Company number that is assigned by the customer
	Hid *int64 `json:",omitempty"`

	// IsMainDivision: True if the division is the main division
	IsMainDivision *bool `json:",omitempty"`

	// Legislation: Legislation
	Legislation *string `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:",omitempty"`

	// Phone: Phone number
	Phone *string `json:",omitempty"`

	// Postcode: Postcode
	Postcode *string `json:",omitempty"`

	// SbiCode: SBI Code
	SbiCode *string `json:",omitempty"`

	// SbiDescription: SBI Description
	SbiDescription *string `json:",omitempty"`

	// SectorCode: Sector Code
	SectorCode *string `json:",omitempty"`

	// SectorDescription: Sector Description
	SectorDescription *string `json:",omitempty"`

	// ShareCapital: the part of the capital of a company that comes from the issue of shares (France)
	ShareCapital *float64 `json:",omitempty"`

	// SiretNumber: An INSEE code which allows the geographic identification of the company. (France)
	SiretNumber *string `json:",omitempty"`

	// StartDate: Date on which the division becomes active
	StartDate *Date `json:",omitempty"`

	// State: State/Province code
	State *string `json:",omitempty"`

	// Status: Follow the Division Status 0 for Inactive, 1 for Active and 2 for Archived Divisions
	Status *int `json:",omitempty"`

	// SubsectorCode: Subsector Code
	SubsectorCode *string `json:",omitempty"`

	// SubsectorDescription: Subsector Description
	SubsectorDescription *string `json:",omitempty"`

	// TaxOfficeNumber: Number of your local tax authority (Germany)
	TaxOfficeNumber *string `json:",omitempty"`

	// TaxReferenceNumber: Local tax reference number (Germany)
	TaxReferenceNumber *string `json:",omitempty"`

	// VATNumber: The number under which the account is known at the Value Added Tax collection agency
	VATNumber *string `json:",omitempty"`

	// Website: Customer value, hyperlink to external website
	Website *string `json:",omitempty"`
}

func (s *SystemDivisions) GetIdentifier() int {
	return *s.Code
}

// List the Divisions entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SystemDivisionsService) List(ctx context.Context, division int, all bool) ([]*SystemDivisions, error) {
	var entities []*SystemDivisions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/system/Divisions?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
