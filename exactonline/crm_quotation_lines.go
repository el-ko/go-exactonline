// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// CRMQuotationLinesService is responsible for communicating with
// the QuotationLines endpoint of the CRM service.
type CRMQuotationLinesService service

// CRMQuotationLines:
// Service: CRM
// Entity: QuotationLines
// URL: /api/v1/{division}/crm/QuotationLines
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CRMQuotationLines
type CRMQuotationLines struct {
	// ID:
	ID *GUID `json:",omitempty"`

	// AmountDC:
	AmountDC *float64 `json:",omitempty"`

	// AmountFC:
	AmountFC *float64 `json:",omitempty"`

	// Description:
	Description *string `json:",omitempty"`

	// Discount:
	Discount *float64 `json:",omitempty"`

	// Division:
	Division *int `json:",omitempty"`

	// Item:
	Item *GUID `json:",omitempty"`

	// ItemDescription:
	ItemDescription *string `json:",omitempty"`

	// LineNumber:
	LineNumber *int `json:",omitempty"`

	// NetPrice:
	NetPrice *float64 `json:",omitempty"`

	// Notes:
	Notes *string `json:",omitempty"`

	// Quantity:
	Quantity *float64 `json:",omitempty"`

	// QuotationID:
	QuotationID *GUID `json:",omitempty"`

	// QuotationNumber:
	QuotationNumber *int `json:",omitempty"`

	// UnitCode:
	UnitCode *string `json:",omitempty"`

	// UnitDescription:
	UnitDescription *string `json:",omitempty"`

	// UnitPrice:
	UnitPrice *float64 `json:",omitempty"`

	// VATAmountFC:
	VATAmountFC *float64 `json:",omitempty"`

	// VATCode:
	VATCode *string `json:",omitempty"`

	// VATDescription:
	VATDescription *string `json:",omitempty"`

	// VATPercentage:
	VATPercentage *float64 `json:",omitempty"`

	// VersionNumber:
	VersionNumber *int `json:",omitempty"`
}

func (s *CRMQuotationLines) GetIdentifier() GUID {
	return *s.ID
}

// List the QuotationLines entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *CRMQuotationLinesService) List(ctx context.Context, division int, all bool) ([]*CRMQuotationLines, error) {
	var entities []*CRMQuotationLines
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/QuotationLines?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
