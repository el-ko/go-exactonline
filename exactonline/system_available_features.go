// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// SystemAvailableFeaturesService is responsible for communicating with
// the AvailableFeatures endpoint of the System service.
type SystemAvailableFeaturesService service

// SystemAvailableFeatures:
// Service: System
// Entity: AvailableFeatures
// URL: /api/v1/{division}/system/AvailableFeatures
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SystemSystemAvailableFeatures
type SystemAvailableFeatures struct {
	// ID: The ID of the feature.
	ID *int `json:"ID,omitempty"`

	// Description: The description of the feature.
	Description *string `json:"Description,omitempty"`
}

func (s *SystemAvailableFeatures) GetIdentifier() int {
	return *s.ID
}

// List the AvailableFeatures entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SystemAvailableFeaturesService) List(ctx context.Context, division int, all bool) ([]*SystemAvailableFeatures, error) {
	var entities []*SystemAvailableFeatures
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/system/AvailableFeatures?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the AvailableFeatures enitity, by ID.
func (s *SystemAvailableFeaturesService) Get(ctx context.Context, division int, id int) (*SystemAvailableFeatures, error) {
	var entities []*SystemAvailableFeatures
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/system/AvailableFeatures?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d AvailableFeatures entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
