// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ProjectProjectPlanningService is responsible for communicating with
// the ProjectPlanning endpoint of the Project service.
type ProjectProjectPlanningService service

// ProjectProjectPlanning:
// Service: Project
// Entity: ProjectPlanning
// URL: /api/v1/{division}/project/ProjectPlanning
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectProjectPlanning
type ProjectProjectPlanning struct {
	// ID:
	ID *GUID `json:",omitempty"`

	// Account:
	Account *GUID `json:",omitempty"`

	// AccountCode:
	AccountCode *string `json:",omitempty"`

	// AccountName:
	AccountName *string `json:",omitempty"`

	// BGTStatus:
	BGTStatus *int `json:",omitempty"`

	// CommunicationErrorStatus:
	CommunicationErrorStatus *int `json:",omitempty"`

	// Created:
	Created *Date `json:",omitempty"`

	// Creator:
	Creator *GUID `json:",omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:",omitempty"`

	// Description:
	Description *string `json:",omitempty"`

	// Division:
	Division *int `json:",omitempty"`

	// Employee:
	Employee *GUID `json:",omitempty"`

	// EmployeeCode:
	EmployeeCode *string `json:",omitempty"`

	// EmployeeHID:
	EmployeeHID *int `json:",omitempty"`

	// EndDate:
	EndDate *Date `json:",omitempty"`

	// Hours:
	Hours *float64 `json:",omitempty"`

	// HourType:
	HourType *GUID `json:",omitempty"`

	// HourTypeCode:
	HourTypeCode *string `json:",omitempty"`

	// HourTypeDescription:
	HourTypeDescription *string `json:",omitempty"`

	// IsBrokenRecurrence:
	IsBrokenRecurrence *bool `json:",omitempty"`

	// Modified:
	Modified *Date `json:",omitempty"`

	// Modifier:
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:",omitempty"`

	// Notes:
	Notes *string `json:",omitempty"`

	// OverAllocate:
	OverAllocate *bool `json:",omitempty"`

	// Project:
	Project *GUID `json:",omitempty"`

	// ProjectCode:
	ProjectCode *string `json:",omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:",omitempty"`

	// ProjectPlanningRecurring:
	ProjectPlanningRecurring *GUID `json:",omitempty"`

	// ProjectWBS:
	ProjectWBS *GUID `json:",omitempty"`

	// ProjectWBSDescription:
	ProjectWBSDescription *string `json:",omitempty"`

	// StartDate:
	StartDate *Date `json:",omitempty"`

	// Status:
	Status *int `json:",omitempty"`

	// Type:
	Type *int `json:",omitempty"`
}

func (s *ProjectProjectPlanning) GetIdentifier() GUID {
	return *s.ID
}

// List the ProjectPlanning entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectProjectPlanningService) List(ctx context.Context, division int, all bool) ([]*ProjectProjectPlanning, error) {
	var entities []*ProjectProjectPlanning
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanning?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
