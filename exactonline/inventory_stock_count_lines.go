// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// InventoryStockCountLinesService is responsible for communicating with
// the StockCountLines endpoint of the Inventory service.
type InventoryStockCountLinesService service

// InventoryStockCountLines:
// Service: Inventory
// Entity: StockCountLines
// URL: /api/v1/{division}/inventory/StockCountLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryStockCountLines
type InventoryStockCountLines struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// BatchNumbers: The collection of batch numbers that belong to the items included in this stock count
	BatchNumbers *[]byte `json:",omitempty"`

	// CostPrice: Cost price of the item that is used to create the stock count
	CostPrice *float64 `json:",omitempty"`

	// CountedBy: Counted by
	CountedBy *GUID `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// Item: Reference to the item for which the stock is counted
	Item *GUID `json:",omitempty"`

	// ItemCode: Item code
	ItemCode *string `json:",omitempty"`

	// ItemCostPrice: Current standard/actual item cost price
	ItemCostPrice *float64 `json:",omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:",omitempty"`

	// ItemDivisable: Indicates if fractional quantities of the item can be used, for example quantity = 0.4
	ItemDivisable *bool `json:",omitempty"`

	// LineNumber: Line number
	LineNumber *int `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// QuantityDifference: The difference between the current quantity in stock and the new quantity in stock. For example specify -1 for this field to correct the quantity if one item in stock is broken.
	QuantityDifference *float64 `json:",omitempty"`

	// QuantityInStock: The current quantity available in stock
	QuantityInStock *float64 `json:",omitempty"`

	// QuantityNew: The new quantity in stock. Use this field to correct the quantity when the items in stock are physically counted.
	QuantityNew *float64 `json:",omitempty"`

	// SerialNumbers: The collection of serial numbers that belong to the items included in this stock count
	SerialNumbers *[]byte `json:",omitempty"`

	// StockCountID: Identifies the stock count. All the lines of a stock count have the same StockCountID
	StockCountID *GUID `json:",omitempty"`

	// StockKeepingUnit: Stock item&#39;s unit description
	StockKeepingUnit *string `json:",omitempty"`

	// StorageLocation: This property is package specific (Stock count can have multiple lines for the same item only if it is for multiple storage locations).
	StorageLocation *GUID `json:",omitempty"`

	// StorageLocationCode: Storage location code
	StorageLocationCode *string `json:",omitempty"`

	// StorageLocationDescription: Storage location description
	StorageLocationDescription *string `json:",omitempty"`
}

func (s *InventoryStockCountLines) GetIdentifier() GUID {
	return *s.ID
}

// List the StockCountLines entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *InventoryStockCountLinesService) List(ctx context.Context, division int, all bool) ([]*InventoryStockCountLines, error) {
	var entities []*InventoryStockCountLines
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockCountLines?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
