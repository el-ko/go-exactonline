// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ProjectProjectPlanningRecurringService is responsible for communicating with
// the ProjectPlanningRecurring endpoint of the Project service.
type ProjectProjectPlanningRecurringService service

// ProjectProjectPlanningRecurring:
// Service: Project
// Entity: ProjectPlanningRecurring
// URL: /api/v1/{division}/project/ProjectPlanningRecurring
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectProjectPlanningRecurring
type ProjectProjectPlanningRecurring struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// Account: Account linked to the recurring planning
	Account *GUID `json:",omitempty"`

	// AccountCode: Code of Account
	AccountCode *string `json:",omitempty"`

	// AccountName: Name of Account
	AccountName *string `json:",omitempty"`

	// BGTStatus: Status of the project planning process, 1 = To be processed, 2 = Processed, 3 = Failed
	BGTStatus *int `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// DayOrThe: Indicates whether the recurring planning is day of the month or weekday of the month
	DayOrThe *int `json:",omitempty"`

	// Description: Description of recurring planning
	Description *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// Employee: Employee linked to the recurring planning
	Employee *GUID `json:",omitempty"`

	// EmployeeCode: Code of employee
	EmployeeCode *string `json:",omitempty"`

	// EmployeeHID: Numeric ID of the employee
	EmployeeHID *int `json:",omitempty"`

	// EndDate: End date of the recurring planning
	EndDate *Date `json:",omitempty"`

	// EndDateOrAfter: Indicates whether the recurring planning is end on end date or end after number of times
	EndDateOrAfter *int `json:",omitempty"`

	// EndTime: End time for the recurring planning to be active
	EndTime *Date `json:",omitempty"`

	// Hours: Number of hours for the recurring planning
	Hours *float64 `json:",omitempty"`

	// HourType: Hour type of the recurring planning, item with &#39;Time&#39; type
	HourType *GUID `json:",omitempty"`

	// HourTypeCode: Code of the hour type
	HourTypeCode *string `json:",omitempty"`

	// HourTypeDescription: Description of the hour type
	HourTypeDescription *string `json:",omitempty"`

	// Modified: Date modified
	Modified *Date `json:",omitempty"`

	// Modifier: Modifier user ID
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Modifier name
	ModifierFullName *string `json:",omitempty"`

	// MonthPatternDay: Day of the monthly recurring
	MonthPatternDay *byte `json:",omitempty"`

	// MonthPatternOrdinalDay: Ordinal number of week day for the monthly recurring planning, 1 = first, 2 = second, 3 = third, 4 = fourth, 31 = last
	MonthPatternOrdinalDay *byte `json:",omitempty"`

	// MonthPatternOrdinalWeek: Ordinal week day of the monthly recurring planning, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday, 7 = Sunday
	MonthPatternOrdinalWeek *byte `json:",omitempty"`

	// Notes: For additional information about recurring planning
	Notes *string `json:",omitempty"`

	// NumberOfRecurrences: Number of times the planning recurs
	NumberOfRecurrences *int `json:",omitempty"`

	// OverAllocate: Indicates whether the entries can have over allocated planning hours
	OverAllocate *bool `json:",omitempty"`

	// PatternFrequency: Number of planning times for weekly or monthly recurring planning
	PatternFrequency *byte `json:",omitempty"`

	// Project: Project linked to the recurring planning
	Project *GUID `json:",omitempty"`

	// ProjectCode: Code of project
	ProjectCode *string `json:",omitempty"`

	// ProjectDescription: Description of project
	ProjectDescription *string `json:",omitempty"`

	// ProjectPlanningRecurringType: Type of the recurring planning, 1 = weekly, 2 = monthly
	ProjectPlanningRecurringType *byte `json:",omitempty"`

	// ProjectWBS: WBS linked to the recurring planning
	ProjectWBS *GUID `json:",omitempty"`

	// ProjectWBSDescription: Description of WBS
	ProjectWBSDescription *string `json:",omitempty"`

	// StartDate: Start date of the recurring planning
	StartDate *Date `json:",omitempty"`

	// StartTime: Start time for the recurring planning to be active
	StartTime *Date `json:",omitempty"`

	// Status: Status of the project planning, 1 = Reserved, 2 = Planned
	Status *int `json:",omitempty"`

	// WeekPatternDay: Week day for the weekly recurring planning
	WeekPatternDay *byte `json:",omitempty"`

	// WeekPatternFriday: Create planning on Friday, apply to weekly pattern recurring planning only
	WeekPatternFriday *bool `json:",omitempty"`

	// WeekPatternMonday: Create planning on Monday, apply to weekly pattern recurring planning only
	WeekPatternMonday *bool `json:",omitempty"`

	// WeekPatternSaturday: Create planning on Saturday, apply to weekly pattern recurring planning only
	WeekPatternSaturday *bool `json:",omitempty"`

	// WeekPatternSunday: Create planning on Sunday, apply to weekly pattern recurring planning only
	WeekPatternSunday *bool `json:",omitempty"`

	// WeekPatternThursday: Create planning on Thursday, apply to weekly pattern recurring planning only
	WeekPatternThursday *bool `json:",omitempty"`

	// WeekPatternTuesday: Create planning on Tuesday, apply to weekly pattern recurring planning only
	WeekPatternTuesday *bool `json:",omitempty"`

	// WeekPatternWednesday: Create planning on Wednesday, apply to weekly pattern recurring planning only
	WeekPatternWednesday *bool `json:",omitempty"`
}

func (s *ProjectProjectPlanningRecurring) GetIdentifier() GUID {
	return *s.ID
}

// List the ProjectPlanningRecurring entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectProjectPlanningRecurringService) List(ctx context.Context, division int, all bool) ([]*ProjectProjectPlanningRecurring, error) {
	var entities []*ProjectProjectPlanningRecurring
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
