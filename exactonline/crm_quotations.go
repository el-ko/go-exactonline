// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// CRMQuotationsService is responsible for communicating with
// the Quotations endpoint of the CRM service.
type CRMQuotationsService service

// CRMQuotations:
// Service: CRM
// Entity: Quotations
// URL: /api/v1/{division}/crm/Quotations
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CRMQuotations
type CRMQuotations struct {
	// QuotationID:
	QuotationID *GUID `json:",omitempty"`

	// AmountDC:
	AmountDC *float64 `json:",omitempty"`

	// AmountFC:
	AmountFC *float64 `json:",omitempty"`

	// CloseDate:
	CloseDate *Date `json:",omitempty"`

	// ClosingDate:
	ClosingDate *Date `json:",omitempty"`

	// Created:
	Created *Date `json:",omitempty"`

	// Creator:
	Creator *GUID `json:",omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:",omitempty"`

	// Currency:
	Currency *string `json:",omitempty"`

	// DeliveryAccount:
	DeliveryAccount *GUID `json:",omitempty"`

	// DeliveryAccountCode:
	DeliveryAccountCode *string `json:",omitempty"`

	// DeliveryAccountContact:
	DeliveryAccountContact *GUID `json:",omitempty"`

	// DeliveryAccountContactFullName:
	DeliveryAccountContactFullName *string `json:",omitempty"`

	// DeliveryAccountName:
	DeliveryAccountName *string `json:",omitempty"`

	// DeliveryAddress:
	DeliveryAddress *GUID `json:",omitempty"`

	// Description:
	Description *string `json:",omitempty"`

	// Division:
	Division *int `json:",omitempty"`

	// Document:
	Document *GUID `json:",omitempty"`

	// DocumentSubject:
	DocumentSubject *string `json:",omitempty"`

	// DueDate:
	DueDate *Date `json:",omitempty"`

	// InvoiceAccount:
	InvoiceAccount *GUID `json:",omitempty"`

	// InvoiceAccountCode:
	InvoiceAccountCode *string `json:",omitempty"`

	// InvoiceAccountContact:
	InvoiceAccountContact *GUID `json:",omitempty"`

	// InvoiceAccountContactFullName:
	InvoiceAccountContactFullName *string `json:",omitempty"`

	// InvoiceAccountName:
	InvoiceAccountName *string `json:",omitempty"`

	// Modified:
	Modified *Date `json:",omitempty"`

	// Modifier:
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:",omitempty"`

	// Opportunity:
	Opportunity *GUID `json:",omitempty"`

	// OpportunityName:
	OpportunityName *string `json:",omitempty"`

	// OrderAccount:
	OrderAccount *GUID `json:",omitempty"`

	// OrderAccountCode:
	OrderAccountCode *string `json:",omitempty"`

	// OrderAccountContact:
	OrderAccountContact *GUID `json:",omitempty"`

	// OrderAccountContactFullName:
	OrderAccountContactFullName *string `json:",omitempty"`

	// OrderAccountName:
	OrderAccountName *string `json:",omitempty"`

	// Project:
	Project *GUID `json:",omitempty"`

	// ProjectCode:
	ProjectCode *string `json:",omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:",omitempty"`

	// QuotationDate:
	QuotationDate *Date `json:",omitempty"`

	// QuotationLines:
	QuotationLines *[]byte `json:",omitempty"`

	// QuotationNumber:
	QuotationNumber *int `json:",omitempty"`

	// Remarks:
	Remarks *string `json:",omitempty"`

	// SalesPerson:
	SalesPerson *GUID `json:",omitempty"`

	// SalesPersonFullName:
	SalesPersonFullName *string `json:",omitempty"`

	// Status:
	Status *int `json:",omitempty"`

	// StatusDescription:
	StatusDescription *string `json:",omitempty"`

	// VATAmountFC:
	VATAmountFC *float64 `json:",omitempty"`

	// VersionNumber:
	VersionNumber *int `json:",omitempty"`

	// YourRef:
	YourRef *string `json:",omitempty"`
}

func (s *CRMQuotations) GetIdentifier() GUID {
	return *s.QuotationID
}

// List the Quotations entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *CRMQuotationsService) List(ctx context.Context, division int, all bool) ([]*CRMQuotations, error) {
	var entities []*CRMQuotations
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/Quotations?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
