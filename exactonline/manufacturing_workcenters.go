// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ManufacturingWorkcentersService is responsible for communicating with
// the Workcenters endpoint of the Manufacturing service.
type ManufacturingWorkcentersService service

// ManufacturingWorkcenters:
// Service: Manufacturing
// Entity: Workcenters
// URL: /api/v1/{division}/manufacturing/Workcenters
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingWorkcenters
type ManufacturingWorkcenters struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Capacity: Capacity of the work center
	Capacity *int `json:"Capacity,omitempty"`

	// Code: Code of the work center
	Code *string `json:"Code,omitempty"`

	// Costcenter: Reference to CostCenters
	Costcenter *string `json:"Costcenter,omitempty"`

	// CostcenterDescription: Description of Costcenter
	CostcenterDescription *string `json:"CostcenterDescription,omitempty"`

	// Costunit: Reference to CostUnits
	Costunit *string `json:"Costunit,omitempty"`

	// CostunitDescription: Description of Costunit
	CostunitDescription *string `json:"CostunitDescription,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of the work center
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// GeneralBurdenRate: General burden rate
	GeneralBurdenRate *float64 `json:"GeneralBurdenRate,omitempty"`

	// IsLaborBurdenPercent: Indicates if labor burden is calculated as a percentage or amount
	IsLaborBurdenPercent *byte `json:"IsLaborBurdenPercent,omitempty"`

	// LaborBurdenRate: Labor burden rate
	LaborBurdenRate *float64 `json:"LaborBurdenRate,omitempty"`

	// MachineBurdenRate: Machine burden rate
	MachineBurdenRate *float64 `json:"MachineBurdenRate,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Remarks
	Notes *string `json:"Notes,omitempty"`

	// ProductionArea: Area to which the work center belongs.
	ProductionArea *GUID `json:"ProductionArea,omitempty"`

	// RunLaborRate: Run labor rate
	RunLaborRate *float64 `json:"RunLaborRate,omitempty"`

	// SearchCode: Search code of the work center
	SearchCode *string `json:"SearchCode,omitempty"`

	// SetupLaborRate: Setup labor rate
	SetupLaborRate *float64 `json:"SetupLaborRate,omitempty"`

	// Status: Reference to WorkcenterStatus
	Status *int `json:"Status,omitempty"`

	// Type: Reference to WorkcenterTypes
	Type *int `json:"Type,omitempty"`
}

func (s *ManufacturingWorkcenters) GetIdentifier() GUID {
	return *s.ID
}

// List the Workcenters entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ManufacturingWorkcentersService) List(ctx context.Context, division int, all bool) ([]*ManufacturingWorkcenters, error) {
	var entities []*ManufacturingWorkcenters
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/Workcenters?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the Workcenters enitity, by ID.
func (s *ManufacturingWorkcentersService) Get(ctx context.Context, division int, id GUID) (*ManufacturingWorkcenters, error) {
	var entities []*ManufacturingWorkcenters
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/Workcenters?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d Workcenters entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
