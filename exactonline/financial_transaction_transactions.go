// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// FinancialTransactionTransactionsService is responsible for communicating with
// the Transactions endpoint of the FinancialTransaction service.
type FinancialTransactionTransactionsService service

// FinancialTransactionTransactions:
// Service: FinancialTransaction
// Entity: Transactions
// URL: /api/v1/{division}/financialtransaction/Transactions
// HasWebhook: true
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=FinancialTransactionTransactions
type FinancialTransactionTransactions struct {
	// EntryID:
	EntryID *GUID `json:"EntryID,omitempty"`

	// ClosingBalanceFC:
	ClosingBalanceFC *float64 `json:"ClosingBalanceFC,omitempty"`

	// Created:
	Created *Date `json:"Created,omitempty"`

	// Date:
	Date *Date `json:"Date,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// Document:
	Document *GUID `json:"Document,omitempty"`

	// DocumentNumber:
	DocumentNumber *int `json:"DocumentNumber,omitempty"`

	// DocumentSubject:
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// EntryNumber:
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// ExternalLinkDescription:
	ExternalLinkDescription *string `json:"ExternalLinkDescription,omitempty"`

	// ExternalLinkReference:
	ExternalLinkReference *string `json:"ExternalLinkReference,omitempty"`

	// FinancialPeriod:
	FinancialPeriod *int `json:"FinancialPeriod,omitempty"`

	// FinancialYear:
	FinancialYear *int `json:"FinancialYear,omitempty"`

	// IsExtraDuty:
	IsExtraDuty *bool `json:"IsExtraDuty,omitempty"`

	// JournalCode:
	JournalCode *string `json:"JournalCode,omitempty"`

	// JournalDescription:
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// Modified:
	Modified *Date `json:"Modified,omitempty"`

	// OpeningBalanceFC:
	OpeningBalanceFC *float64 `json:"OpeningBalanceFC,omitempty"`

	// PaymentConditionCode:
	PaymentConditionCode *string `json:"PaymentConditionCode,omitempty"`

	// PaymentConditionDescription:
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// PaymentReference:
	PaymentReference *string `json:"PaymentReference,omitempty"`

	// Status:
	Status *int `json:"Status,omitempty"`

	// StatusDescription:
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// TransactionLines:
	TransactionLines *[]byte `json:"TransactionLines,omitempty"`

	// Type:
	Type *int `json:"Type,omitempty"`

	// TypeDescription:
	TypeDescription *string `json:"TypeDescription,omitempty"`
}

func (s *FinancialTransactionTransactions) GetIdentifier() GUID {
	return *s.EntryID
}

// List the Transactions entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *FinancialTransactionTransactionsService) List(ctx context.Context, division int, all bool) ([]*FinancialTransactionTransactions, error) {
	var entities []*FinancialTransactionTransactions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/financialtransaction/Transactions?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the Transactions enitity, by EntryID.
func (s *FinancialTransactionTransactionsService) Get(ctx context.Context, division int, id GUID) (*FinancialTransactionTransactions, error) {
	var entities []*FinancialTransactionTransactions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/financialtransaction/Transactions?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d Transactions entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
