// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// PurchaseOrderPurchaseOrderLinesService is responsible for communicating with
// the PurchaseOrderLines endpoint of the PurchaseOrder service.
type PurchaseOrderPurchaseOrderLinesService service

// PurchaseOrderPurchaseOrderLines:
// Service: PurchaseOrder
// Entity: PurchaseOrderLines
// URL: /api/v1/{division}/purchaseorder/PurchaseOrderLines
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseOrderPurchaseOrderLines
type PurchaseOrderPurchaseOrderLines struct {
	// ID:
	ID *GUID `json:",omitempty"`

	// AmountDC:
	AmountDC *float64 `json:",omitempty"`

	// AmountFC:
	AmountFC *float64 `json:",omitempty"`

	// CostCenter:
	CostCenter *string `json:",omitempty"`

	// CostCenterDescription:
	CostCenterDescription *string `json:",omitempty"`

	// CostUnit:
	CostUnit *string `json:",omitempty"`

	// CostUnitDescription:
	CostUnitDescription *string `json:",omitempty"`

	// Created:
	Created *Date `json:",omitempty"`

	// Creator:
	Creator *GUID `json:",omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:",omitempty"`

	// Description:
	Description *string `json:",omitempty"`

	// Discount:
	Discount *float64 `json:",omitempty"`

	// Division:
	Division *int `json:",omitempty"`

	// Expense:
	Expense *GUID `json:",omitempty"`

	// ExpenseDescription:
	ExpenseDescription *string `json:",omitempty"`

	// InStock:
	InStock *float64 `json:",omitempty"`

	// InvoicedQuantity:
	InvoicedQuantity *float64 `json:",omitempty"`

	// Item:
	Item *GUID `json:",omitempty"`

	// ItemCode:
	ItemCode *string `json:",omitempty"`

	// ItemDescription:
	ItemDescription *string `json:",omitempty"`

	// ItemDivisable:
	ItemDivisable *bool `json:",omitempty"`

	// LineNumber:
	LineNumber *int `json:",omitempty"`

	// Modified:
	Modified *Date `json:",omitempty"`

	// Modifier:
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:",omitempty"`

	// NetPrice:
	NetPrice *float64 `json:",omitempty"`

	// Notes:
	Notes *string `json:",omitempty"`

	// Project:
	Project *GUID `json:",omitempty"`

	// ProjectCode:
	ProjectCode *string `json:",omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:",omitempty"`

	// ProjectedStock:
	ProjectedStock *float64 `json:",omitempty"`

	// PurchaseOrderID:
	PurchaseOrderID *GUID `json:",omitempty"`

	// Quantity:
	Quantity *float64 `json:",omitempty"`

	// QuantityInPurchaseUnits:
	QuantityInPurchaseUnits *float64 `json:",omitempty"`

	// Rebill:
	Rebill *bool `json:",omitempty"`

	// ReceiptDate:
	ReceiptDate *Date `json:",omitempty"`

	// ReceivedQuantity:
	ReceivedQuantity *float64 `json:",omitempty"`

	// SalesOrder:
	SalesOrder *GUID `json:",omitempty"`

	// SalesOrderLine:
	SalesOrderLine *GUID `json:",omitempty"`

	// SalesOrderLineNumber:
	SalesOrderLineNumber *int `json:",omitempty"`

	// SalesOrderNumber:
	SalesOrderNumber *int `json:",omitempty"`

	// SupplierItemCode:
	SupplierItemCode *string `json:",omitempty"`

	// SupplierItemCopyRemarks:
	SupplierItemCopyRemarks *byte `json:",omitempty"`

	// Unit:
	Unit *string `json:",omitempty"`

	// UnitDescription:
	UnitDescription *string `json:",omitempty"`

	// UnitPrice:
	UnitPrice *float64 `json:",omitempty"`

	// VATAmount:
	VATAmount *float64 `json:",omitempty"`

	// VATCode:
	VATCode *string `json:",omitempty"`

	// VATDescription:
	VATDescription *string `json:",omitempty"`

	// VATPercentage:
	VATPercentage *float64 `json:",omitempty"`
}

func (s *PurchaseOrderPurchaseOrderLines) GetIdentifier() GUID {
	return *s.ID
}

// List the PurchaseOrderLines entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseOrderPurchaseOrderLinesService) List(ctx context.Context, division int, all bool) ([]*PurchaseOrderPurchaseOrderLines, error) {
	var entities []*PurchaseOrderPurchaseOrderLines
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrderLines?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
