// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// GeneralJournalEntryGeneralJournalEntriesService is responsible for communicating with
// the GeneralJournalEntries endpoint of the GeneralJournalEntry service.
type GeneralJournalEntryGeneralJournalEntriesService service

// GeneralJournalEntryGeneralJournalEntries:
// Service: GeneralJournalEntry
// Entity: GeneralJournalEntries
// URL: /api/v1/{division}/generaljournalentry/GeneralJournalEntries
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=GeneralJournalEntryGeneralJournalEntries
type GeneralJournalEntryGeneralJournalEntries struct {
	// EntryID:
	EntryID *GUID `json:",omitempty"`

	// Created:
	Created *Date `json:",omitempty"`

	// Currency:
	Currency *string `json:",omitempty"`

	// Division:
	Division *int `json:",omitempty"`

	// EntryNumber:
	EntryNumber *int `json:",omitempty"`

	// ExchangeRate:
	ExchangeRate *float64 `json:",omitempty"`

	// FinancialPeriod:
	FinancialPeriod *int `json:",omitempty"`

	// FinancialYear:
	FinancialYear *int `json:",omitempty"`

	// GeneralJournalEntryLines:
	GeneralJournalEntryLines *[]byte `json:",omitempty"`

	// JournalCode:
	JournalCode *string `json:",omitempty"`

	// JournalDescription:
	JournalDescription *string `json:",omitempty"`

	// Modified:
	Modified *Date `json:",omitempty"`

	// Reversal:
	Reversal *bool `json:",omitempty"`

	// Status:
	Status *int `json:",omitempty"`

	// StatusDescription:
	StatusDescription *string `json:",omitempty"`

	// Type:
	Type *int `json:",omitempty"`

	// TypeDescription:
	TypeDescription *string `json:",omitempty"`
}

func (s *GeneralJournalEntryGeneralJournalEntries) GetIdentifier() GUID {
	return *s.EntryID
}

// List the GeneralJournalEntries entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *GeneralJournalEntryGeneralJournalEntriesService) List(ctx context.Context, division int, all bool) ([]*GeneralJournalEntryGeneralJournalEntries, error) {
	var entities []*GeneralJournalEntryGeneralJournalEntries
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/generaljournalentry/GeneralJournalEntries?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
