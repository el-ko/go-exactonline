// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ProjectTimeAndBillingEntryAccountsService is responsible for communicating with
// the TimeAndBillingEntryAccounts endpoint of the Project service.
type ProjectTimeAndBillingEntryAccountsService service

// ProjectTimeAndBillingEntryAccounts:
// Service: Project
// Entity: TimeAndBillingEntryAccounts
// URL: /api/v1/{division}/read/project/TimeAndBillingEntryAccounts
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadProjectTimeAndBillingEntryAccounts
type ProjectTimeAndBillingEntryAccounts struct {
	// AccountId: Primary key
	AccountId *GUID `json:"AccountId,omitempty"`

	// AccountName: Name of account
	AccountName *string `json:"AccountName,omitempty"`
}

func (s *ProjectTimeAndBillingEntryAccounts) GetIdentifier() GUID {
	return *s.AccountId
}

// List the TimeAndBillingEntryAccounts entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectTimeAndBillingEntryAccountsService) List(ctx context.Context, division int, all bool) ([]*ProjectTimeAndBillingEntryAccounts, error) {
	var entities []*ProjectTimeAndBillingEntryAccounts
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/TimeAndBillingEntryAccounts?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the TimeAndBillingEntryAccounts enitity, by AccountId.
func (s *ProjectTimeAndBillingEntryAccountsService) Get(ctx context.Context, division int, id GUID) (*ProjectTimeAndBillingEntryAccounts, error) {
	var entities []*ProjectTimeAndBillingEntryAccounts
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/TimeAndBillingEntryAccounts?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d TimeAndBillingEntryAccounts entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
