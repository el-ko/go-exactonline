// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// FinancialFinancialPeriodsService is responsible for communicating with
// the FinancialPeriods endpoint of the Financial service.
type FinancialFinancialPeriodsService service

// FinancialFinancialPeriods:
// Service: Financial
// Entity: FinancialPeriods
// URL: /api/v1/{division}/financial/FinancialPeriods
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=FinancialFinancialPeriods
type FinancialFinancialPeriods struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// EndDate: The end date of the period
	EndDate *Date `json:",omitempty"`

	// FinPeriod: The financial period. Usually the period is a month or quarter with period 1 starting on the first of January.
	FinPeriod *int `json:",omitempty"`

	// FinYear: The financial year. The financial year and calendar year are not always aligned.
	FinYear *int `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// StartDate: The start date of a period. A start date should always succeed a previous end date. Except for the first year/period combination
	StartDate *Date `json:",omitempty"`
}

func (s *FinancialFinancialPeriods) GetIdentifier() GUID {
	return *s.ID
}

// List the FinancialPeriods entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *FinancialFinancialPeriodsService) List(ctx context.Context, division int, all bool) ([]*FinancialFinancialPeriods, error) {
	var entities []*FinancialFinancialPeriods
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/FinancialPeriods?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
