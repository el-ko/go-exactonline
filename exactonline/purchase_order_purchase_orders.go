// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// PurchaseOrderPurchaseOrdersService is responsible for communicating with
// the PurchaseOrders endpoint of the PurchaseOrder service.
type PurchaseOrderPurchaseOrdersService service

// PurchaseOrderPurchaseOrders:
// Service: PurchaseOrder
// Entity: PurchaseOrders
// URL: /api/v1/{division}/purchaseorder/PurchaseOrders
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseOrderPurchaseOrders
type PurchaseOrderPurchaseOrders struct {
	// PurchaseOrderID:
	PurchaseOrderID *GUID `json:",omitempty"`

	// AmountDC:
	AmountDC *float64 `json:",omitempty"`

	// AmountFC:
	AmountFC *float64 `json:",omitempty"`

	// Created:
	Created *Date `json:",omitempty"`

	// Creator:
	Creator *GUID `json:",omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:",omitempty"`

	// Currency:
	Currency *string `json:",omitempty"`

	// DeliveryAccount:
	DeliveryAccount *GUID `json:",omitempty"`

	// DeliveryAccountCode:
	DeliveryAccountCode *string `json:",omitempty"`

	// DeliveryAccountName:
	DeliveryAccountName *string `json:",omitempty"`

	// DeliveryAddress:
	DeliveryAddress *GUID `json:",omitempty"`

	// DeliveryContact:
	DeliveryContact *GUID `json:",omitempty"`

	// DeliveryContactPersonFullName:
	DeliveryContactPersonFullName *string `json:",omitempty"`

	// Description:
	Description *string `json:",omitempty"`

	// Division:
	Division *int `json:",omitempty"`

	// Document:
	Document *GUID `json:",omitempty"`

	// DocumentSubject:
	DocumentSubject *string `json:",omitempty"`

	// DropShipment:
	DropShipment *bool `json:",omitempty"`

	// ExchangeRate:
	ExchangeRate *float64 `json:",omitempty"`

	// InvoiceStatus:
	InvoiceStatus *int `json:",omitempty"`

	// Modified:
	Modified *Date `json:",omitempty"`

	// Modifier:
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:",omitempty"`

	// OrderDate:
	OrderDate *Date `json:",omitempty"`

	// OrderNumber:
	OrderNumber *int `json:",omitempty"`

	// OrderStatus:
	OrderStatus *int `json:",omitempty"`

	// PaymentCondition:
	PaymentCondition *string `json:",omitempty"`

	// PaymentConditionDescription:
	PaymentConditionDescription *string `json:",omitempty"`

	// PurchaseAgent:
	PurchaseAgent *GUID `json:",omitempty"`

	// PurchaseAgentFullName:
	PurchaseAgentFullName *string `json:",omitempty"`

	// PurchaseOrderLines:
	PurchaseOrderLines *[]byte `json:",omitempty"`

	// ReceiptDate:
	ReceiptDate *Date `json:",omitempty"`

	// ReceiptStatus:
	ReceiptStatus *int `json:",omitempty"`

	// Remarks:
	Remarks *string `json:",omitempty"`

	// SalesOrder:
	SalesOrder *GUID `json:",omitempty"`

	// SalesOrderNumber:
	SalesOrderNumber *int `json:",omitempty"`

	// ShippingMethod:
	ShippingMethod *GUID `json:",omitempty"`

	// ShippingMethodDescription:
	ShippingMethodDescription *string `json:",omitempty"`

	// Source:
	Source *int `json:",omitempty"`

	// Supplier:
	Supplier *GUID `json:",omitempty"`

	// SupplierCode:
	SupplierCode *string `json:",omitempty"`

	// SupplierContact:
	SupplierContact *GUID `json:",omitempty"`

	// SupplierContactPersonFullName:
	SupplierContactPersonFullName *string `json:",omitempty"`

	// SupplierName:
	SupplierName *string `json:",omitempty"`

	// VATAmount:
	VATAmount *float64 `json:",omitempty"`

	// Warehouse:
	Warehouse *GUID `json:",omitempty"`

	// WarehouseCode:
	WarehouseCode *string `json:",omitempty"`

	// WarehouseDescription:
	WarehouseDescription *string `json:",omitempty"`

	// YourRef:
	YourRef *string `json:",omitempty"`
}

func (s *PurchaseOrderPurchaseOrders) GetIdentifier() GUID {
	return *s.PurchaseOrderID
}

// List the PurchaseOrders entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseOrderPurchaseOrdersService) List(ctx context.Context, division int, all bool) ([]*PurchaseOrderPurchaseOrders, error) {
	var entities []*PurchaseOrderPurchaseOrders
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseOrders?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
