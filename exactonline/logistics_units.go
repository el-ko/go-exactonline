// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// LogisticsUnitsService is responsible for communicating with
// the Units endpoint of the Logistics service.
type LogisticsUnitsService service

// LogisticsUnits:
// Service: Logistics
// Entity: Units
// URL: /api/v1/{division}/logistics/Units
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=LogisticsUnits
type LogisticsUnits struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Active: Indicates whether a unit is in use
	Active *bool `json:"Active,omitempty"`

	// Code: Unique code for the unit
	Code *string `json:"Code,omitempty"`

	// Description: Description
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Main: Indicates the main unit per division. Will be used when creating new item
	Main *byte `json:"Main,omitempty"`

	// TimeUnit: If Type = &#39;T&#39; (time) then this fields indicates the type of time frame. yy = Year, mm = Month, wk = Week, dd = Day, hh = Hour, mi = Minute, ss = Second
	TimeUnit *string `json:"TimeUnit,omitempty"`

	// Type: Type of unit. Type &#39;Time&#39; is especially important for contracts.
	Type *string `json:"Type,omitempty"`
}

func (s *LogisticsUnits) GetIdentifier() GUID {
	return *s.ID
}

// List the Units entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *LogisticsUnitsService) List(ctx context.Context, division int, all bool) ([]*LogisticsUnits, error) {
	var entities []*LogisticsUnits
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/Units?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the Units enitity, by ID.
func (s *LogisticsUnitsService) Get(ctx context.Context, division int, id GUID) (*LogisticsUnits, error) {
	var entities []*LogisticsUnits
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/Units?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d Units entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
