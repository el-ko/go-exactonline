// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// DocumentsDocumentTypeFoldersService is responsible for communicating with
// the DocumentTypeFolders endpoint of the Documents service.
type DocumentsDocumentTypeFoldersService service

// DocumentsDocumentTypeFolders:
// Service: Documents
// Entity: DocumentTypeFolders
// URL: /api/v1/{division}/documents/DocumentTypeFolders
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=DocumentsDocumentTypeFolders
type DocumentsDocumentTypeFolders struct {
	// ID:
	ID *GUID `json:",omitempty"`

	// Created: Date created
	Created *Date `json:",omitempty"`

	// Creator: User id of creator
	Creator *GUID `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// DocumentFolder: Folder to which document type is linked
	DocumentFolder *GUID `json:",omitempty"`

	// DocumentType: Code of document type which is linked to folder
	DocumentType *int `json:",omitempty"`

	// Modified: Date Modified
	Modified *Date `json:",omitempty"`

	// Modifier: User id of modifier
	Modifier *GUID `json:",omitempty"`
}

func (s *DocumentsDocumentTypeFolders) GetIdentifier() GUID {
	return *s.ID
}

// List the DocumentTypeFolders entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *DocumentsDocumentTypeFoldersService) List(ctx context.Context, division int, all bool) ([]*DocumentsDocumentTypeFolders, error) {
	var entities []*DocumentsDocumentTypeFolders
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/documents/DocumentTypeFolders?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
