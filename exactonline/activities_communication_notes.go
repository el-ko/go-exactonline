// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ActivitiesCommunicationNotesService is responsible for communicating with
// the CommunicationNotes endpoint of the Activities service.
type ActivitiesCommunicationNotesService service

// ActivitiesCommunicationNotes:
// Service: Activities
// Entity: CommunicationNotes
// URL: /api/v1/{division}/activities/CommunicationNotes
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ActivitiesCommunicationNotes
type ActivitiesCommunicationNotes struct {
	// ID: The Primary key
	ID *GUID `json:"ID,omitempty"`

	// Account: The account that is related to the communication note
	Account *GUID `json:"Account,omitempty"`

	// AccountName: The name of the account
	AccountName *string `json:"AccountName,omitempty"`

	// Attachments: Attachments linked to the communication note
	Attachments *[]byte `json:"Attachments,omitempty"`

	// Campaign: The campaign linked to the communication note
	Campaign *GUID `json:"Campaign,omitempty"`

	// CampaignDescription: Description of the campaign
	CampaignDescription *string `json:"CampaignDescription,omitempty"`

	// Contact: The contact person that is related to the communication note
	Contact *GUID `json:"Contact,omitempty"`

	// ContactFullName: The name of the contact person
	ContactFullName *string `json:"ContactFullName,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of the creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Date: The date
	Date *Date `json:"Date,omitempty"`

	// Division: The division
	Division *int `json:"Division,omitempty"`

	// Document: The document that is linked to the communication note
	Document *GUID `json:"Document,omitempty"`

	// DocumentSubject: The subject of the document
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// HID: The human readable key
	HID *int `json:"HID,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of the last modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: The notes of the communication note
	Notes *string `json:"Notes,omitempty"`

	// Opportunity: The opportunity linked to the communication note
	Opportunity *GUID `json:"Opportunity,omitempty"`

	// OpportunityName: The name of the opportunity
	OpportunityName *string `json:"OpportunityName,omitempty"`

	// Status: Status: 0 = Void, 5 = Rejected, 10 = Draft, 20 = Open, 30 = Approved, 40 = Realized, 50 = Processed
	Status *int `json:"Status,omitempty"`

	// StatusDescription: The description of the status
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// Subject: A short description of the communication note
	Subject *string `json:"Subject,omitempty"`

	// User: The user that the communication note is assigned to
	User *GUID `json:"User,omitempty"`

	// UserFullName: The user name
	UserFullName *string `json:"UserFullName,omitempty"`
}

func (s *ActivitiesCommunicationNotes) GetIdentifier() GUID {
	return *s.ID
}

// List the CommunicationNotes entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ActivitiesCommunicationNotesService) List(ctx context.Context, division int, all bool) ([]*ActivitiesCommunicationNotes, error) {
	var entities []*ActivitiesCommunicationNotes
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/activities/CommunicationNotes?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the CommunicationNotes enitity, by ID.
func (s *ActivitiesCommunicationNotesService) Get(ctx context.Context, division int, id GUID) (*ActivitiesCommunicationNotes, error) {
	var entities []*ActivitiesCommunicationNotes
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/activities/CommunicationNotes?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d CommunicationNotes entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
