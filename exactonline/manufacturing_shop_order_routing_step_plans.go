// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ManufacturingShopOrderRoutingStepPlansService is responsible for communicating with
// the ShopOrderRoutingStepPlans endpoint of the Manufacturing service.
type ManufacturingShopOrderRoutingStepPlansService service

// ManufacturingShopOrderRoutingStepPlans:
// Service: Manufacturing
// Entity: ShopOrderRoutingStepPlans
// URL: /api/v1/{division}/manufacturing/ShopOrderRoutingStepPlans
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingShopOrderRoutingStepPlans
type ManufacturingShopOrderRoutingStepPlans struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// Account: Reference to Account providing the Outsourced item
	Account *GUID `json:",omitempty"`

	// AccountName: Account name
	AccountName *string `json:",omitempty"`

	// AccountNumber: Account number
	AccountNumber *string `json:",omitempty"`

	// AttendedPercentage: Attended Percentage
	AttendedPercentage *float64 `json:",omitempty"`

	// Backflush: Indicates if this is a backflush step
	Backflush *byte `json:",omitempty"`

	// CostPerItem: Total cost / Shop order planned quantity
	CostPerItem *float64 `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// Description: Description of the operation
	Description *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// EfficiencyPercentage: Efficiency Percentage
	EfficiencyPercentage *float64 `json:",omitempty"`

	// FactorType: Conversion factor type between Shop order Item and Subcontract purchase Unit
	FactorType *int `json:",omitempty"`

	// LineNumber: Sequential order of the operation
	LineNumber *int `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// Notes: Notes
	Notes *string `json:",omitempty"`

	// Operation: Reference to Operations
	Operation *GUID `json:",omitempty"`

	// OperationCode: Code of the routing step operation
	OperationCode *string `json:",omitempty"`

	// OperationDescription: Description of the operation step
	OperationDescription *string `json:",omitempty"`

	// OperationResource: Reference to OperationResources
	OperationResource *GUID `json:",omitempty"`

	// PlannedEndDate: Planned end date
	PlannedEndDate *Date `json:",omitempty"`

	// PlannedRunHours: Planned run hours
	PlannedRunHours *float64 `json:",omitempty"`

	// PlannedSetupHours: Planned setup hours
	PlannedSetupHours *float64 `json:",omitempty"`

	// PlannedStartDate: Planned start date
	PlannedStartDate *Date `json:",omitempty"`

	// PlannedTotalHours: Setup hours &#43; Run hours
	PlannedTotalHours *float64 `json:",omitempty"`

	// PurchaseUnit: Reference to Units
	PurchaseUnit *string `json:",omitempty"`

	// PurchaseUnitFactor: Purchase Unit Factor
	PurchaseUnitFactor *float64 `json:",omitempty"`

	// PurchaseUnitPriceFC: Purchase Unit Price in the currency of the transaction
	PurchaseUnitPriceFC *float64 `json:",omitempty"`

	// PurchaseUnitQuantity: Purchase unit quantity of the plan
	PurchaseUnitQuantity *float64 `json:",omitempty"`

	// RoutingStepType: Reference to RoutingStepTypes
	RoutingStepType *int `json:",omitempty"`

	// Run: Used in conjunction with RunMethod, and EfficiencyPercentage to determine PlannedRunHours
	Run *float64 `json:",omitempty"`

	// RunMethod: Reference to OperationMethod
	RunMethod *int `json:",omitempty"`

	// RunMethodDescription: Description of RunMethod
	RunMethodDescription *string `json:",omitempty"`

	// Setup: Used in conjunction with SetupCount and Setup Unit to determine PlannedSetupHours
	Setup *float64 `json:",omitempty"`

	// SetupUnit: Reference to TimeUnits
	SetupUnit *string `json:",omitempty"`

	// ShopOrder: Reference to Shop orders
	ShopOrder *GUID `json:",omitempty"`

	// Status: Reference to OperationStatus
	Status *int `json:",omitempty"`

	// StatusDescription: Description of Status
	StatusDescription *string `json:",omitempty"`

	// SubcontractedLeadDays: Subcontracted lead days
	SubcontractedLeadDays *int `json:",omitempty"`

	// TimeTransactions: Collection of TimeTransactions
	TimeTransactions *[]byte `json:",omitempty"`

	// TotalCostDC: Total cost of the routing line
	TotalCostDC *float64 `json:",omitempty"`

	// Workcenter: Reference to Workcenters
	Workcenter *GUID `json:",omitempty"`

	// WorkcenterCode: Workcenter code
	WorkcenterCode *string `json:",omitempty"`

	// WorkcenterDescription: Workcenter description
	WorkcenterDescription *string `json:",omitempty"`
}

func (s *ManufacturingShopOrderRoutingStepPlans) GetIdentifier() GUID {
	return *s.ID
}

// List the ShopOrderRoutingStepPlans entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ManufacturingShopOrderRoutingStepPlansService) List(ctx context.Context, division int, all bool) ([]*ManufacturingShopOrderRoutingStepPlans, error) {
	var entities []*ManufacturingShopOrderRoutingStepPlans
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ShopOrderRoutingStepPlans?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
