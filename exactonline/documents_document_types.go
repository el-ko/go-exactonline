// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// DocumentsDocumentTypesService is responsible for communicating with
// the DocumentTypes endpoint of the Documents service.
type DocumentsDocumentTypesService service

// DocumentsDocumentTypes:
// Service: Documents
// Entity: DocumentTypes
// URL: /api/v1/{division}/documents/DocumentTypes
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=DocumentsDocumentTypes
type DocumentsDocumentTypes struct {
	// ID: Primary key
	ID *int `json:"ID,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Description: Document type description
	Description *string `json:"Description,omitempty"`

	// DocumentIsCreatable: Indicates if documents of this type can be created
	DocumentIsCreatable *bool `json:"DocumentIsCreatable,omitempty"`

	// DocumentIsDeletable: Indicates if documents of this type can be deleted
	DocumentIsDeletable *bool `json:"DocumentIsDeletable,omitempty"`

	// DocumentIsUpdatable: Indicates if documents of this type can be updated
	DocumentIsUpdatable *bool `json:"DocumentIsUpdatable,omitempty"`

	// DocumentIsViewable: Indicates if documents of this type can be retrieved
	DocumentIsViewable *bool `json:"DocumentIsViewable,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// TypeCategory: ID of the document type category
	TypeCategory *int `json:"TypeCategory,omitempty"`
}

func (s *DocumentsDocumentTypes) GetIdentifier() int {
	return *s.ID
}

// List the DocumentTypes entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *DocumentsDocumentTypesService) List(ctx context.Context, division int, all bool) ([]*DocumentsDocumentTypes, error) {
	var entities []*DocumentsDocumentTypes
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/documents/DocumentTypes?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the DocumentTypes enitity, by ID.
func (s *DocumentsDocumentTypesService) Get(ctx context.Context, division int, id int) (*DocumentsDocumentTypes, error) {
	var entities []*DocumentsDocumentTypes
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/documents/DocumentTypes?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d DocumentTypes entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
