// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// SubscriptionSubscriptionRestrictionEmployeesService is responsible for communicating with
// the SubscriptionRestrictionEmployees endpoint of the Subscription service.
type SubscriptionSubscriptionRestrictionEmployeesService service

// SubscriptionSubscriptionRestrictionEmployees:
// Service: Subscription
// Entity: SubscriptionRestrictionEmployees
// URL: /api/v1/{division}/subscription/SubscriptionRestrictionEmployees
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SubscriptionSubscriptionRestrictionEmployees
type SubscriptionSubscriptionRestrictionEmployees struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of the creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Employee: Employee linked to the restriction
	Employee *GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Name of employee
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Readable ID of employee
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of the last modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Subscription: Reference to subscription
	Subscription *GUID `json:"Subscription,omitempty"`

	// SubscriptionDescription: Description of subscription
	SubscriptionDescription *string `json:"SubscriptionDescription,omitempty"`

	// SubscriptionNumber: Number of subscription
	SubscriptionNumber *int `json:"SubscriptionNumber,omitempty"`
}

func (s *SubscriptionSubscriptionRestrictionEmployees) GetIdentifier() GUID {
	return *s.ID
}

// List the SubscriptionRestrictionEmployees entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SubscriptionSubscriptionRestrictionEmployeesService) List(ctx context.Context, division int, all bool) ([]*SubscriptionSubscriptionRestrictionEmployees, error) {
	var entities []*SubscriptionSubscriptionRestrictionEmployees
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/SubscriptionRestrictionEmployees?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the SubscriptionRestrictionEmployees enitity, by ID.
func (s *SubscriptionSubscriptionRestrictionEmployeesService) Get(ctx context.Context, division int, id GUID) (*SubscriptionSubscriptionRestrictionEmployees, error) {
	var entities []*SubscriptionSubscriptionRestrictionEmployees
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/SubscriptionRestrictionEmployees?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d SubscriptionRestrictionEmployees entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
