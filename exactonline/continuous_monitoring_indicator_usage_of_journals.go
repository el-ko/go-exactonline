// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ContinuousMonitoringIndicatorUsageOfJournalsService is responsible for communicating with
// the IndicatorUsageOfJournals endpoint of the ContinuousMonitoring service.
type ContinuousMonitoringIndicatorUsageOfJournalsService service

// ContinuousMonitoringIndicatorUsageOfJournals:
// Service: ContinuousMonitoring
// Entity: IndicatorUsageOfJournals
// URL: /api/v1/beta/{division}/continuousmonitoring/IndicatorUsageOfJournals
// HasWebhook: false
// IsInBeta: true
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ContinuousMonitoringIndicatorUsageOfJournals
type ContinuousMonitoringIndicatorUsageOfJournals struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// Active: Indicates if this indicator is active or inactive
	Active *byte `json:",omitempty"`

	// Classification: Indicator classification (1 = Quality, 2 = Advice). Default = 1
	Classification *int `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// CreateSignal: Indicates whether a signal is created
	CreateSignal *byte `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// Description: Description of indicator
	Description *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// ExternalCode: External code
	ExternalCode *string `json:",omitempty"`

	// IndicatorGLAccounts: Collection of GL accounts
	IndicatorGLAccounts *[]byte `json:",omitempty"`

	// Journal: ID of journal
	Journal *GUID `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// Operator: Operator to be used in conjunction with journal (1 = Equal to, 2 = Unequal to)
	Operator *int `json:",omitempty"`

	// Severity: Severity of the indicators (1 = Low, 2 = Medium, 3 = High, 4 = Critical)
	Severity *int `json:",omitempty"`

	// Type: Indicator type (1 = Balance G/L account per financial year, 2 = Usage of journals, 3 = Deviating amount entered, 4 = Liquidity, 5 = VAT Return deadline, 6 = Difference result in percentage, 7 = Different VAT code used)
	Type *int `json:",omitempty"`
}

func (s *ContinuousMonitoringIndicatorUsageOfJournals) GetIdentifier() GUID {
	return *s.ID
}

// List the IndicatorUsageOfJournals entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ContinuousMonitoringIndicatorUsageOfJournalsService) List(ctx context.Context, division int, all bool) ([]*ContinuousMonitoringIndicatorUsageOfJournals, error) {
	var entities []*ContinuousMonitoringIndicatorUsageOfJournals
	u, err := s.client.ResolvePathWithDivision("/api/v1/beta/{division}/continuousmonitoring/IndicatorUsageOfJournals?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
