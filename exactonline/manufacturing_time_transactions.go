// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ManufacturingTimeTransactionsService is responsible for communicating with
// the TimeTransactions endpoint of the Manufacturing service.
type ManufacturingTimeTransactionsService service

// ManufacturingTimeTransactions:
// Service: Manufacturing
// Entity: TimeTransactions
// URL: /api/v1/{division}/manufacturing/TimeTransactions
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingTimeTransactions
type ManufacturingTimeTransactions struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// Activity: Manufacturing time type: Setup = 10, Run = 20
	Activity *int `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// Date: Date
	Date *Date `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// Employee: Employee linked to the transaction
	Employee *GUID `json:",omitempty"`

	// Hours: Machine hours
	Hours *float64 `json:",omitempty"`

	// IsOperationFinished: Is the operation finished?
	IsOperationFinished *byte `json:",omitempty"`

	// LaborHours: Labor Hours on the operation
	LaborHours *float64 `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// Notes: Notes linked to the time transaction
	Notes *string `json:",omitempty"`

	// PercentComplete: Percentage of the operation that is complete
	PercentComplete *float64 `json:",omitempty"`

	// Quantity: Quantity
	Quantity *float64 `json:",omitempty"`

	// RoutingStepPlan: Routing step linked to the transaction
	RoutingStepPlan *GUID `json:",omitempty"`

	// ShopOrder: Shop order linked to the transaction
	ShopOrder *GUID `json:",omitempty"`

	// Status: Status of the transaction: Draft = 1, Rejected = 2, Submitted = 10, Final = 20
	Status *int `json:",omitempty"`

	// TimedTimeTransaction: Timed time transaction linked to the transaction
	TimedTimeTransaction *GUID `json:",omitempty"`

	// WorkCenter: Workcenter linked to the transaction
	WorkCenter *GUID `json:",omitempty"`
}

func (s *ManufacturingTimeTransactions) GetIdentifier() GUID {
	return *s.ID
}

// List the TimeTransactions entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ManufacturingTimeTransactionsService) List(ctx context.Context, division int, all bool) ([]*ManufacturingTimeTransactions, error) {
	var entities []*ManufacturingTimeTransactions
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/TimeTransactions?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
