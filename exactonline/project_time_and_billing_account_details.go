// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ProjectTimeAndBillingAccountDetailsService is responsible for communicating with
// the TimeAndBillingAccountDetails endpoint of the Project service.
type ProjectTimeAndBillingAccountDetailsService service

// ProjectTimeAndBillingAccountDetails:
// Service: Project
// Entity: TimeAndBillingAccountDetails
// URL: /api/v1/{division}/read/project/TimeAndBillingAccountDetails
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadProjectTimeAndBillingAccountDetails
type ProjectTimeAndBillingAccountDetails struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Name: Name
	Name *string `json:"Name,omitempty"`
}

func (s *ProjectTimeAndBillingAccountDetails) GetIdentifier() GUID {
	return *s.ID
}

// List the TimeAndBillingAccountDetails entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectTimeAndBillingAccountDetailsService) List(ctx context.Context, division int, all bool) ([]*ProjectTimeAndBillingAccountDetails, error) {
	var entities []*ProjectTimeAndBillingAccountDetails
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/TimeAndBillingAccountDetails?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the TimeAndBillingAccountDetails enitity, by ID.
func (s *ProjectTimeAndBillingAccountDetailsService) Get(ctx context.Context, division int, id GUID) (*ProjectTimeAndBillingAccountDetails, error) {
	var entities []*ProjectTimeAndBillingAccountDetails
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/TimeAndBillingAccountDetails?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d TimeAndBillingAccountDetails entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
