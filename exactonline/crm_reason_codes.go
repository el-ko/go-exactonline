// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// CRMReasonCodesService is responsible for communicating with
// the ReasonCodes endpoint of the CRM service.
type CRMReasonCodesService service

// CRMReasonCodes:
// Service: CRM
// Entity: ReasonCodes
// URL: /api/v1/{division}/crm/ReasonCodes
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CRMReasonCodes
type CRMReasonCodes struct {
	// ID: Primary key.
	ID *GUID `json:",omitempty"`

	// Active: Indicates if the reason code is active.
	Active *byte `json:",omitempty"`

	// Code: Code of the reason.
	Code *string `json:",omitempty"`

	// Created: Creation date.
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator.
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator.
	CreatorFullName *string `json:",omitempty"`

	// Description: Description of the reason code.
	Description *string `json:",omitempty"`

	// Division: Division code.
	Division *int `json:",omitempty"`

	// Modified: Last modified date.
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier.
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier.
	ModifierFullName *string `json:",omitempty"`

	// Notes: Extra notes.
	Notes *string `json:",omitempty"`

	// Type: Type of the reason code.
	Type *int `json:",omitempty"`

	// TypeDescription: Description of the type of the reason code.
	TypeDescription *string `json:",omitempty"`
}

func (s *CRMReasonCodes) GetIdentifier() GUID {
	return *s.ID
}

// List the ReasonCodes entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *CRMReasonCodesService) List(ctx context.Context, division int, all bool) ([]*CRMReasonCodes, error) {
	var entities []*CRMReasonCodes
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/ReasonCodes?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
