// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// PurchaseOrderGoodsReceiptsService is responsible for communicating with
// the GoodsReceipts endpoint of the PurchaseOrder service.
type PurchaseOrderGoodsReceiptsService service

// PurchaseOrderGoodsReceipts:
// Service: PurchaseOrder
// Entity: GoodsReceipts
// URL: /api/v1/{division}/purchaseorder/GoodsReceipts
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseOrderGoodsReceipts
type PurchaseOrderGoodsReceipts struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of the creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:",omitempty"`

	// Description: Description of the goods receipt
	Description *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// Document: Document that is linked to the goods receipt
	Document *GUID `json:",omitempty"`

	// DocumentSubject: Document subject
	DocumentSubject *string `json:",omitempty"`

	// EntryNumber: Entry number of the resulting stock entry
	EntryNumber *int `json:",omitempty"`

	// GoodsReceiptLines: Collection of receipt lines
	GoodsReceiptLines *[]byte `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of the last modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:",omitempty"`

	// ReceiptDate: Date of the goods receipt
	ReceiptDate *Date `json:",omitempty"`

	// ReceiptNumber: Receipt number
	ReceiptNumber *int `json:",omitempty"`

	// Remarks: Receipt note
	Remarks *string `json:",omitempty"`

	// Supplier: Account ID of the supplier
	Supplier *GUID `json:",omitempty"`

	// SupplierCode: Supplier code
	SupplierCode *string `json:",omitempty"`

	// SupplierContact: ID of the contact person at the supplier
	SupplierContact *GUID `json:",omitempty"`

	// SupplierContactFullName: Name of the contact person at the supplier
	SupplierContactFullName *string `json:",omitempty"`

	// SupplierName: Supplier name
	SupplierName *string `json:",omitempty"`

	// Warehouse: Warehouse ID
	Warehouse *GUID `json:",omitempty"`

	// WarehouseCode: Warehouse code
	WarehouseCode *string `json:",omitempty"`

	// WarehouseDescription: Description of the warehouse
	WarehouseDescription *string `json:",omitempty"`

	// YourRef: The purchase invoice number provided by the supplier
	YourRef *string `json:",omitempty"`
}

func (s *PurchaseOrderGoodsReceipts) GetIdentifier() GUID {
	return *s.ID
}

// List the GoodsReceipts entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseOrderGoodsReceiptsService) List(ctx context.Context, division int, all bool) ([]*PurchaseOrderGoodsReceipts, error) {
	var entities []*PurchaseOrderGoodsReceipts
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/GoodsReceipts?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
