// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// MailboxMailMessageAttachmentsService is responsible for communicating with
// the MailMessageAttachments endpoint of the Mailbox service.
type MailboxMailMessageAttachmentsService service

// MailboxMailMessageAttachments:
// Service: Mailbox
// Entity: MailMessageAttachments
// URL: /api/v1/{division}/mailbox/MailMessageAttachments
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=MailboxMailMessageAttachments
type MailboxMailMessageAttachments struct {
	// ID:
	ID *GUID `json:"ID,omitempty"`

	// Attachment:
	Attachment *[]byte `json:"Attachment,omitempty"`

	// AttachmentFileExtension:
	AttachmentFileExtension *string `json:"AttachmentFileExtension,omitempty"`

	// AttachmentFileName:
	AttachmentFileName *string `json:"AttachmentFileName,omitempty"`

	// FileSize:
	FileSize *int64 `json:"FileSize,omitempty"`

	// MailMessageID:
	MailMessageID *GUID `json:"MailMessageID,omitempty"`

	// RecipientAccount:
	RecipientAccount *GUID `json:"RecipientAccount,omitempty"`

	// SenderAccount:
	SenderAccount *GUID `json:"SenderAccount,omitempty"`

	// Type:
	Type *int `json:"Type,omitempty"`

	// TypeDescription:
	TypeDescription *string `json:"TypeDescription,omitempty"`

	// Url:
	Url *string `json:"Url,omitempty"`
}

func (s *MailboxMailMessageAttachments) GetIdentifier() GUID {
	return *s.ID
}

// List the MailMessageAttachments entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *MailboxMailMessageAttachmentsService) List(ctx context.Context, division int, all bool) ([]*MailboxMailMessageAttachments, error) {
	var entities []*MailboxMailMessageAttachments
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/mailbox/MailMessageAttachments?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the MailMessageAttachments enitity, by ID.
func (s *MailboxMailMessageAttachmentsService) Get(ctx context.Context, division int, id GUID) (*MailboxMailMessageAttachments, error) {
	var entities []*MailboxMailMessageAttachments
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/mailbox/MailMessageAttachments?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d MailMessageAttachments entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
