// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// UsersUsersService is responsible for communicating with
// the Users endpoint of the Users service.
type UsersUsersService service

// UsersUsers:
// Service: Users
// Entity: Users
// URL: /api/v1/{division}/users/Users
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=UsersUsers
type UsersUsers struct {
	// UserID: Primary key
	UserID *GUID `json:",omitempty"`

	// BirthDate: Birth date
	BirthDate *Date `json:",omitempty"`

	// BirthName: Birth name
	BirthName *string `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of the creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:",omitempty"`

	// Customer: Customer the user belongs to
	Customer *GUID `json:",omitempty"`

	// CustomerName: Name of Customer
	CustomerName *string `json:",omitempty"`

	// Email: Email address of the user
	Email *string `json:",omitempty"`

	// EndDate: Date after which the user login is disabled. NULL means no enddate
	EndDate *Date `json:",omitempty"`

	// FirstName: First name
	FirstName *string `json:",omitempty"`

	// FullName: Full name of the user
	FullName *string `json:",omitempty"`

	// Gender: Gender: M=Male, V=Female, O=Unknown
	Gender *string `json:",omitempty"`

	// HasRegisteredForTwoStepVerification: User has completed registration of Two-Step verification
	HasRegisteredForTwoStepVerification *bool `json:",omitempty"`

	// HasTwoStepVerification: User must use Two-Step verification to log in
	HasTwoStepVerification *bool `json:",omitempty"`

	// Initials: Initials
	Initials *string `json:",omitempty"`

	// IsAnonymised: Indicates whether the user is anonymised.
	IsAnonymised *byte `json:",omitempty"`

	// Language: Language (culture) that is used in Exact Online
	Language *string `json:",omitempty"`

	// LastLogin: The last time this user logged in
	LastLogin *Date `json:",omitempty"`

	// LastName: Last name
	LastName *string `json:",omitempty"`

	// MiddleName: Middle name
	MiddleName *string `json:",omitempty"`

	// Mobile: Mobile phone
	Mobile *string `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of the last modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:",omitempty"`

	// Nationality: Nationality
	Nationality *string `json:",omitempty"`

	// Notes: Remarks
	Notes *string `json:",omitempty"`

	// Phone: Phone number
	Phone *string `json:",omitempty"`

	// PhoneExtension: Phone number extension
	PhoneExtension *string `json:",omitempty"`

	// ProfileCode: Profile code
	ProfileCode *string `json:",omitempty"`

	// StartDate: Startdate after which the login is allowed. If the start date is NULL the login is allowed as well
	StartDate *Date `json:",omitempty"`

	// StartDivision: Start Division
	StartDivision *int `json:",omitempty"`

	// Title: Title
	Title *string `json:",omitempty"`

	// UserName: Login name of the user
	UserName *string `json:",omitempty"`

	// UserRoles: Collection of user roles
	UserRoles *[]byte `json:",omitempty"`

	// UserRolesPerDivision: Collection of user roles per division
	UserRolesPerDivision *[]byte `json:",omitempty"`

	// UserTypesList: Obsolete
	UserTypesList *string `json:",omitempty"`
}

func (s *UsersUsers) GetIdentifier() GUID {
	return *s.UserID
}

// List the Users entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *UsersUsersService) List(ctx context.Context, division int, all bool) ([]*UsersUsers, error) {
	var entities []*UsersUsers
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/users/Users?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
