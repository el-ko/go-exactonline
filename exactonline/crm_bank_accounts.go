// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// CRMBankAccountsService is responsible for communicating with
// the BankAccounts endpoint of the CRM service.
type CRMBankAccountsService service

// CRMBankAccounts:
// Service: CRM
// Entity: BankAccounts
// URL: /api/v1/{division}/crm/BankAccounts
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CRMBankAccounts
type CRMBankAccounts struct {
	// ID:
	ID *GUID `json:"ID,omitempty"`

	// Account:
	Account *GUID `json:"Account,omitempty"`

	// AccountName:
	AccountName *string `json:"AccountName,omitempty"`

	// Bank:
	Bank *GUID `json:"Bank,omitempty"`

	// BankAccount:
	BankAccount *string `json:"BankAccount,omitempty"`

	// BankAccountHolderName:
	BankAccountHolderName *string `json:"BankAccountHolderName,omitempty"`

	// BankDescription:
	BankDescription *string `json:"BankDescription,omitempty"`

	// BankName:
	BankName *string `json:"BankName,omitempty"`

	// BICCode:
	BICCode *string `json:"BICCode,omitempty"`

	// Created:
	Created *Date `json:"Created,omitempty"`

	// Creator:
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// Format:
	Format *string `json:"Format,omitempty"`

	// IBAN:
	IBAN *string `json:"IBAN,omitempty"`

	// Main:
	Main *bool `json:"Main,omitempty"`

	// Modified:
	Modified *Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PaymentServiceAccount:
	PaymentServiceAccount *GUID `json:"PaymentServiceAccount,omitempty"`

	// Type:
	Type *string `json:"Type,omitempty"`

	// TypeDescription:
	TypeDescription *string `json:"TypeDescription,omitempty"`
}

func (s *CRMBankAccounts) GetIdentifier() GUID {
	return *s.ID
}

// List the BankAccounts entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *CRMBankAccountsService) List(ctx context.Context, division int, all bool) ([]*CRMBankAccounts, error) {
	var entities []*CRMBankAccounts
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/BankAccounts?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the BankAccounts enitity, by ID.
func (s *CRMBankAccountsService) Get(ctx context.Context, division int, id GUID) (*CRMBankAccounts, error) {
	var entities []*CRMBankAccounts
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/BankAccounts?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d BankAccounts entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
