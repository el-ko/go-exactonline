// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// MailboxPreferredMailboxService is responsible for communicating with
// the PreferredMailbox endpoint of the Mailbox service.
type MailboxPreferredMailboxService service

// MailboxPreferredMailbox:
// Service: Mailbox
// Entity: PreferredMailbox
// URL: /api/v1/{division}/read/mailbox/PreferredMailbox
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadMailboxPreferredMailbox
type MailboxPreferredMailbox struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:"Creator,omitempty"`

	// Description: Extra description of the mailbox
	Description *string `json:"Description,omitempty"`

	// ForDivision: Only used when this mailbox is used for one specific administration, for example invoices to this mailbox will only be booked in this administration
	ForDivision *int `json:"ForDivision,omitempty"`

	// IsScanServiceMailbox: Indicates whether this service is used for messages returned by the scanning service
	IsScanServiceMailbox *bool `json:"IsScanServiceMailbox,omitempty"`

	// Mailbox: E-mail address-like format, for example johndoe@exactonline.nl
	Mailbox *string `json:"Mailbox,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ValidFrom: Date that this mailbox became valid
	ValidFrom *Date `json:"ValidFrom,omitempty"`

	// ValidTo: Date that this mailbox will not be valid anymore
	ValidTo *Date `json:"ValidTo,omitempty"`
}

func (s *MailboxPreferredMailbox) GetIdentifier() GUID {
	return *s.ID
}

// List the PreferredMailbox entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *MailboxPreferredMailboxService) List(ctx context.Context, division int, all bool) ([]*MailboxPreferredMailbox, error) {
	var entities []*MailboxPreferredMailbox
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/mailbox/PreferredMailbox?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the PreferredMailbox enitity, by ID.
func (s *MailboxPreferredMailboxService) Get(ctx context.Context, division int, id GUID) (*MailboxPreferredMailbox, error) {
	var entities []*MailboxPreferredMailbox
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/read/mailbox/PreferredMailbox?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d PreferredMailbox entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
