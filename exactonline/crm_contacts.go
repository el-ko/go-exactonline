// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// CRMContactsService is responsible for communicating with
// the Contacts endpoint of the CRM service.
type CRMContactsService service

// CRMContacts:
// Service: CRM
// Entity: Contacts
// URL: /api/v1/{division}/crm/Contacts
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CRMContacts
type CRMContacts struct {
	// ID:
	ID *GUID `json:",omitempty"`

	// Account:
	Account *GUID `json:",omitempty"`

	// AccountIsCustomer:
	AccountIsCustomer *bool `json:",omitempty"`

	// AccountIsSupplier:
	AccountIsSupplier *bool `json:",omitempty"`

	// AccountMainContact:
	AccountMainContact *GUID `json:",omitempty"`

	// AccountName:
	AccountName *string `json:",omitempty"`

	// AddressLine2:
	AddressLine2 *string `json:",omitempty"`

	// AddressStreet:
	AddressStreet *string `json:",omitempty"`

	// AddressStreetNumber:
	AddressStreetNumber *string `json:",omitempty"`

	// AddressStreetNumberSuffix:
	AddressStreetNumberSuffix *string `json:",omitempty"`

	// AllowMailing:
	AllowMailing *int `json:",omitempty"`

	// BirthDate:
	BirthDate *Date `json:",omitempty"`

	// BirthName:
	BirthName *string `json:",omitempty"`

	// BirthNamePrefix:
	BirthNamePrefix *string `json:",omitempty"`

	// BirthPlace:
	BirthPlace *string `json:",omitempty"`

	// BusinessEmail:
	BusinessEmail *string `json:",omitempty"`

	// BusinessFax:
	BusinessFax *string `json:",omitempty"`

	// BusinessMobile:
	BusinessMobile *string `json:",omitempty"`

	// BusinessPhone:
	BusinessPhone *string `json:",omitempty"`

	// BusinessPhoneExtension:
	BusinessPhoneExtension *string `json:",omitempty"`

	// City:
	City *string `json:",omitempty"`

	// Code:
	Code *string `json:",omitempty"`

	// Country:
	Country *string `json:",omitempty"`

	// Created:
	Created *Date `json:",omitempty"`

	// Creator:
	Creator *GUID `json:",omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:",omitempty"`

	// Division:
	Division *int `json:",omitempty"`

	// Email:
	Email *string `json:",omitempty"`

	// EndDate:
	EndDate *Date `json:",omitempty"`

	// FirstName:
	FirstName *string `json:",omitempty"`

	// FullName:
	FullName *string `json:",omitempty"`

	// Gender:
	Gender *string `json:",omitempty"`

	// HID:
	HID *int `json:",omitempty"`

	// IdentificationDate:
	IdentificationDate *Date `json:",omitempty"`

	// IdentificationDocument:
	IdentificationDocument *GUID `json:",omitempty"`

	// IdentificationUser:
	IdentificationUser *GUID `json:",omitempty"`

	// Initials:
	Initials *string `json:",omitempty"`

	// IsAnonymised:
	IsAnonymised *byte `json:",omitempty"`

	// IsMailingExcluded:
	IsMailingExcluded *bool `json:",omitempty"`

	// IsMainContact:
	IsMainContact *bool `json:",omitempty"`

	// JobTitleDescription:
	JobTitleDescription *string `json:",omitempty"`

	// Language:
	Language *string `json:",omitempty"`

	// LastName:
	LastName *string `json:",omitempty"`

	// LeadPurpose:
	LeadPurpose *GUID `json:",omitempty"`

	// LeadSource:
	LeadSource *GUID `json:",omitempty"`

	// MarketingNotes:
	MarketingNotes *string `json:",omitempty"`

	// MiddleName:
	MiddleName *string `json:",omitempty"`

	// Mobile:
	Mobile *string `json:",omitempty"`

	// Modified:
	Modified *Date `json:",omitempty"`

	// Modifier:
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:",omitempty"`

	// Nationality:
	Nationality *string `json:",omitempty"`

	// Notes:
	Notes *string `json:",omitempty"`

	// PartnerName:
	PartnerName *string `json:",omitempty"`

	// PartnerNamePrefix:
	PartnerNamePrefix *string `json:",omitempty"`

	// Person:
	Person *GUID `json:",omitempty"`

	// Phone:
	Phone *string `json:",omitempty"`

	// PhoneExtension:
	PhoneExtension *string `json:",omitempty"`

	// Picture:
	Picture *[]byte `json:",omitempty"`

	// PictureName:
	PictureName *string `json:",omitempty"`

	// PictureThumbnailUrl:
	PictureThumbnailUrl *string `json:",omitempty"`

	// PictureUrl:
	PictureUrl *string `json:",omitempty"`

	// Postcode:
	Postcode *string `json:",omitempty"`

	// SocialSecurityNumber:
	SocialSecurityNumber *string `json:",omitempty"`

	// StartDate:
	StartDate *Date `json:",omitempty"`

	// State:
	State *string `json:",omitempty"`

	// Title:
	Title *string `json:",omitempty"`
}

func (s *CRMContacts) GetIdentifier() GUID {
	return *s.ID
}

// List the Contacts entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *CRMContactsService) List(ctx context.Context, division int, all bool) ([]*CRMContacts, error) {
	var entities []*CRMContacts
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/Contacts?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
