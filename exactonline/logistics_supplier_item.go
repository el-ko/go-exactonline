// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// LogisticsSupplierItemService is responsible for communicating with
// the SupplierItem endpoint of the Logistics service.
type LogisticsSupplierItemService service

// LogisticsSupplierItem:
// Service: Logistics
// Entity: SupplierItem
// URL: /api/v1/{division}/logistics/SupplierItem
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=LogisticsSupplierItem
type LogisticsSupplierItem struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// CopyRemarks: Copy purchase remarks to purchase lines
	CopyRemarks *byte `json:",omitempty"`

	// CountryOfOrigin: Country of origin code
	CountryOfOrigin *string `json:",omitempty"`

	// CountryOfOriginDescription: Description of country of origin
	CountryOfOriginDescription *string `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// Currency: Currency of item price
	Currency *string `json:",omitempty"`

	// CurrencyDescription: Description of currency of item price
	CurrencyDescription *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// DropShipment: Indicates that the supplier will deliver the item directly to customer. Values: 0 = No, 1 = Yes, 2 = Optional
	DropShipment *byte `json:",omitempty"`

	// Item: Item ID
	Item *GUID `json:",omitempty"`

	// ItemCode: Item code
	ItemCode *string `json:",omitempty"`

	// ItemDescription: Description of Item
	ItemDescription *string `json:",omitempty"`

	// MainSupplier: Indicates this is a main supplier
	MainSupplier *bool `json:",omitempty"`

	// MinimumQuantity: Minimum quantity of the item for purchase, only available for Wholesale &amp; Distribution (Premium only)
	MinimumQuantity *float64 `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// Notes: Notes
	Notes *string `json:",omitempty"`

	// PurchaseLeadTime: The number of days between placing an order with a supplier and receiving items from the supplier
	PurchaseLeadTime *int `json:",omitempty"`

	// PurchasePrice: Purchase price
	PurchasePrice *float64 `json:",omitempty"`

	// PurchaseUnit: Unit code
	PurchaseUnit *string `json:",omitempty"`

	// PurchaseUnitDescription: Description of unit
	PurchaseUnitDescription *string `json:",omitempty"`

	// PurchaseUnitFactor: This is the multiplication factor when going from default item unit to the unit of this price
	PurchaseUnitFactor *float64 `json:",omitempty"`

	// PurchaseVATCode: VAT code
	PurchaseVATCode *string `json:",omitempty"`

	// PurchaseVATCodeDescription: Description of VAT
	PurchaseVATCodeDescription *string `json:",omitempty"`

	// Supplier: Supplier ID
	Supplier *GUID `json:",omitempty"`

	// SupplierCode: Supplier code
	SupplierCode *string `json:",omitempty"`

	// SupplierDescription: Description of supplier
	SupplierDescription *string `json:",omitempty"`

	// SupplierItemCode: Supplierâ€™s item code
	SupplierItemCode *string `json:",omitempty"`
}

func (s *LogisticsSupplierItem) GetIdentifier() GUID {
	return *s.ID
}

// List the SupplierItem entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *LogisticsSupplierItemService) List(ctx context.Context, division int, all bool) ([]*LogisticsSupplierItem, error) {
	var entities []*LogisticsSupplierItem
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/logistics/SupplierItem?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
