// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// PayrollEmploymentOrganizationsService is responsible for communicating with
// the EmploymentOrganizations endpoint of the Payroll service.
type PayrollEmploymentOrganizationsService service

// PayrollEmploymentOrganizations:
// Service: Payroll
// Entity: EmploymentOrganizations
// URL: /api/v1/{division}/payroll/EmploymentOrganizations
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollEmploymentOrganizations
type PayrollEmploymentOrganizations struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// CostCenter: Cost center code
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostCenterDescription: Description of cost center
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit: Cost unit code
	CostUnit *string `json:"CostUnit,omitempty"`

	// CostUnitDescription: Description of cost unit
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Department: ID of department
	Department *GUID `json:"Department,omitempty"`

	// DepartmentCode: Department code
	DepartmentCode *string `json:"DepartmentCode,omitempty"`

	// DepartmentDescription: Department description for organization
	DepartmentDescription *string `json:"DepartmentDescription,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Employee: ID of employee
	Employee *GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Name of employee
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Numeric ID of the employee
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// Employment: Employement ID
	Employment *GUID `json:"Employment,omitempty"`

	// EmploymentHID: Numeric ID of the employment
	EmploymentHID *int `json:"EmploymentHID,omitempty"`

	// EndDate: Organization end date
	EndDate *Date `json:"EndDate,omitempty"`

	// JobTitle: ID of job title
	JobTitle *GUID `json:"JobTitle,omitempty"`

	// JobTitleCode: Job title code
	JobTitleCode *string `json:"JobTitleCode,omitempty"`

	// JobTitleDescription: Job title description
	JobTitleDescription *string `json:"JobTitleDescription,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Explanation or extra information can be stored in the notes
	Notes *string `json:"Notes,omitempty"`

	// StartDate: Organization start date
	StartDate *Date `json:"StartDate,omitempty"`
}

func (s *PayrollEmploymentOrganizations) GetIdentifier() GUID {
	return *s.ID
}

// List the EmploymentOrganizations entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PayrollEmploymentOrganizationsService) List(ctx context.Context, division int, all bool) ([]*PayrollEmploymentOrganizations, error) {
	var entities []*PayrollEmploymentOrganizations
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/EmploymentOrganizations?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the EmploymentOrganizations enitity, by ID.
func (s *PayrollEmploymentOrganizationsService) Get(ctx context.Context, division int, id GUID) (*PayrollEmploymentOrganizations, error) {
	var entities []*PayrollEmploymentOrganizations
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/EmploymentOrganizations?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d EmploymentOrganizations entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
