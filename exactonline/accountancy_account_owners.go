// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// AccountancyAccountOwnersService is responsible for communicating with
// the AccountOwners endpoint of the Accountancy service.
type AccountancyAccountOwnersService service

// AccountancyAccountOwners:
// Service: Accountancy
// Entity: AccountOwners
// URL: /api/v1/{division}/accountancy/AccountOwners
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=AccountancyAccountOwners
type AccountancyAccountOwners struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// Account: ID of the account that is owned
	Account *GUID `json:",omitempty"`

	// AccountCode: Code of the account that is owned
	AccountCode *string `json:",omitempty"`

	// AccountName: Name of the account that is owned
	AccountName *string `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of the creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of the modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of the modifier
	ModifierFullName *string `json:",omitempty"`

	// OwnerAccount: ID of the account who owns specified account
	OwnerAccount *GUID `json:",omitempty"`

	// OwnerAccountCode: Code of the account who owns specified account
	OwnerAccountCode *string `json:",omitempty"`

	// OwnerAccountName: Name of the account who owns specified account
	OwnerAccountName *string `json:",omitempty"`

	// Shares: Percentage of shares that is owned. 1 is 100%, 0.5 is 50%
	Shares *float64 `json:",omitempty"`
}

func (s *AccountancyAccountOwners) GetIdentifier() GUID {
	return *s.ID
}

// List the AccountOwners entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *AccountancyAccountOwnersService) List(ctx context.Context, division int, all bool) ([]*AccountancyAccountOwners, error) {
	var entities []*AccountancyAccountOwners
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/AccountOwners?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the AccountOwners enitity, by ID.
func (s *AccountancyAccountOwnersService) Get(ctx context.Context, division int, id GUID) (*AccountancyAccountOwners, error) {
	var entities []*AccountancyAccountOwners
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/AccountOwners?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d AccountOwners entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
