// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// SalesEntrySalesEntriesService is responsible for communicating with
// the SalesEntries endpoint of the SalesEntry service.
type SalesEntrySalesEntriesService service

// SalesEntrySalesEntries:
// Service: SalesEntry
// Entity: SalesEntries
// URL: /api/v1/{division}/salesentry/SalesEntries
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesEntrySalesEntries
type SalesEntrySalesEntries struct {
	// EntryID:
	EntryID *GUID `json:",omitempty"`

	// AmountDC:
	AmountDC *float64 `json:",omitempty"`

	// AmountFC:
	AmountFC *float64 `json:",omitempty"`

	// BatchNumber:
	BatchNumber *int `json:",omitempty"`

	// Created:
	Created *Date `json:",omitempty"`

	// Creator:
	Creator *GUID `json:",omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:",omitempty"`

	// Currency:
	Currency *string `json:",omitempty"`

	// Customer:
	Customer *GUID `json:",omitempty"`

	// CustomerName:
	CustomerName *string `json:",omitempty"`

	// Description:
	Description *string `json:",omitempty"`

	// Division:
	Division *int `json:",omitempty"`

	// Document:
	Document *GUID `json:",omitempty"`

	// DocumentNumber:
	DocumentNumber *int `json:",omitempty"`

	// DocumentSubject:
	DocumentSubject *string `json:",omitempty"`

	// DueDate:
	DueDate *Date `json:",omitempty"`

	// EntryDate:
	EntryDate *Date `json:",omitempty"`

	// EntryNumber:
	EntryNumber *int `json:",omitempty"`

	// ExternalLinkDescription:
	ExternalLinkDescription *string `json:",omitempty"`

	// ExternalLinkReference:
	ExternalLinkReference *string `json:",omitempty"`

	// GAccountAmountFC:
	GAccountAmountFC *float64 `json:",omitempty"`

	// InvoiceNumber:
	InvoiceNumber *int `json:",omitempty"`

	// IsExtraDuty:
	IsExtraDuty *bool `json:",omitempty"`

	// Journal:
	Journal *string `json:",omitempty"`

	// JournalDescription:
	JournalDescription *string `json:",omitempty"`

	// Modified:
	Modified *Date `json:",omitempty"`

	// Modifier:
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:",omitempty"`

	// OrderNumber:
	OrderNumber *int `json:",omitempty"`

	// PaymentCondition:
	PaymentCondition *string `json:",omitempty"`

	// PaymentConditionDescription:
	PaymentConditionDescription *string `json:",omitempty"`

	// PaymentReference:
	PaymentReference *string `json:",omitempty"`

	// ProcessNumber:
	ProcessNumber *int `json:",omitempty"`

	// Rate:
	Rate *float64 `json:",omitempty"`

	// ReportingPeriod:
	ReportingPeriod *int `json:",omitempty"`

	// ReportingYear:
	ReportingYear *int `json:",omitempty"`

	// Reversal:
	Reversal *bool `json:",omitempty"`

	// SalesEntryLines:
	SalesEntryLines *[]byte `json:",omitempty"`

	// Status:
	Status *int `json:",omitempty"`

	// StatusDescription:
	StatusDescription *string `json:",omitempty"`

	// Type:
	Type *int `json:",omitempty"`

	// TypeDescription:
	TypeDescription *string `json:",omitempty"`

	// VATAmountDC:
	VATAmountDC *float64 `json:",omitempty"`

	// VATAmountFC:
	VATAmountFC *float64 `json:",omitempty"`

	// WithholdingTaxAmountDC:
	WithholdingTaxAmountDC *float64 `json:",omitempty"`

	// WithholdingTaxBaseAmount:
	WithholdingTaxBaseAmount *float64 `json:",omitempty"`

	// WithholdingTaxPercentage:
	WithholdingTaxPercentage *float64 `json:",omitempty"`

	// YourRef:
	YourRef *string `json:",omitempty"`
}

func (s *SalesEntrySalesEntries) GetIdentifier() GUID {
	return *s.EntryID
}

// List the SalesEntries entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SalesEntrySalesEntriesService) List(ctx context.Context, division int, all bool) ([]*SalesEntrySalesEntries, error) {
	var entities []*SalesEntrySalesEntries
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntries?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
