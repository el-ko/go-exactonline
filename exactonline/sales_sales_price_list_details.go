// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// SalesSalesPriceListDetailsService is responsible for communicating with
// the SalesPriceListDetails endpoint of the Sales service.
type SalesSalesPriceListDetailsService service

// SalesSalesPriceListDetails:
// Service: Sales
// Entity: SalesPriceListDetails
// URL: /api/v1/{division}/sales/SalesPriceListDetails
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesSalesPriceListDetails
type SalesSalesPriceListDetails struct {
	// ID: Primary key
	ID *GUID `json:",omitempty"`

	// Account: Customer account Id
	Account *GUID `json:",omitempty"`

	// AccountName: Customer account name
	AccountName *string `json:",omitempty"`

	// BasePrice: ID of the base price.  If base price = use the standard sales price, it shows null.  If base price = set sales price, it shows ID of the sales price within this volume discount.
	BasePrice *GUID `json:",omitempty"`

	// BasePriceAmount: Amount of the base price.  If base price = use the standard sales price, it shows the latest item sales price. If base price = set sales price, it shows the base price which defined in price list.
	BasePriceAmount *float64 `json:",omitempty"`

	// Created: Creation date
	Created *Date `json:",omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:",omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:",omitempty"`

	// Currency: Currency
	Currency *string `json:",omitempty"`

	// Discount: Discount
	Discount *float64 `json:",omitempty"`

	// Division: Division code
	Division *int `json:",omitempty"`

	// EndDate: End date
	EndDate *Date `json:",omitempty"`

	// EntryMethod: Indicates whether discount or the new price is leading : 1-Discount, 2-New price.  Scenario  1. When entry method is Discount and use base price, Discounted price = (1 - SalesPriceListDetails.Discount) * SalesPriceListDetails.BasePriceAmount  2. When entry method is Discount and use Item&#39;s standard sales price, Discounted price = (1 - SalesPriceListDetails.Discount) * SalesItemPrices.Price  3. When entry method is New price, Discounted price = SalesPriceListDetails.NewPrice
	EntryMethod *int `json:",omitempty"`

	// Item: Item
	Item *GUID `json:",omitempty"`

	// ItemDescription: Description of the item
	ItemDescription *string `json:",omitempty"`

	// ItemGroup: ItemGroup
	ItemGroup *GUID `json:",omitempty"`

	// ItemUnit: Default sales unit of the item
	ItemUnit *string `json:",omitempty"`

	// Modified: Last modified date
	Modified *Date `json:",omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:",omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:",omitempty"`

	// NewPrice: New price after discount
	NewPrice *float64 `json:",omitempty"`

	// NumberOfItemsPerUnit: Number of the item per unit
	NumberOfItemsPerUnit *float64 `json:",omitempty"`

	// PriceListCode: Code of the PriceList
	PriceListCode *string `json:",omitempty"`

	// PriceListId: Id of the PriceList
	PriceListId *GUID `json:",omitempty"`

	// Quantity: Quantity
	Quantity *float64 `json:",omitempty"`

	// StartDate: Start date
	StartDate *Date `json:",omitempty"`

	// Unit: Unit
	Unit *string `json:",omitempty"`
}

func (s *SalesSalesPriceListDetails) GetIdentifier() GUID {
	return *s.ID
}

// List the SalesPriceListDetails entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SalesSalesPriceListDetailsService) List(ctx context.Context, division int, all bool) ([]*SalesSalesPriceListDetails, error) {
	var entities []*SalesSalesPriceListDetails
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/sales/SalesPriceListDetails?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
