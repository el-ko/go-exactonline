// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// ManufacturingMaterialReversalsService is responsible for communicating with
// the MaterialReversals endpoint of the Manufacturing service.
type ManufacturingMaterialReversalsService service

// ManufacturingMaterialReversals:
// Service: Manufacturing
// Entity: MaterialReversals
// URL: /api/v1/{division}/manufacturing/MaterialReversals
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingMaterialReversals
type ManufacturingMaterialReversals struct {
	// ReversalStockTransactionId: ID of stock transaction related to this material issue
	ReversalStockTransactionId *GUID `json:",omitempty"`

	// CreatedBy: ID of creating user
	CreatedBy *GUID `json:",omitempty"`

	// CreatedByFullName: Name of the creating user
	CreatedByFullName *string `json:",omitempty"`

	// CreatedDate: Date this reversal was created
	CreatedDate *Date `json:",omitempty"`

	// IsBackflush: Boolean indicating if this reversal was the result of shop order backflushing, processed during a ShopOrderReversal
	IsBackflush *bool `json:",omitempty"`

	// IsBatch: Does the issue reversal&#39;s item use batch numbers
	IsBatch *byte `json:",omitempty"`

	// IsFractionAllowedItem: Indicates if fractions (for example 0.35) are allowed for quantities of the material reversal&#39;s item
	IsFractionAllowedItem *byte `json:",omitempty"`

	// IsSerial: Does the issue reversal&#39;s item use serial numbers
	IsSerial *byte `json:",omitempty"`

	// Item: Item reversed
	Item *GUID `json:",omitempty"`

	// ItemCode: Code of item reversed
	ItemCode *string `json:",omitempty"`

	// ItemDescription: Description of item reversed
	ItemDescription *string `json:",omitempty"`

	// ItemPictureUrl: Picture url of item issued
	ItemPictureUrl *string `json:",omitempty"`

	// Note: Notes logged with this reversal
	Note *string `json:",omitempty"`

	// OriginalStockTransactionId: ID of the original stock transaction, which was reversed
	OriginalStockTransactionId *GUID `json:",omitempty"`

	// Quantity: Quantity of this reversal
	Quantity *float64 `json:",omitempty"`

	// ShopOrder: ID of shop order reversed from
	ShopOrder *GUID `json:",omitempty"`

	// ShopOrderMaterialPlan: ID of shop order material plan
	ShopOrderMaterialPlan *GUID `json:",omitempty"`

	// ShopOrderNumber: Number of shop order reversed from
	ShopOrderNumber *int `json:",omitempty"`

	// StorageLocation: ID of storage location reversed to
	StorageLocation *GUID `json:",omitempty"`

	// StorageLocationCode: Code of storage location reversed to
	StorageLocationCode *string `json:",omitempty"`

	// StorageLocationDescription: Description of storage location reversed to
	StorageLocationDescription *string `json:",omitempty"`

	// TransactionDate: Effective date of this reversal
	TransactionDate *Date `json:",omitempty"`

	// Unit: Unit of measurement abbreviation of item reversed
	Unit *string `json:",omitempty"`

	// UnitDescription: Unit of measurement of item reversed
	UnitDescription *string `json:",omitempty"`

	// Warehouse: ID of warehouse reversed to
	Warehouse *GUID `json:",omitempty"`

	// WarehouseCode: Code of warehouse reversed to
	WarehouseCode *string `json:",omitempty"`

	// WarehouseDescription: Description of warehouse reversed to
	WarehouseDescription *string `json:",omitempty"`
}

func (s *ManufacturingMaterialReversals) GetIdentifier() GUID {
	return *s.ReversalStockTransactionId
}

// List the MaterialReversals entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ManufacturingMaterialReversalsService) List(ctx context.Context, division int, all bool) ([]*ManufacturingMaterialReversals, error) {
	var entities []*ManufacturingMaterialReversals
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/MaterialReversals?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}
