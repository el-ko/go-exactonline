// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package exactonline

import (
	"context"
)

// VATVatPercentagesService is responsible for communicating with
// the VatPercentages endpoint of the VAT service.
type VATVatPercentagesService service

// VATVatPercentages:
// Service: VAT
// Entity: VatPercentages
// URL: /api/v1/{division}/vat/VatPercentages
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=VATVatPercentages
type VATVatPercentages struct {
	// ID: Primary key
	ID *GUID `json:"ID,omitempty"`

	// Created: Creation date
	Created *Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// EndDate: End date of the date range during which this percentage is valid
	EndDate *Date `json:"EndDate,omitempty"`

	// LineNumber: Line number
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Last modified date
	Modified *Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Percentage: Percentage
	Percentage *float64 `json:"Percentage,omitempty"`

	// StartDate: Start date of the date range during which this percentage is valid
	StartDate *Date `json:"StartDate,omitempty"`

	// Type: 0 = Normal, 1 = Extra duty
	Type *int `json:"Type,omitempty"`

	// VATCodeID: VAT code
	VATCodeID *GUID `json:"VATCodeID,omitempty"`
}

func (s *VATVatPercentages) GetIdentifier() GUID {
	return *s.ID
}

// List the VatPercentages entities in the provided divison.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *VATVatPercentagesService) List(ctx context.Context, division int, all bool) ([]*VATVatPercentages, error) {
	var entities []*VATVatPercentages
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/vat/VatPercentages?$select=*", division)
	if err != nil {
		return nil, err
	}
	if all {
		err = s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, _, err = s.client.ListRequestAndDo(ctx, u.String(), &entities)
	return entities, err
}

/* // Get the VatPercentages enitity, by ID.
func (s *VATVatPercentagesService) Get(ctx context.Context, division int, id GUID) (*VATVatPercentages, error) {
	var entities []*VATVatPercentages
	u, err := s.client.ResolvePathWithDivision("/api/v1/{division}/vat/VatPercentages?$select=*", division)
	if err != nil {
		return nil, err
	}

	if _, _, _, err := s.client.ListRequestAndDo(ctx, u.String(), &entities); err != nil {
		return nil, err
	}

	if len(entities) != 1 {
		return nil, fmt.Errorf("Returned %d VatPercentages entities, expected 1", len(entities))
	}

	return entities[0], nil
} */
